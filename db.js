const sqlite3 = require("sqlite3").verbose()
const path = require("path")

// –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–ø–∫–µ data
const dbPath = path.join(__dirname, "data", "botUsers.db")
const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", err.message)
  } else {
    console.log("[v0] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite:", dbPath)
  }
})

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
db.serialize(() => {
  db.run(
    `
    CREATE TABLE IF NOT EXISTS bot_users (
      chat_id INTEGER PRIMARY KEY,
      first_name TEXT,
      last_name TEXT,
      username TEXT,
      joined_at TEXT NOT NULL,
      last_interaction TEXT NOT NULL,
      is_active INTEGER DEFAULT 1
    )
  `,
    (err) => {
      if (err) {
        console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã bot_users:", err.message)
      } else {
        console.log("[v0] ‚úÖ –¢–∞–±–ª–∏—Ü–∞ bot_users –≥–æ—Ç–æ–≤–∞")
      }
    },
  )
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function saveUser(chatId, firstName, lastName, username) {
  return new Promise((resolve, reject) => {
    const now = new Date().toISOString()

    db.run(
      `
      INSERT INTO bot_users (chat_id, first_name, last_name, username, joined_at, last_interaction, is_active)
      VALUES (?, ?, ?, ?, ?, ?, 1)
      ON CONFLICT(chat_id) DO UPDATE SET
        first_name = excluded.first_name,
        last_name = excluded.last_name,
        username = excluded.username,
        last_interaction = excluded.last_interaction,
        is_active = 1
    `,
      [chatId, firstName, lastName, username, now, now],
      function (err) {
        if (err) {
          console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err.message)
          reject(err)
        } else {
          console.log("[v0] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω:", chatId, firstName)
          resolve(this.changes)
        }
      },
    )
  })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function getAllUsers() {
  return new Promise((resolve, reject) => {
    db.all(
      `
      SELECT chat_id as chatId, first_name as firstName, last_name as lastName, 
             username, joined_at as joinedAt, last_interaction as lastInteraction
      FROM bot_users
      WHERE is_active = 1
      ORDER BY joined_at DESC
    `,
      [],
      (err, rows) => {
        if (err) {
          console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err.message)
          reject(err)
        } else {
          console.log("[v0] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î:", rows.length)
          resolve(rows)
        }
      },
    )
  })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function getUserCount() {
  return new Promise((resolve, reject) => {
    db.get(
      `
      SELECT COUNT(*) as count
      FROM bot_users
      WHERE is_active = 1
    `,
      [],
      (err, row) => {
        if (err) {
          console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err.message)
          reject(err)
        } else {
          resolve(row.count)
        }
      },
    )
  })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
function deactivateUser(chatId) {
  return new Promise((resolve, reject) => {
    db.run(
      `
      UPDATE bot_users
      SET is_active = 0
      WHERE chat_id = ?
    `,
      [chatId],
      function (err) {
        if (err) {
          console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err.message)
          reject(err)
        } else {
          console.log("[v0] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:", chatId)
          resolve(this.changes)
        }
      },
    )
  })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –≤ SQLite
async function migrateFromJSON(jsonUsers) {
  console.log("[v0] üîÑ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON –≤ SQLite...")
  let migrated = 0
  let skipped = 0

  for (const user of jsonUsers) {
    try {
      await saveUser(user.chatId, user.firstName, user.lastName || null, user.username || null)
      migrated++
    } catch (err) {
      console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user.chatId, err.message)
      skipped++
    }
  }

  console.log("[v0] ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ:", migrated, "–ü—Ä–æ–ø—É—â–µ–Ω–æ:", skipped)
  return { migrated, skipped }
}

module.exports = {
  db,
  saveUser,
  getAllUsers,
  getUserCount,
  deactivateUser,
  migrateFromJSON,
}
