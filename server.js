require("dotenv").config()

const express = require("express")
const cors = require("cors")
const bodyParser = require("body-parser")
const multer = require("multer")
const path = require("path")
const fs = require("fs").promises
const ExcelJS = require("exceljs")
const newsParser = require("./parsers/newsParser")

// Helper to build compact callback_data (<=64 bytes)
function buildCallbackData(kind, id, action) {
  // kind: 'e' (event), 'v' (video), 'p' (photo)
  // action: 'ap' (approve), 'rj' (reject)
  try {
    return JSON.stringify({ t: kind, i: String(id), a: action })
  } catch (e) {
    // Fallback minimal string if JSON fails
    return `${kind}|${String(id)}|${action}`.slice(0, 64)
  }
}
const scheduleParser = require("./parsers/scheduleParser")
const TelegramBot = require("node-telegram-bot-api")
const { exec } = require("child_process")
const util = require("util")
const execPromise = util.promisify(exec)
const { saveUser, getAllUsers, getUserCount, migrateFromJSON } = require("./db")

const app = express()
const PORT = process.env.PORT || 5000

app.use(cors())
app.use(bodyParser.json({ limit: "200mb" }))
app.use(bodyParser.urlencoded({ extended: true, limit: "200mb" }))

// Disable caching for HTML, JS, and CSS files
app.use((req, res, next) => {
  if (req.url.match(/\.(html|js|css)$/)) {
    res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate")
    res.setHeader("Pragma", "no-cache")
    res.setHeader("Expires", "0")
  }
  next()
})

app.use(express.static("public"))
app.use("/uploads", express.static("uploads"))

const videoStorage = multer.diskStorage({
  destination: "./uploads/videos",
  filename: (req, file, cb) => {
    cb(null, Date.now() + "-" + file.originalname)
  },
})

const photoStorage = multer.diskStorage({
  destination: "./uploads/photos",
  filename: (req, file, cb) => {
    cb(null, Date.now() + "-" + file.originalname)
  },
})

const heroImageStorage = multer.diskStorage({
  destination: "./uploads/hero-images",
  filename: (req, file, cb) => {
    cb(null, "hero-" + Date.now() + "-" + file.originalname)
  },
})

const scheduleStorage = multer.diskStorage({
  destination: "./uploads/schedules",
  filename: (req, file, cb) => {
    cb(null, "schedule-" + Date.now() + "-" + file.originalname)
  },
})

const uploadVideo = multer({ storage: videoStorage, limits: { fileSize: 1024 * 1024 * 1024 } })
const uploadPhoto = multer({ storage: photoStorage, limits: { fileSize: 10 * 1024 * 1024 } })
const uploadHeroImage = multer({ storage: heroImageStorage, limits: { fileSize: 10 * 1024 * 1024 } })
const uploadSchedule = multer({ storage: scheduleStorage, limits: { fileSize: 5 * 1024 * 1024 } })

const uploadVideoWithThumbnail = multer({
  storage: videoStorage,
  limits: { fileSize: 1024 * 1024 * 1024 }, // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 200MB –¥–æ 1GB (1024 MB)
}).fields([
  { name: "video", maxCount: 1 },
  { name: "thumbnail", maxCount: 1 },
])

let newsCache = []
let eventsData = []
let schedulesData = []
let videosData = []
let photosData = []
let eventMessages = {}
let eventParticipants = {}
let botUsers = []
let userRestrictions = {}
let navigationPhotos = []
let userStarsBalances = {}
let photoReactions = {}
let photoUnlocks = {}
let dailyPhotoUploads = {}
let weeklyBlurPhotos = {}
let photoEarnings = {}
let adminSettings = {
  heroImages: {
    news: "https://placehold.co/600x300/a3e635/444?text=News",
    schedule: "https://placehold.co/600x300/60a5fa/FFF?text=Schedule",
    video: "https://placehold.co/600x300/f87171/FFF?text=Video",
    events: "https://placehold.co/600x300/c084fc/FFF?text=Events",
  },
  imagePositions: {
    news: { x: 50, y: 50 },
    schedule: { x: 50, y: 50 },
    video: { x: 50, y: 50 },
    events: { x: 50, y: 50 },
  },
}
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || "1234"

function getWeekStart() {
  const now = new Date()
  const dayOfWeek = now.getDay()
  const diff = dayOfWeek === 0 ? 6 : dayOfWeek - 1
  const monday = new Date(now)
  monday.setDate(now.getDate() - diff)
  monday.setHours(0, 0, 0, 0)
  return monday.toISOString().split('T')[0]
}

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || ""
let bot = null

if (BOT_TOKEN) {
  try {
    bot = new TelegramBot(BOT_TOKEN, { polling: true })
    console.log("Telegram bot initialized")

    bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id
      const user = msg.from

      try {
        await saveUser(chatId, user.first_name, user.last_name, user.username)

        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if (!botUsers.find((u) => u.chatId === chatId)) {
          botUsers.push({
            chatId,
            firstName: user.first_name,
            username: user.username,
            joinedAt: new Date().toISOString(),
          })
          saveBotUsers()
        }

        bot.sendMessage(chatId, "–í—ñ—Ç–∞—î–º–æ –≤ U-hub Bot! –¢—É—Ç –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–µ–æ —Ç–∞ –ø–æ–¥—ñ—ó.")
      } catch (error) {
        console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error.message)
        bot.sendMessage(chatId, "–í—ñ—Ç–∞—î–º–æ –≤ U-hub Bot! –¢—É—Ç –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–µ–æ —Ç–∞ –ø–æ–¥—ñ—ó.")
      }
    })

    bot.on("message", async (msg) => {
      // –û–±—Ä–æ–±–∫–∞ —É—Å–ø—ñ—à–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤
      if (msg.successful_payment) {
        console.log("[v0] ‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –ø–ª–∞—Ç—ñ–∂:", msg.successful_payment)

        try {
          const payload = JSON.parse(msg.successful_payment.invoice_payload)

          if (payload.type === "photo_unlock") {
            const { photoId, userId } = payload
            const photo = photosData.find((p) => p.id === photoId)

            if (photo) {
              // –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ
              if (!photoUnlocks[photoId]) {
                photoUnlocks[photoId] = []
              }
              if (!photoUnlocks[photoId].includes(String(userId))) {
                photoUnlocks[photoId].push(String(userId))
              }

              // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–ª–∞—Ç–Ω–∏—Ö –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ–≤
              photo.paidUnlocks = (photo.paidUnlocks || 0) + 1

              // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–æ—Å—è–≥–Ω—É—Ç–æ 50 –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ–≤
              const authorId = String(photo.userId)
              if (!photoEarnings[photoId]) {
                photoEarnings[photoId] = { earned: 0, lastPayout: 0 }
              }

              photoEarnings[photoId].earned += 1

              // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≤–∏–ø–ª–∞—Ç–∞ –∫–æ–∂–Ω—ñ 50 –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ–≤
              if (photoEarnings[photoId].earned >= 50 && 
                  photoEarnings[photoId].earned % 50 === 0) {
                
                userStarsBalances[authorId] = (userStarsBalances[authorId] || 0) + 50
                photoEarnings[photoId].lastPayout = photoEarnings[photoId].earned

                // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É
                try {
                  await bot.sendMessage(
                    photo.userId,
                    `üéâ –í—ñ—Ç–∞—î–º–æ!\n\n–í–∞—à–µ —Ñ–æ—Ç–æ –Ω–∞–±—Ä–∞–ª–æ ${photoEarnings[photoId].earned} –ø–ª–∞—Ç–Ω–∏—Ö –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤!\n\nüí∞ –í–∞–º –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ 50 Telegram Stars ‚≠ê\n\n–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —è–∫—ñ—Å–Ω—ñ —Ñ–æ—Ç–æ!`
                  )
                } catch (notifyError) {
                  console.error("[v0] ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É:", notifyError)
                }
              }

              await saveData()

              await bot.sendMessage(msg.chat.id, "‚úÖ –§–æ—Ç–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ! –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –π–æ–≥–æ –≤ –≥–∞–ª–µ—Ä–µ—ó.")
            }
          }
        } catch (error) {
          console.error("[v0] ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É:", error)
        }
        return
      }

      if (msg.text && msg.text.startsWith("/")) return // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ

      const chatId = msg.chat.id
      const user = msg.from

      try {
        await saveUser(chatId, user.first_name, user.last_name, user.username)
      } catch (error) {
        console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏:", error.message)
      }
    })

    bot.on("pre_checkout_query", async (query) => {
      try {
        console.log("[v0] üí≥ –û—Ç—Ä–∏–º–∞–Ω–æ pre_checkout_query:", query)
        await bot.answerPreCheckoutQuery(query.id, true)
      } catch (error) {
        console.error("[v0] ‚ùå –ü–æ–º–∏–ª–∫–∞ pre_checkout_query:", error)
      }
    })

    bot.on("successful_payment", async (msg) => {
      try {
        console.log("[v0] ‚úÖ –£—Å–ø—ñ—à–Ω–∞ –æ–ø–ª–∞—Ç–∞:", msg.successful_payment)
        const payload = JSON.parse(msg.successful_payment.invoice_payload)
        const { type, photoId, userId } = payload

        if (type === "photo_unlock") {
          const photo = photosData.find((p) => p.id === photoId)
          if (!photo) {
            console.error("[v0] ‚ùå –§–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:", photoId)
            return
          }

          // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ —Ñ–æ—Ç–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
          if (!photoUnlocks[photoId]) {
            photoUnlocks[photoId] = []
          }
          if (!photoUnlocks[photoId].includes(String(userId))) {
            photoUnlocks[photoId].push(String(userId))
          }

          const authorId = String(photo.userId)
          userStarsBalances[authorId] = (userStarsBalances[authorId] || 0) + 1

          // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ–≤ —Ñ–æ—Ç–æ
          photo.unlockCount = (photo.unlockCount || 0) + 1

          if (photo.unlockCount % 50 === 0) {
            const starsToTransfer = 50
            const currentBalance = userStarsBalances[authorId] || 0

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É –ø—Ä–æ –Ω–∞–≥–æ—Ä–æ–¥—É
            try {
              await bot.sendMessage(
                authorId,
                `üéâ –í—ñ—Ç–∞—î–º–æ! –í–∞—à–µ —Ñ–æ—Ç–æ –Ω–∞–±—Ä–∞–ª–æ ${photo.unlockCount} –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ–≤!\n\n` +
                  `‚≠ê –í–∞–º –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ ${starsToTransfer} –∑—ñ—Ä–æ–∫ Telegram!\n` +
                  `üí∞ –í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance} –∑—ñ—Ä–æ–∫\n\n` +
                  `–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —è–∫—ñ—Å–Ω—ñ —Ñ–æ—Ç–æ! üì∏`,
              )
              console.log(`[v0] üéÅ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É ${authorId} –ø—Ä–æ ${starsToTransfer} –∑—ñ—Ä–æ–∫`)
            } catch (error) {
              console.error(`[v0] ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É:`, error)
            }
          }

          await saveData()

          await bot.sendMessage(userId, "‚úÖ –§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ!")
          console.log(`[v0] üîì –§–æ—Ç–æ ${photoId} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}`)
        }
      } catch (error) {
        console.error("[v0] ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ successful_payment:", error)
      }
    })

    bot.on("callback_query", async (query) => {
      const chatId = query.message.chat.id
      const user = query.from

      try {
        await saveUser(chatId, user.first_name, user.last_name, user.username)
      } catch (error) {
        console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ callback:", error.message)
      }

      let data
      try {
        data = JSON.parse(query.data)
      } catch (e) {
        // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ {t:'p',i:'id',a:'ap'}
        const parts = String(query.data).split("|")
        if (parts.length === 3) {
          data = { t: parts[0], i: parts[1], a: parts[2] }
        } else {
          data = {}
        }
      }

      const type = data.type || data.t
      const action = data.action || data.a
      const videoId = data.videoId || data.i
      const eventId = data.eventId || data.i
      const photoId = data.photoId || data.i

      if (type === "video_mod" || type === 'v') {
        const video = videosData.find((v) => v.id === videoId)
        if (video) {
          if (action === "approve" || action === 'ap') {
            video.status = "approved"
            video.approvedAt = new Date().toISOString()
            bot.editMessageCaption(`‚úÖ –í—ñ–¥–µ–æ —Å—Ö–≤–∞–ª–µ–Ω–æ`, {
              chat_id: query.message.chat.id,
              message_id: query.message.message_id,
            })
          } else if (action === "reject" || action === 'rj') {
            video.status = "rejected"
            video.rejectedAt = new Date().toISOString()
            bot.editMessageCaption(`‚ùå –í—ñ–¥–µ–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ`, {
              chat_id: query.message.chat.id,
              message_id: query.message.message_id,
            })
          }
          await saveData()
        }
        bot.answerCallbackQuery(query.id)
      } else if (type === "event_mod" || type === 'e') {
        const event = eventsData.find((e) => e.id === eventId)
        if (event) {
          if (action === "approve" || action === 'ap') {
            event.status = "approved"
            event.approvedAt = new Date().toISOString()
            bot.editMessageText(`‚úÖ –Ü–≤–µ–Ω—Ç —Å—Ö–≤–∞–ª–µ–Ω–æ`, {
              chat_id: query.message.chat.id,
              message_id: query.message.message_id,
            })
          } else if (action === "reject" || action === 'rj') {
            event.status = "rejected"
            event.rejectedAt = new Date().toISOString()
            bot.editMessageText(`‚ùå –Ü–≤–µ–Ω—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ`, {
              chat_id: query.message.chat.id,
              message_id: query.message.message_id,
            })
          }
          await saveData()
        }
        bot.answerCallbackQuery(query.id)
      } else if (type === "photo_mod" || type === 'p') {
        const photo = photosData.find((p) => p.id === photoId)
        if (photo) {
          if (action === "approve" || action === 'ap') {
            photo.status = "approved"
            photo.approvedAt = new Date().toISOString()
            bot.editMessageCaption(`‚úÖ –§–æ—Ç–æ —Å—Ö–≤–∞–ª–µ–Ω–æ`, {
              chat_id: query.message.chat.id,
              message_id: query.message.message_id,
            })
          } else if (action === "reject" || action === 'rj') {
            photo.status = "rejected"
            photo.rejectedAt = new Date().toISOString()
            bot.editMessageCaption(`‚ùå –§–æ—Ç–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ`, {
              chat_id: query.message.chat.id,
              message_id: query.message.message_id,
            })
          }
          await saveData()
        }
        bot.answerCallbackQuery(query.id)
      }
    })
  } catch (error) {
    console.error("Error initializing Telegram bot:", error.message)
  }
}

async function initializeData() {
  try {
    const dataPath = path.join(__dirname, "data")

    try {
      const eventsFile = await fs.readFile(path.join(dataPath, "events.json"), "utf-8")
      eventsData = JSON.parse(eventsFile)
    } catch (e) {
      eventsData = []
    }

    try {
      const videosFile = await fs.readFile(path.join(dataPath, "videos.json"), "utf-8")
      videosData = JSON.parse(videosFile)
    } catch (e) {
      videosData = []
    }

    try {
      const photosFile = await fs.readFile(path.join(dataPath, "photos.json"), "utf-8")
      photosData = JSON.parse(photosFile)
    } catch (e) {
      photosData = []
    }

    schedulesData = await scheduleParser.initializeSchedules(dataPath)

    await loadBotUsers()

    if (botUsers.length > 0) {
      try {
        await migrateFromJSON(botUsers)
      } catch (error) {
        console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error.message)
      }
    }

    await loadAdminSettings()
    await loadUserRestrictions()
    await loadEventParticipants()

    try {
      const messagesFile = await fs.readFile(path.join(dataPath, "eventMessages.json"), "utf-8")
      eventMessages = JSON.parse(messagesFile)
      console.log("[v0] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    } catch (e) {
      eventMessages = {}
      console.log("[v0] ‚ö†Ô∏è –§–∞–π–ª —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç")
    }

    try {
      const navigationPhotosFile = await fs.readFile(path.join(dataPath, "navigationPhotos.json"), "utf-8")
      navigationPhotos = JSON.parse(navigationPhotosFile)
      console.log("[v0] ‚úÖ –§–æ—Ç–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:", navigationPhotos.length)
    } catch (error) {
      navigationPhotos = []
      console.log("[v0] ‚ö†Ô∏è –§–∞–π–ª —Ñ–æ—Ç–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤")
    }

    try {
      const starsBalancesFile = await fs.readFile(path.join(dataPath, "userStarsBalances.json"), "utf-8")
      userStarsBalances = JSON.parse(starsBalancesFile)
      console.log("[v0] ‚úÖ –ë–∞–ª–∞–Ω—Å—ã –∑–≤–µ–∑–¥ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    } catch (e) {
      userStarsBalances = {}
      console.log("[v0] ‚ö†Ô∏è –§–∞–π–ª –±–∞–ª–∞–Ω—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç")
    }

    try {
      const photoReactionsFile = await fs.readFile(path.join(dataPath, "photoReactions.json"), "utf-8")
      photoReactions = JSON.parse(photoReactionsFile)
      console.log("[v0] ‚úÖ –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    } catch (e) {
      photoReactions = {}
      console.log("[v0] ‚ö†Ô∏è –§–∞–π–ª —Ä–µ–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç")
    }

    try {
      const photoUnlocksFile = await fs.readFile(path.join(dataPath, "photoUnlocks.json"), "utf-8")
      photoUnlocks = JSON.parse(photoUnlocksFile)
      console.log("[v0] ‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    } catch (e) {
      photoUnlocks = {}
      console.log("[v0] ‚ö†Ô∏è –§–∞–π–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç")
    }

    try {
      const dailyPhotoUploadsFile = await fs.readFile(path.join(dataPath, "dailyPhotoUploads.json"), "utf-8")
      dailyPhotoUploads = JSON.parse(dailyPhotoUploadsFile)
      console.log("[v0] ‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    } catch (e) {
      dailyPhotoUploads = {}
      console.log("[v0] ‚ö†Ô∏è –§–∞–π–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç")
    }

    try {
      const weeklyBlurPhotosFile = await fs.readFile(path.join(dataPath, "weeklyBlurPhotos.json"), "utf-8")
      weeklyBlurPhotos = JSON.parse(weeklyBlurPhotosFile)
      console.log("[v0] ‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –±–ª—é—Ä-—Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    } catch (e) {
      weeklyBlurPhotos = {}
      console.log("[v0] ‚ö†Ô∏è –§–∞–π–ª –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –±–ª—é—Ä-—Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç")
    }

    try {
      const photoEarningsFile = await fs.readFile(path.join(dataPath, "photoEarnings.json"), "utf-8")
      photoEarnings = JSON.parse(photoEarningsFile)
      console.log("[v0] ‚úÖ –ó–∞—Ä–∞–±–æ—Ç–∫–∏ –ø–æ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    } catch (e) {
      photoEarnings = {}
      console.log("[v0] ‚ö†Ô∏è –§–∞–π–ª –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç")
    }

    eventsData.forEach((event) => {
      if (!eventParticipants[event.id]) {
        eventParticipants[event.id] = []
      }
      event.participants = eventParticipants[event.id].length
      if (!eventMessages[event.id]) {
        eventMessages[event.id] = []
      }
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è unlockCount –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–æ—Ç–æ
      photosData.forEach((photo) => {
        if (photo.id === event.id && !photo.unlockCount) {
          photo.unlockCount = 0
        }
      })
    })
    console.log("Data loaded successfully")
  } catch (error) {
    console.error("Error initializing data:", error)
  }
}

async function saveData() {
  try {
    const dataPath = path.join(__dirname, "data")
    await fs.mkdir(dataPath, { recursive: true })

    await Promise.all([
      fs.writeFile(path.join(dataPath, "events.json"), JSON.stringify(eventsData, null, 2)),
      fs.writeFile(path.join(dataPath, "schedules.json"), JSON.stringify(schedulesData, null, 2)),
      fs.writeFile(path.join(dataPath, "videos.json"), JSON.stringify(videosData, null, 2)),
      fs.writeFile(path.join(dataPath, "photos.json"), JSON.stringify(photosData, null, 2)),
      fs.writeFile(path.join(dataPath, "eventMessages.json"), JSON.stringify(eventMessages, null, 2)),
      fs.writeFile(path.join(dataPath, "eventParticipants.json"), JSON.stringify(eventParticipants, null, 2)),
      fs.writeFile(path.join(dataPath, "adminSettings.json"), JSON.stringify(adminSettings, null, 2)),
      fs.writeFile(path.join(dataPath, "userRestrictions.json"), JSON.stringify(userRestrictions, null, 2)),
      fs.writeFile(path.join(dataPath, "navigationPhotos.json"), JSON.stringify(navigationPhotos, null, 2)),
      fs.writeFile(path.join(dataPath, "userStarsBalances.json"), JSON.stringify(userStarsBalances, null, 2)),
      fs.writeFile(path.join(dataPath, "photoReactions.json"), JSON.stringify(photoReactions, null, 2)),
      fs.writeFile(path.join(dataPath, "photoUnlocks.json"), JSON.stringify(photoUnlocks, null, 2)),
      fs.writeFile(path.join(dataPath, "dailyPhotoUploads.json"), JSON.stringify(dailyPhotoUploads, null, 2)),
      fs.writeFile(path.join(dataPath, "weeklyBlurPhotos.json"), JSON.stringify(weeklyBlurPhotos, null, 2)),
      fs.writeFile(path.join(dataPath, "photoEarnings.json"), JSON.stringify(photoEarnings, null, 2)),
    ])

    console.log("Data saved successfully")
  } catch (error) {
    console.error("Error saving data:", error)
  }
}

async function saveBotUsers() {
  try {
    const dataPath = path.join(__dirname, "data")
    await fs.mkdir(dataPath, { recursive: true })
    await fs.writeFile(path.join(dataPath, "botUsers.json"), JSON.stringify(botUsers, null, 2))
  } catch (error) {
    console.error("Error saving bot users:", error)
  }
}

async function loadBotUsers() {
  try {
    const dataPath = path.join(__dirname, "data")
    const botUsersFile = await fs.readFile(path.join(dataPath, "botUsers.json"), "utf-8")
    botUsers = JSON.parse(botUsersFile)
  } catch (e) {
    botUsers = []
  }
}

async function saveUserRestrictions() {
  try {
    const dataPath = path.join(__dirname, "data")
    await fs.mkdir(dataPath, { recursive: true })
    await fs.writeFile(path.join(dataPath, "userRestrictions.json"), JSON.stringify(userRestrictions, null, 2))
  } catch (error) {
    console.error("Error saving user restrictions:", error)
  }
}

async function loadUserRestrictions() {
  try {
    const dataPath = path.join(__dirname, "data")
    const restrictionsFile = await fs.readFile(path.join(dataPath, "userRestrictions.json"), "utf-8")
    userRestrictions = JSON.parse(restrictionsFile)
  } catch (e) {
    userRestrictions = {}
  }
}

async function saveAdminSettings() {
  try {
    const dataPath = path.join(__dirname, "data")
    await fs.mkdir(dataPath, { recursive: true })
    await fs.writeFile(path.join(dataPath, "adminSettings.json"), JSON.stringify(adminSettings, null, 2))
  } catch (error) {
    console.error("Error saving admin settings:", error)
  }
}

async function loadAdminSettings() {
  try {
    const dataPath = path.join(__dirname, "data")
    const settingsFile = await fs.readFile(path.join(dataPath, "adminSettings.json"), "utf-8")
    adminSettings = JSON.parse(settingsFile)
  } catch (e) {
    adminSettings = {
      heroImages: {
        news: "https://placehold.co/600x300/a3e635/444?text=News",
        schedule: "https://placehold.co/600x300/60a5fa/FFF?text=Schedule",
        video: "https://placehold.co/600x300/f87171/FFF?text=Video",
        events: "https://placehold.co/600x300/c084fc/FFF?text=Events",
      },
      imagePositions: {
        news: { x: 50, y: 50 },
        schedule: { x: 50, y: 50 },
        video: { x: 50, y: 50 },
        events: { x: 50, y: 50 },
      },
    }
  }
}

async function saveEventParticipants() {
  try {
    const dataPath = path.join(__dirname, "data")
    await fs.mkdir(dataPath, { recursive: true })
    await fs.writeFile(path.join(dataPath, "eventParticipants.json"), JSON.stringify(eventParticipants, null, 2))
  } catch (error) {
    console.error("Error saving event participants:", error)
  }
}

async function loadEventParticipants() {
  try {
    const dataPath = path.join(__dirname, "data")
    const participantsFile = await fs.readFile(path.join(dataPath, "eventParticipants.json"), "utf-8")
    eventParticipants = JSON.parse(participantsFile)
  } catch (e) {
    eventParticipants = {}
  }
}

// –°–∏—Å—Ç–µ–º–∞ Push —Å–ø–æ–≤—ñ—â–µ–Ω—å –∑–∞ 1 –≥–æ–¥–∏–Ω—É –¥–æ –ø–æ–¥—ñ—ó
const notifiedEvents = new Set()

function parseEventDateTime(eventDate, eventTime) {
  try {
    const [day, month, year] = eventDate.split(".")
    const [hours, minutes] = eventTime.split(":")
    return new Date(year, month - 1, day, hours, minutes)
  } catch (error) {
    console.error("Error parsing event date/time:", error)
    return null
  }
}

async function checkUpcomingEvents() {
  try {
    console.log("[v0] üîî –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è...")

    const now = new Date()
    const oneHourFromNow = new Date(now.getTime() + 60 * 60 * 1000)
    const fiveMinutesFromOneHour = new Date(now.getTime() + 55 * 60 * 1000)

    for (const event of eventsData) {
      if (notifiedEvents.has(event.id)) continue

      const eventDateTime = parseEventDateTime(event.date, event.time)

      if (eventDateTime >= fiveMinutesFromOneHour && eventDateTime <= oneHourFromNow) {
        console.log(`[v0] üîî –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è: ${event.title}`)

        const participants = eventParticipants[event.id] || []

        for (const participant of participants) {
          if (bot && participant.userId) {
            try {
              await bot.sendMessage(
                participant.userId,
                `üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!\n\n–ü–æ–¥—ñ—è "${event.title}" –ø–æ—á–Ω–µ—Ç—å—Å—è —á–µ—Ä–µ–∑ 1 –≥–æ–¥–∏–Ω—É!\n\nüìÖ ${event.date} –æ ${event.time}\nüìç ${event.location}`,
              )
              console.log(`[v0] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${participant.userId}`)
            } catch (error) {
              console.error(`[v0] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${participant.userId}:`, error.message)
            }
          }
        }

        notifiedEvents.add(event.id)
      }
    }
  } catch (error) {
    console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π:", error)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(checkUpcomingEvents, 5 * 60 * 1000)

async function updateNewsCache() {
  try {
    newsCache = await newsParser.getAllNews()
    console.log(`News cache updated: ${newsCache.length} articles`)
  } catch (error) {
    console.error("Error updating news cache:", error)
  }
}

app.get("/api/news", async (req, res) => {
  try {
    if (newsCache.length === 0) {
      await updateNewsCache()
    }
    res.json(newsCache)
  } catch (error) {
    console.error("Error fetching news:", error)
    res.status(500).json({ error: "Failed to fetch news" })
  }
})

app.get("/api/schedules/search", async (req, res) => {
  try {
    const { course, query } = req.query

    const results = await scheduleParser.searchSchedules(query, course)
    res.json(results)
  } catch (error) {
    console.error("Error searching schedules:", error)
    res.status(500).json({ error: "Failed to search schedules" })
  }
})

app.get("/api/events", (req, res) => {
  const now = new Date()
  const cutoffTime = new Date(now.getTime() - 72 * 60 * 60 * 1000) // 72 —á–∞—Å–∞ –Ω–∞–∑–∞–¥ –¥–ª—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è

  const approvedEvents = eventsData
    .filter((e) => {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
      if (e.status !== "approved" && e.status) return false

      const expiresAt = new Date(e.expiresAt)
      if (expiresAt < cutoffTime) {
        return false // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è, –∏—Å—Ç–µ–∫—à–∏–µ –±–æ–ª–µ–µ 72 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
      }

      return true
    })
    .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)) // –ù–æ–≤—ã–µ –≤–≤–µ—Ä—Ö—É

  res.json(approvedEvents)
})

app.get("/api/events/:id", (req, res) => {
  const event = eventsData.find((e) => e.id === req.params.id)
  if (event) {
    res.json(event)
  } else {
    res.status(404).json({ error: "Event not found" })
  }
})

app.post("/api/events", async (req, res) => {
  try {
    const { title, date, time, location, description, duration, creatorUsername } = req.body

    const newEvent = {
      id: Date.now().toString(),
      title,
      date,
      time,
      location,
      description,
      participants: 0,
      createdAt: new Date().toISOString(),
      expiresAt: new Date(Date.now() + (duration || 24) * 60 * 60 * 1000).toISOString(),
      joined: false,
      status: "pending",
      creatorUsername: creatorUsername || "–ê–Ω–æ–Ω—ñ–º",
    }

    eventsData.push(newEvent)
    eventMessages[newEvent.id] = []
    await saveData()

    if (bot && botUsers.length > 0) {
      const adminUsers = botUsers.slice(0, 1)
      for (const admin of adminUsers) {
        try {
          await bot.sendMessage(
            admin.chatId,
            `üéâ –ù–æ–≤–∏–π —ñ–≤–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é:\n\nüìù –ù–∞–∑–≤–∞: ${newEvent.title}\nüìÖ –î–∞—Ç–∞: ${newEvent.date}\n‚è∞ –ß–∞—Å: ${newEvent.time}\nüìç –ú—ñ—Å—Ü–µ: ${newEvent.location}\nüë§ –ê–≤—Ç–æ—Ä: ${newEvent.creatorUsername}\n\n–û–ø–∏—Å: ${newEvent.description}`,
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏",
                      callback_data: buildCallbackData('e', newEvent.id, 'ap'),
                    },
                    {
                      text: "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏",
                      callback_data: buildCallbackData('e', newEvent.id, 'rj'),
                    },
                  ],
                ],
              },
            },
          )
        } catch (error) {
          console.error("Error sending event notification to bot:", error.message)
        }
      }
    }

    res.json({ success: true, message: "–í–∞—à —ñ–≤–µ–Ω—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥.", event: newEvent })
  } catch (error) {
    console.error("Error creating event:", error)
    res.status(500).json({ error: "Failed to create event" })
  }
})

app.post("/api/events/:id/join", async (req, res) => {
  console.log("[v0] üéâ ========== –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–ï –ö –°–û–ë–´–¢–ò–Æ ==========")
  console.log("[v0] üìã Event ID:", req.params.id)
  console.log("[v0] üë§ User data:", req.body)

  try {
    const { userId, firstName, photoUrl } = req.body
    const event = eventsData.find((e) => e.id === req.params.id)

    if (event) {
      if (!eventParticipants[event.id]) {
        eventParticipants[event.id] = []
        console.log("[v0] üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏—è")
      }

      const existingParticipant = eventParticipants[event.id].find((p) => String(p.userId) === String(userId))

      if (!existingParticipant) {
        eventParticipants[event.id].push({ userId, firstName, photoUrl, joinedAt: new Date().toISOString() })
        console.log("[v0] ‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω")

        if (!eventMessages[event.id]) {
          eventMessages[event.id] = []
        }

        eventMessages[event.id].push({
          id: Date.now().toString(),
          text: "–ü—Ä–∏–≤—ñ—Çüëã",
          timestamp: new Date().toISOString(),
          sender: "system",
          userId: userId,
          firstName: firstName,
          photoUrl: photoUrl,
        })
        console.log("[v0] üëã –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏")
      } else {
        console.log("[v0] ‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ")
      }

      event.participants = eventParticipants[event.id].length
      console.log("[v0] üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", event.participants)

      await saveData()
      console.log("[v0] üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

      res.json({ success: true, participants: event.participants, joined: true })
      console.log("[v0] üéâ ========== –ö–û–ù–ï–¶ –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–Ø ==========")
    } else {
      console.error("[v0] ‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
      res.status(404).json({ error: "Event not found" })
    }
  } catch (error) {
    console.error("[v0] üí• –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", error)
    res.status(500).json({ error: "Failed to join event" })
  }
})

app.post("/api/events/:id/leave", async (req, res) => {
  try {
    const { userId } = req.body
    const event = eventsData.find((e) => e.id === req.params.id)

    if (event) {
      if (eventParticipants[event.id]) {
        eventParticipants[event.id] = eventParticipants[event.id].filter((p) => String(p.userId) !== String(userId))
        event.participants = eventParticipants[event.id].length
        await saveData()
      }

      res.json({ success: true, participants: event.participants, joined: false })
    } else {
      res.status(404).json({ error: "Event not found" })
    }
  } catch (error) {
    console.error("Error leaving event:", error)
    res.status(500).json({ error: "Failed to leave event" })
  }
})

app.get("/api/events/:id/joined", (req, res) => {
  console.log("[v0] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–±—ã—Ç–∏–∏:", req.params.id, "User:", req.query.userId)

  const { userId } = req.query
  const event = eventsData.find((e) => e.id === req.params.id)

  if (event && eventParticipants[event.id]) {
    const isJoined = eventParticipants[event.id].some((p) => String(p.userId) === String(userId))
    const participants = eventParticipants[event.id].length

    console.log("[v0] üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    console.log("[v0]   - Joined:", isJoined)
    console.log("[v0]   - Participants:", participants)

    res.json({ joined: isJoined, participants: participants })
  } else {
    console.log("[v0] ‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    res.json({ joined: false, participants: event?.participants || 0 })
  }
})

const typingUsers = {} // { eventId: { userId: { firstName, timestamp } } }

app.post("/api/events/:id/messages", async (req, res) => {
  console.log("[v0] üí¨ ========== –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø ==========")
  console.log("[v0] üìã Event ID:", req.params.id)
  console.log("[v0] üìù Message:", req.body.message)
  console.log("[v0] üë§ User:", req.body.firstName)

  const { message, userId, firstName, photoUrl } = req.body
  const eventId = req.params.id

  const restrictionKey = `${eventId}_${userId}`
  if (userRestrictions[restrictionKey]) {
    const restriction = userRestrictions[restrictionKey]
    if (restriction.blocked) {
      console.log("[v0] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
      return res.status(403).json({ error: "–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –≤ —Ü—å–æ–º—É —ñ–≤–µ–Ω—Ç—ñ" })
    }
    if (restriction.muted && (!restriction.muteUntil || new Date(restriction.muteUntil) > new Date())) {
      console.log("[v0] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º—É—Ç–µ")
      return res.status(403).json({ error: "–í–∏ –≤ –º—É—Ç—ñ. –ù–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" })
    }
  }

  if (!eventMessages[eventId]) {
    eventMessages[eventId] = []
    console.log("[v0] üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–±—ã—Ç–∏—è")
  }

  const newMessage = {
    id: Date.now().toString(),
    text: message,
    timestamp: new Date().toISOString(),
    sender: "user",
    userId,
    firstName,
    photoUrl,
  }

  eventMessages[eventId].push(newMessage)
  console.log("[v0] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
  console.log("[v0] üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ:", eventMessages[eventId].length)

  if (typingUsers[eventId] && typingUsers[eventId][userId]) {
    delete typingUsers[eventId][userId]
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
  try {
    const dataPath = path.join(__dirname, "data")
    await fs.mkdir(dataPath, { recursive: true })
    await fs.writeFile(path.join(dataPath, "eventMessages.json"), JSON.stringify(eventMessages, null, 2))
    console.log("[v0] üíæ –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª")
  } catch (error) {
    console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:", error)
  }

  console.log("[v0] üí¨ ========== –ö–û–ù–ï–¶ –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø ==========")
  res.json(newMessage)
})

app.get("/api/events/:id/messages", (req, res) => {
  const eventId = req.params.id
  console.log("[v0] üì® –ó–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–±—ã—Ç–∏—è:", eventId)
  console.log("[v0] üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π:", eventMessages[eventId]?.length || 0)
  res.json(eventMessages[eventId] || [])
})

app.post("/api/events/:id/typing", (req, res) => {
  const eventId = req.params.id
  const { userId, firstName, isTyping } = req.body

  console.log("[v0] ‚å®Ô∏è Typing event:", { eventId, userId, firstName, isTyping })

  if (!typingUsers[eventId]) {
    typingUsers[eventId] = {}
    console.log("[v0] üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–±—ã—Ç–∏—è")
  }

  if (isTyping) {
    typingUsers[eventId][userId] = {
      firstName,
      timestamp: Date.now(),
    }
    console.log("[v0] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–µ—á–∞—Ç–∞—é—â–∏–µ:", firstName)
    console.log("[v0] üìä –í—Å–µ–≥–æ –ø–µ—á–∞—Ç–∞—é—â–∏—Ö:", Object.keys(typingUsers[eventId]).length)
  } else {
    delete typingUsers[eventId][userId]
    console.log("[v0] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –ø–µ—á–∞—Ç–∞—é—â–∏—Ö:", firstName)
  }

  res.json({ success: true })
})

app.get("/api/events/:id/typing", (req, res) => {
  const eventId = req.params.id
  const { userId } = req.query

  console.log("[v0] üëÄ –ó–∞–ø—Ä–æ—Å –ø–µ—á–∞—Ç–∞—é—â–∏—Ö –¥–ª—è —Å–æ–±—ã—Ç–∏—è:", eventId, "–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId)

  if (!typingUsers[eventId]) {
    console.log("[v0] ‚ö†Ô∏è –ù–µ—Ç –ø–µ—á–∞—Ç–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è")
    return res.json([])
  }

  // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (—Å—Ç–∞—Ä—à–µ 5 —Å–µ–∫—É–Ω–¥)
  const now = Date.now()
  let cleaned = 0
  Object.keys(typingUsers[eventId]).forEach((uid) => {
    if (now - typingUsers[eventId][uid].timestamp > 5000) {
      delete typingUsers[eventId][uid]
      cleaned++
    }
  })

  if (cleaned > 0) {
    console.log("[v0] üßπ –û—á–∏—â–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:", cleaned)
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—á–∞—Ç–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
  const typing = Object.entries(typingUsers[eventId])
    .filter(([uid]) => uid !== userId)
    .map(([uid, data]) => data.firstName)

  console.log("[v0] üìä –ü–µ—á–∞—Ç–∞—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ):", typing)

  res.json(typing)
})

app.get("/api/events/:eventId/participants/:userId", (req, res) => {
  const { eventId, userId } = req.params

  if (!eventParticipants[eventId]) {
    return res.status(404).json({ error: "Event not found" })
  }

  const participant = eventParticipants[eventId].find((p) => String(p.userId) === String(userId))

  if (!participant) {
    return res.status(404).json({ error: "Participant not found" })
  }

  res.json(participant)
})

const thumbnailStorage = multer.diskStorage({
  destination: "./uploads/thumbnails",
  filename: (req, file, cb) => {
    cb(null, "thumb-" + Date.now() + ".jpg")
  },
})

app.post("/api/videos/upload", uploadVideoWithThumbnail, async (req, res) => {
  console.log("[v0] üé¨ ========== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ì–†–£–ó–ö–ò –í–ò–î–ï–û ==========")
  console.log("[v0] ‚è∞ –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:", new Date().toISOString())
  console.log("[v0] üåê IP –∫–ª–∏–µ–Ω—Ç–∞:", req.ip || req.connection.remoteAddress)
  console.log("[v0] üìã Headers:", JSON.stringify(req.headers, null, 2))

  try {
    console.log("[v0] üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ req.files...")
    console.log("[v0] üìä req.files:", req.files ? Object.keys(req.files) : "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    if (!req.files) {
      console.error("[v0] ‚ùå –û–®–ò–ë–ö–ê: req.files –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
      console.error("[v0] üìã req.body:", req.body)
      return res.status(400).json({ error: "–§–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (req.files –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)" })
    }

    console.log("[v0] üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ req.files:", JSON.stringify(Object.keys(req.files)))

    if (!req.files.video) {
      console.error("[v0] ‚ùå –û–®–ò–ë–ö–ê: –í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ req.files!")
      console.error("[v0] üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:", Object.keys(req.files))
      return res.status(400).json({ error: "–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω" })
    }

    const videoFile = req.files.video[0]
    console.log("[v0] ‚úÖ –í–∏–¥–µ–æ —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω:")
    console.log("[v0]   - –ò–º—è:", videoFile.originalname)
    console.log("[v0]   - –†–∞–∑–º–µ—Ä:", (videoFile.size / 1024 / 1024).toFixed(2), "MB")
    console.log("[v0]   - MIME —Ç–∏–ø:", videoFile.mimetype)
    console.log("[v0]   - –ü—É—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", videoFile.path)
    console.log("[v0]   - –ò–º—è —Ñ–∞–π–ª–∞:", videoFile.filename)

    const thumbnailFile = req.files.thumbnail ? req.files.thumbnail[0] : null

    let thumbnailPath = null

    if (thumbnailFile) {
      console.log("[v0] üñºÔ∏è –ü—Ä–µ–≤—å—é –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:")
      console.log("[v0]   - –†–∞–∑–º–µ—Ä:", (thumbnailFile.size / 1024).toFixed(2), "KB")
      console.log("[v0]   - MIME —Ç–∏–ø:", thumbnailFile.mimetype)
      console.log("[v0]   - –ü—É—Ç—å:", thumbnailFile.path)

      console.log("[v0] üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–≤—å—é...")
      const thumbnailFilename = "thumb-" + Date.now() + ".jpg"
      const thumbnailDestPath = path.join(__dirname, "uploads/thumbnails", thumbnailFilename)

      console.log("[v0] üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–µ–≤—å—é:", path.join(__dirname, "uploads/thumbnails"))
      await fs.mkdir(path.join(__dirname, "uploads/thumbnails"), { recursive: true })

      console.log("[v0] üîÑ –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –ø—Ä–µ–≤—å—é:")
      console.log("[v0]   - –ò–∑:", thumbnailFile.path)
      console.log("[v0]   - –í:", thumbnailDestPath)

      await fs.rename(thumbnailFile.path, thumbnailDestPath)
      thumbnailPath = `/uploads/thumbnails/${thumbnailFilename}`

      console.log("[v0] ‚úÖ –ü—Ä–µ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:", thumbnailPath)
    } else {
      console.log("[v0] ‚ö†Ô∏è –ü—Ä–µ–≤—å—é –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º")
      console.log("[v0] üé¨ –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–≤—å—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å –ø–æ–º–æ—â—å—é ffmpeg...")

      try {
        const thumbnailFilename = "thumb-" + Date.now() + ".jpg"
        const thumbnailDestPath = path.join(__dirname, "uploads/thumbnails", thumbnailFilename)

        console.log("[v0] üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–µ–≤—å—é:", path.join(__dirname, "uploads/thumbnails"))
        await fs.mkdir(path.join(__dirname, "uploads/thumbnails"), { recursive: true })

        const videoPath = path.join(__dirname, videoFile.path)
        console.log("[v0] üé• –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ:", videoPath)
        console.log("[v0] üñºÔ∏è –ü—É—Ç—å –¥–ª—è –ø—Ä–µ–≤—å—é:", thumbnailDestPath)

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞ –≤–∏–¥–µ–æ
        const ffmpegCommand = `ffmpeg -i "${videoPath}" -ss 00:00:00.500 -vframes 1 -vf "scale=640:-1" "${thumbnailDestPath}"`
        console.log("[v0] üîß –ö–æ–º–∞–Ω–¥–∞ ffmpeg:", ffmpegCommand)

        const { stdout, stderr } = await execPromise(ffmpegCommand)
        console.log("[v0] üì§ ffmpeg stdout:", stdout)
        if (stderr) console.log("[v0] üì§ ffmpeg stderr:", stderr)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
        try {
          await fs.access(thumbnailDestPath)
          thumbnailPath = `/uploads/thumbnails/${thumbnailFilename}`
          console.log("[v0] ‚úÖ –ü—Ä–µ–≤—å—é —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", thumbnailPath)
        } catch (accessError) {
          console.error("[v0] ‚ùå –§–∞–π–ª –ø—Ä–µ–≤—å—é –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
          thumbnailPath = null
        }
      } catch (ffmpegError) {
        console.error("[v0] ‚ùå –û–®–ò–ë–ö–ê –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é —Å ffmpeg:")
        console.error("[v0] üìõ –°–æ–æ–±—â–µ–Ω–∏–µ:", ffmpegError.message)
        console.error("[v0] üìö Stack:", ffmpegError.stack)
        console.log("[v0] ‚ö†Ô∏è –í–∏–¥–µ–æ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ë–ï–ó –ø—Ä–µ–≤—å—é")
        thumbnailPath = null
      }
    }

    console.log("[v0] üìù –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ...")
    const videoData = {
      id: Date.now().toString(),
      filename: videoFile.filename,
      originalName: videoFile.originalname,
      path: `/uploads/videos/${videoFile.filename}`,
      thumbnailPath: thumbnailPath,
      uploadedAt: new Date().toISOString(),
      status: "pending",
      size: videoFile.size,
    }

    console.log("[v0] üìä –î–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ:", JSON.stringify(videoData, null, 2))

    console.log("[v0] üíæ –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ –º–∞—Å—Å–∏–≤ videosData...")
    console.log("[v0] üìà –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:", videosData.length)
    videosData.push(videoData)
    console.log("[v0] ‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", videosData.length)

    console.log("[v0] üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª...")
    await saveData()
    console.log("[v0] ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

    if (bot && botUsers.length > 0) {
      console.log("[v0] ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –±–æ—Ç...")
      console.log("[v0] üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:", botUsers.length)

      const adminUsers = botUsers.slice(0, 1)
      console.log("[v0] üë§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º:", adminUsers.length)

      for (const admin of adminUsers) {
        try {
          console.log("[v0] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É:", admin.chatId)
          await bot.sendMessage(
            admin.chatId,
            `üé• –ù–æ–≤–µ –≤—ñ–¥–µ–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é:\n\nüìù –ù–∞–∑–≤–∞: ${videoData.originalName}\nüìÖ –î–∞—Ç–∞: ${new Date(videoData.uploadedAt).toLocaleString("uk-UA")}\nüíæ –†–æ–∑–º—ñ—Ä: ${(videoData.size / 1024 / 1024).toFixed(2)} MB`,
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data: buildCallbackData('v', videoData.id, 'ap') },
                    { text: "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data: buildCallbackData('v', videoData.id, 'rj') },
                  ],
                ],
              },
            },
          )
          console.log("[v0] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        } catch (error) {
          console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error.message)
          console.error("[v0] üìö Stack:", error.stack)
        }
      }
    } else {
      console.log("[v0] ‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
      console.log("[v0] ü§ñ Bot:", bot ? "–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω" : "–Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
      console.log("[v0] üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", botUsers.length)
    }

    console.log("[v0] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É...")
    const response = {
      success: true,
      message: "–í–∞—à–µ –≤—ñ–¥–µ–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥.",
      video: videoData,
    }
    console.log("[v0] üìã –û—Ç–≤–µ—Ç:", JSON.stringify(response, null, 2))

    res.json(response)
    console.log("[v0] ‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    console.log("[v0] üé¨ ========== –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ì–†–£–ó–ö–ò –í–ò–î–ï–û ==========")
  } catch (error) {
    console.error("[v0] üí• ========== –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ==========")
    console.error("[v0] üìõ –¢–∏–ø –æ—à–∏–±–∫–∏:", error.name)
    console.error("[v0] üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ:", error.message)
    console.error("[v0] üìö Stack trace:", error.stack)
    console.error("[v0] üìã req.files:", req.files)
    console.error("[v0] üìã req.body:", req.body)
    console.error("[v0] üí• ========================================")

    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ: " + error.message })
  }
})

app.get("/api/videos/pending", (req, res) => {
  const pendingVideos = videosData.filter((v) => v.status === "pending")
  res.json(pendingVideos)
})

app.get("/api/videos/approved", (req, res) => {
  const approvedVideos = videosData
    .filter((v) => v.status === "approved")
    .sort((a, b) => new Date(b.approvedAt) - new Date(a.approvedAt))
    .slice(0, 3)
  res.json(approvedVideos)
})

app.post("/api/videos/:id/moderate", async (req, res) => {
  try {
    const { action } = req.body
    const video = videosData.find((v) => v.id === req.params.id)

    if (!video) {
      return res.status(404).json({ error: "Video not found" })
    }

    if (action === "approve") {
      video.status = "approved"
      video.approvedAt = new Date().toISOString()
      res.json({ success: true, message: "–í—ñ–¥–µ–æ —Å—Ö–≤–∞–ª–µ–Ω–æ" })
    } else if (action === "reject") {
      video.status = "rejected"
      video.rejectedAt = new Date().toISOString()
      res.json({ success: true, message: "–í—ñ–¥–µ–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ" })
    }

    await saveData()
  } catch (error) {
    console.error("Error moderating video:", error)
    res.status(500).json({ error: "Failed to moderate video" })
  }
})

app.post("/api/photos/upload", uploadPhoto.single("photo"), async (req, res) => {
  console.log("[v0] üì∏ ========== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ì–†–£–ó–ö–ò –§–û–¢–û ==========")
  console.log("[v0] ‚è∞ –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:", new Date().toISOString())
  console.log("[v0] üìã req.body:", req.body)
  console.log("[v0] üìÅ req.file:", req.file)

  try {
    if (!req.file) {
      console.error("[v0] ‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
      return res.status(400).json({ error: "No photo uploaded" })
    }

    console.log("[v0] ‚úÖ –§–∞–π–ª —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω:")
    console.log("[v0]   - –ò–º—è:", req.file.originalname)
    console.log("[v0]   - –†–∞–∑–º–µ—Ä:", (req.file.size / 1024).toFixed(2), "KB")
    console.log("[v0]   - MIME —Ç–∏–ø:", req.file.mimetype)
    console.log("[v0]   - –ü—É—Ç—å:", req.file.path)

    const { eventId, description, userId, firstName, albumId, albumIndex, albumTotal, hasBlur } = req.body

    if (!eventId) {
      console.error("[v0] ‚ùå –û–®–ò–ë–ö–ê: Event ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!")
      return res.status(400).json({ error: "Event ID is required" })
    }

    const blurEnabled = hasBlur === "true" || hasBlur === true

    if (blurEnabled) {
      const weekStart = getWeekStart()
      const userWeekKey = `${userId}_${weekStart}`

      if (weeklyBlurPhotos[userWeekKey]) {
        // –î–æ–∑–≤–æ–ª—è—î–º–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, —è–∫—â–æ —Ü–µ —Ç–æ–π —Å–∞–º–∏–π –∞–ª—å–±–æ–º —ñ–∑ –±–ª—é—Ä–æ–º –≤—ñ–¥ —Ü—å–æ–≥–æ –∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if (albumId) {
          const sameAlbumBlur = photosData.find(
            (p) => p.albumId === albumId && String(p.userId) === String(userId) && p.hasBlur,
          )
          if (!sameAlbumBlur) {
            console.log("[v0] ‚ö†Ô∏è –õ—ñ–º—ñ—Ç –±–ª—é—Ä-—Ñ–æ—Ç–æ: —ñ–Ω—à–∏–π –∞–ª—å–±–æ–º/—Ñ–æ—Ç–æ —É —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å")
            return res.status(400).json({
              error:
                "–í–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –ª—ñ–º—ñ—Ç –±–ª—é—Ä-—Ñ–æ—Ç–æ –Ω–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å (1 —Ñ–æ—Ç–æ/–∞–ª—å–±–æ–º –∑ –±–ª—é—Ä–æ–º –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å)",
            })
          }
        } else {
          console.log("[v0] ‚ö†Ô∏è –õ—ñ–º—ñ—Ç –±–ª—é—Ä-—Ñ–æ—Ç–æ: –≤–∂–µ –±—É–ª–æ —Ñ–æ—Ç–æ –∑ –±–ª—é—Ä–æ–º —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è")
          return res.status(400).json({
            error: "–í–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –ª—ñ–º—ñ—Ç –±–ª—é—Ä-—Ñ–æ—Ç–æ –Ω–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å (1 —Ñ–æ—Ç–æ –∑ –±–ª—é—Ä–æ–º –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å)",
          })
        }
      } else {
        // –ü–æ–º—ñ—á–∞—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ª—ñ–º—ñ—Ç—É –Ω–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å
        weeklyBlurPhotos[userWeekKey] = albumId || new Date().toISOString()
        console.log(`[v0] ‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –±–ª—é—Ä –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}, –∫–ª—é—á: ${userWeekKey}, –∞–ª—å–±–æ–º: ${albumId || 'single'}`)
      }
    }

    console.log("[v0] üìù –î–∞–Ω—ñ —Ñ–æ—Ç–æ:")
    console.log("[v0]   - Event ID:", eventId)
    console.log("[v0]   - Description:", description)
    console.log("[v0]   - User ID:", userId)
    console.log("[v0]   - First Name:", firstName)
    console.log("[v0]   - Album ID:", albumId)
    console.log("[v0]   - Album Index:", albumIndex)
    console.log("[v0]   - Album Total:", albumTotal)
    console.log("[v0]   - Has Blur:", blurEnabled)

    const newPhoto = {
      id: Date.now().toString() + "-" + (albumIndex || "0"),
      filename: req.file.filename,
      url: `/uploads/photos/${req.file.filename}`,
      eventId,
      description: description || "",
      userId,
      firstName: firstName || "–ê–Ω–æ–Ω—ñ–º",
      uploadedAt: new Date().toISOString(),
      status: "pending",
      albumId: albumId || null,
      albumIndex: albumIndex ? Number.parseInt(albumIndex) : null,
      albumTotal: albumTotal ? Number.parseInt(albumTotal) : null,
      unlockCount: 0,
      hasBlur: blurEnabled,
      paidUnlocks: 0,
    }

    console.log("[v0] üíæ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –º–∞—Å—Å–∏–≤ photosData...")
    photosData.push(newPhoto)
    console.log("[v0] ‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ —Ñ–æ—Ç–æ:", photosData.length)

    await saveData()
    console.log("[v0] ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ —Ñ–æ—Ç–æ –∞–ª—å–±–æ–º—É –∞–±–æ –æ–∫—Ä–µ–º–æ–≥–æ —Ñ–æ—Ç–æ
    if (bot && botUsers.length > 0 && (!albumIndex || albumIndex === "0")) {
      console.log("[v0] ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram...")
      const adminUsers = botUsers.slice(0, 1)
      for (const admin of adminUsers) {
        try {
          const event = eventsData.find((e) => e.id === eventId)
          const eventName = event ? event.title : "–ü–æ–¥—ñ—è"
          const photoCount = albumTotal ? ` (${albumTotal} —Ñ–æ—Ç–æ)` : ""
          console.log("[v0] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∞–¥–º—ñ–Ω—É:", admin.chatId)

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –±–∞–∑–æ–≤—ã–π URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ Telegram (–ª–æ–∫–∞–ª—å–Ω—ã–π URL –Ω–µ –ø–æ–¥–æ–π–¥–µ—Ç)
          const baseUrlFromEnv = process.env.PUBLIC_BASE_URL || process.env.APP_BASE_URL || process.env.BASE_URL || null
          const requestBaseUrl = `${req.protocol}://${req.get("host")}`
          const publicBaseUrl = baseUrlFromEnv || (requestBaseUrl.startsWith("http://localhost") ? null : requestBaseUrl)

          if (!publicBaseUrl) {
            console.warn(
              "[v0] ‚ö†Ô∏è PUBLIC_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω –∏ —Ö–æ—Å—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å 'wrong HTTP URL specified'",
            )
          } else {
            await bot.sendPhoto(
              admin.chatId,
              `${publicBaseUrl}${newPhoto.url}`,
              {
              caption: `üì∏ –ù–æ–≤–µ —Ñ–æ—Ç–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é${photoCount}:\n\nüéâ –Ü–≤–µ–Ω—Ç: ${eventName}\nüë§ –ê–≤—Ç–æ—Ä: ${newPhoto.firstName}\nüìù –û–ø–∏—Å: ${newPhoto.description || "–±–µ–∑ –æ–ø–∏—Å—É"}`,
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data: buildCallbackData('p', newPhoto.id, 'ap') },
                    { text: "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data: buildCallbackData('p', newPhoto.id, 'rj') },
                  ],
                ],
              },
              },
            )
            console.log("[v0] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (baseUrl=", publicBaseUrl, ")")
          }
        } catch (error) {
          console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error.message)
        }
      }
    }

    console.log("[v0] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É")
    res.json({
      success: true,
      message: "–§–æ—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é",
      photo: newPhoto,
    })
    console.log("[v0] üì∏ ========== –ö–Ü–ù–ï–¶–¨ –û–ë–†–û–ë–ö–ò –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –§–û–¢–û ==========")
  } catch (error) {
    console.error("[v0] üí• ========== –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ==========")
    console.error("[v0] üìõ –¢–∏–ø –æ—à–∏–±–∫–∏:", error.name)
    console.error("[v0] üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ:", error.message)
    console.error("[v0] üìö Stack trace:", error.stack)
    console.error("[v0] üí• ========================================")
    res.status(500).json({ error: "Failed to upload photo" })
  }
})

app.get("/api/photos/:photoId/reactions", (req, res) => {
  const { photoId } = req.params
  const reactions = photoReactions[photoId] || {}

  const counts = { "‚ù§Ô∏è": 0 }
  Object.values(reactions).forEach((reaction) => {
    if (counts[reaction] !== undefined) {
      counts[reaction]++
    }
  })

  res.json({ reactions: counts, userReaction: reactions[req.query.userId] || null })
})

app.get("/api/photos", (req, res) => {
  const { eventId } = req.query

  let photos = photosData.filter((photo) => photo.status === "approved")

  if (eventId) {
    photos = photos.filter((p) => p.eventId === eventId)
  }

  // –°–æ—Ä—Ç—É—î–º–æ —Ñ–æ—Ç–æ –∑–∞ –¥–∞—Ç–æ—é - –Ω–æ–≤—ñ –∑–≤–µ—Ä—Ö—É
  photos.sort((a, b) => new Date(b.uploadedAt || 0) - new Date(a.uploadedAt || 0))

  const photosWithUnlockCount = photos.map((photo) => ({
    ...photo,
    unlockCount: photoUnlocks[photo.id] ? photoUnlocks[photo.id].length : 0,
  }))

  res.json(photosWithUnlockCount)
})

app.get("/api/photos/pending", (req, res) => {
  const pendingPhotos = photosData.filter((p) => p.status === "pending")
  res.json(pendingPhotos)
})

app.post("/api/photos/:id/moderate", async (req, res) => {
  try {
    const { action, description, eventId, albumId } = req.body // –î–æ–¥–∞–Ω–æ albumId
    const photo = photosData.find((p) => p.id === req.params.id)

    if (!photo) {
      return res.status(404).json({ error: "Photo not found" })
    }

    if (action === "approve") {
      photo.status = "approved"
      photo.approvedAt = new Date().toISOString()
      if (description !== undefined) photo.description = description
      if (eventId !== undefined) photo.eventId = eventId
      if (albumId !== undefined) photo.albumId = albumId
      
      console.log(`[v0] ‚úÖ –§–æ—Ç–æ ${photo.id} –æ–¥–æ–±—Ä–µ–Ω–æ, hasBlur: ${photo.hasBlur}`)
      
      res.json({ success: true, message: "–§–æ—Ç–æ —Å—Ö–≤–∞–ª–µ–Ω–æ", hasBlur: photo.hasBlur })
    } else if (action === "reject") {
      photo.status = "rejected"
      photo.rejectedAt = new Date().toISOString()
      res.json({ success: true, message: "–§–æ—Ç–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ" })
    }

    await saveData()
  } catch (error) {
    console.error("Error moderating photo:", error)
    res.status(500).json({ error: "Failed to moderate photo" })
  }
})

app.delete("/api/photos/:id", async (req, res) => {
  try {
    const photoIndex = photosData.findIndex((p) => p.id === req.params.id)
    if (photoIndex === -1) {
      return res.status(404).json({ error: "Photo not found" })
    }

    const photo = photosData[photoIndex]
    try {
      await fs.unlink(path.join(__dirname, "uploads/photos", photo.filename))
    } catch (error) {
      console.error("Error deleting photo file:", error)
    }

    photosData.splice(photoIndex, 1)
    await saveData()

    res.json({ success: true, message: "–§–æ—Ç–æ –≤–∏–¥–∞–ª–µ–Ω–æ" })
  } catch (error) {
    console.error("Error deleting photo:", error)
    res.status(500).json({ error: "Failed to delete photo" })
  }
})

app.post("/api/admin/login", (req, res) => {
  const { password } = req.body
  if (password === ADMIN_PASSWORD) {
    res.json({ success: true, token: "admin-authenticated" })
  } else {
    res.status(401).json({ error: "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å" })
  }
})

app.get("/api/admin/settings", (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }
  res.json(adminSettings)
})

app.get("/api/admin/bot-users-count", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const count = await getUserCount()
    res.json({ count })
  } catch (error) {
    console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error.message)
    res.json({ count: botUsers.length }) // Fallback –Ω–∞ JSON
  }
})

app.post("/api/admin/settings", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  adminSettings = { ...adminSettings, ...req.body }
  await saveAdminSettings()
  res.json({ success: true, settings: adminSettings })
})

app.post("/api/admin/broadcast", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  const uploadBroadcastPhotos = multer({
    storage: multer.memoryStorage(),
    limits: { fileSize: 10 * 1024 * 1024 },
  }).array("photos", 10)

  uploadBroadcastPhotos(req, res, async (err) => {
    if (err) {
      console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", err)
      return res.status(400).json({ error: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ" })
    }

    try {
      const message = req.body.message
      const photos = req.files || []

      console.log("[v0] üì¢ –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏")
      console.log("[v0] üìù –°–æ–æ–±—â–µ–Ω–∏–µ:", message)
      console.log("[v0] üñºÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ:", photos.length)

      if (!bot) {
        console.error("[v0] ‚ùå Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        console.error("[v0] üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        return res.status(400).json({
          error: "Telegram –±–æ—Ç –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è TELEGRAM_BOT_TOKEN",
        })
      }

      let users = []
      try {
        users = await getAllUsers()
        console.log("[v0] üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ SQLite:", users.length)
      } catch (error) {
        console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ SQLite, –∏—Å–ø–æ–ª—å–∑—É–µ–º JSON:", error.message)
        users = botUsers // Fallback –Ω–∞ JSON
        console.log("[v0] üë• –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON:", users.length)
      }

      if (users.length === 0) {
        console.error("[v0] ‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        console.error("[v0] üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å /start –±–æ—Ç—É")
        return res.status(400).json({
          error: "–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –ø–æ–≤–∏–Ω–Ω—ñ –Ω–∞–ø–∏—Å–∞—Ç–∏ /start –±–æ—Ç—É",
        })
      }

      if (!message && photos.length === 0) {
        console.error("[v0] ‚ùå –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return res.status(400).json({ error: "–î–æ–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –∞–±–æ —Ñ–æ—Ç–æ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏" })
      }

      let successCount = 0
      let errorCount = 0
      const errors = []

      for (const user of users) {
        try {
          console.log("[v0] üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", user.chatId, user.firstName)

          if (photos.length > 0) {
            if (photos.length === 1) {
              // –û–¥–Ω–æ —Ñ–æ—Ç–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
              console.log("[v0] üì∏ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é")
              await bot.sendPhoto(user.chatId, photos[0].buffer, {
                caption: message || "",
              })
            } else {
              // –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
              console.log("[v0] üñºÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –∏–∑", photos.length, "—Ñ–æ—Ç–æ")
              const mediaGroup = photos.map((photo, index) => ({
                type: "photo",
                media: photo.buffer,
                caption: index === 0 && message ? message : undefined,
              }))
              await bot.sendMediaGroup(user.chatId, mediaGroup)
            }
          } else if (message) {
            // –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            console.log("[v0] üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            await bot.sendMessage(user.chatId, message)
          }

          successCount++
          console.log("[v0] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram API
          await new Promise((resolve) => setTimeout(resolve, 100))
        } catch (error) {
          console.error(`[v0] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.chatId} (${user.firstName}):`, error.message)
          errorCount++
          errors.push({
            chatId: user.chatId,
            firstName: user.firstName,
            error: error.message,
          })
        }
      }

      console.log("[v0] üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏:")
      console.log("[v0]   - –£—Å–ø–µ—à–Ω–æ:", successCount)
      console.log("[v0]   - –û—à–∏–±–æ–∫:", errorCount)
      console.log("[v0]   - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", users.length)

      if (errors.length > 0) {
        console.log("[v0] üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:")
        errors.forEach((err) => {
          console.log(`[v0]   - ${err.firstName} (${err.chatId}): ${err.error}`)
        })
      }

      res.json({
        success: true,
        sent: successCount,
        failed: errorCount,
        total: users.length,
        message: `–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø—ñ—à–Ω–æ: ${successCount}, –ü–æ–º–∏–ª–æ–∫: ${errorCount}`,
      })
    } catch (error) {
      console.error("[v0] üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:", error)
      console.error("[v0] üìö Stack:", error.stack)
      res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏: " + error.message })
    }
  })
})

app.get("/api/admin/videos/pending", (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  const pendingVideos = videosData.filter((v) => v.status === "pending")
  res.json(pendingVideos)
})

app.get("/api/admin/events/pending", (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  const pendingEvents = eventsData.filter((e) => e.status === "pending")
  res.json(pendingEvents)
})

app.delete("/api/admin/events/:id", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const eventId = req.params.id
    const eventIndex = eventsData.findIndex((e) => e.id === eventId)

    if (eventIndex === -1) {
      return res.status(404).json({ error: "Event not found" })
    }

    eventsData.splice(eventIndex, 1)

    eventParticipants[eventId] = undefined
    delete eventParticipants[eventId]

    eventMessages[eventId] = undefined
    delete eventMessages[eventId]

    // –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫—É: photosData = photosData.filter((p) => p.eventId !== eventId)

    await saveData()

    res.json({ success: true, message: "–Ü–≤–µ–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ. –§–æ—Ç–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—å –≤ –≥–∞–ª–µ—Ä–µ—ó." })
  } catch (error) {
    console.error("Error deleting event:", error)
    res.status(500).json({ error: "Failed to delete event" })
  }
})

app.post("/api/admin/events/:id/moderate", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const { action } = req.body
    const event = eventsData.find((e) => e.id === req.params.id)

    if (!event) {
      return res.status(404).json({ error: "Event not found" })
    }

    if (action === "approve") {
      event.status = "approved"
      event.approvedAt = new Date().toISOString()
      res.json({ success: true, message: "–Ü–≤–µ–Ω—Ç —Å—Ö–≤–∞–ª–µ–Ω–æ" })
    } else if (action === "reject") {
      event.status = "rejected"
      event.rejectedAt = new Date().toISOString()
      res.json({ success: true, message: "–Ü–≤–µ–Ω—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ" })
    }

    await saveData()
  } catch (error) {
    console.error("Error moderating event:", error)
    res.status(500).json({ error: "Failed to moderate event" })
  }
})

app.get("/api/admin/events/all", (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  res.json(eventsData)
})

app.get("/api/admin/events/:id/participants", (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  const eventId = req.params.id
  const participants = eventParticipants[eventId] || []

  const participantsWithRestrictions = participants.map((p) => {
    const restrictionKey = `${eventId}_${p.userId}`
    return {
      ...p,
      restrictions: userRestrictions[restrictionKey] || null,
    }
  })

  res.json(participantsWithRestrictions)
})

app.post("/api/admin/events/:id/restrict-user", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const eventId = req.params.id
    const { userId, action, duration } = req.body
    const restrictionKey = `${eventId}_${userId}`

    if (action === "block") {
      userRestrictions[restrictionKey] = {
        blocked: true,
        blockedAt: new Date().toISOString(),
      }
    } else if (action === "mute") {
      const muteUntil = duration ? new Date(Date.now() + duration * 60 * 1000).toISOString() : null
      userRestrictions[restrictionKey] = {
        muted: true,
        mutedAt: new Date().toISOString(),
        muteUntil,
      }
    } else if (action === "unblock") {
      if (userRestrictions[restrictionKey]) {
        delete userRestrictions[restrictionKey].blocked
        delete userRestrictions[restrictionKey].blockedAt
        if (Object.keys(userRestrictions[restrictionKey]).length === 0) {
          delete userRestrictions[restrictionKey]
        }
      }
    } else if (action === "unmute") {
      if (userRestrictions[restrictionKey]) {
        delete userRestrictions[restrictionKey].muted
        delete userRestrictions[restrictionKey].mutedAt
        delete userRestrictions[restrictionKey].muteUntil
        if (Object.keys(userRestrictions[restrictionKey]).length === 0) {
          delete userRestrictions[restrictionKey]
        }
      }
    }

    await saveUserRestrictions()
    res.json({ success: true })
  } catch (error) {
    console.error("Error restricting user:", error)
    res.status(500).json({ error: "Failed to restrict user" })
  }
})

app.post(
  "/api/admin/upload-hero-images",
  uploadHeroImage.fields([
    { name: "news", maxCount: 1 },
    { name: "schedule", maxCount: 1 },
    { name: "video", maxCount: 1 },
    { name: "events", maxCount: 1 },
  ]),
  async (req, res) => {
    const { token } = req.query
    if (token !== "admin-authenticated") {
      return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
    }

    try {
      const blocks = ["news", "schedule", "video", "events"]

      if (!adminSettings.imagePositions) {
        adminSettings.imagePositions = {}
      }

      for (const block of blocks) {
        if (req.files && req.files[block]) {
          const file = req.files[block][0]
          adminSettings.heroImages[block] = `/uploads/hero-images/${file.filename}`
        } else if (req.body[`${block}_url`]) {
          adminSettings.heroImages[block] = req.body[`${block}_url`]
        }

        if (req.body[`${block}_position_x`] !== undefined && req.body[`${block}_position_y`] !== undefined) {
          const posX = Number.parseInt(req.body[`${block}_position_x`])
          const posY = Number.parseInt(req.body[`${block}_position_y`])
          adminSettings.imagePositions[block] = {
            x: Number.isNaN(posX) ? 50 : posX,
            y: Number.isNaN(posY) ? 50 : posY,
          }
        }
      }

      await saveAdminSettings()
      res.json({ success: true, images: adminSettings.heroImages, positions: adminSettings.imagePositions })
    } catch (error) {
      console.error("Error uploading hero images:", error)
      res.status(500).json({ error: "Failed to upload images" })
    }
  },
)

app.get("/api/settings/images", (req, res) => {
  res.json({
    images: adminSettings.heroImages,
    positions: adminSettings.imagePositions || {},
  })
})

async function parseExcelSchedule(filePath) {
  const workbook = new ExcelJS.Workbook()
  await workbook.xlsx.readFile(filePath)

  const worksheet = workbook.worksheets[0]
  const schedule = {
    monday: [],
    tuesday: [],
    wednesday: [],
    thursday: [],
    friday: [],
  }

  const dayMap = {
    1: "monday",
    2: "tuesday",
    3: "wednesday",
    4: "thursday",
    5: "friday",
  }

  worksheet.eachRow((row, rowNumber) => {
    if (rowNumber === 1) return

    const timeCell = row.getCell(1).value
    if (!timeCell) return

    const time = String(timeCell).trim()

    for (let col = 2; col <= 6; col++) {
      const cell = row.getCell(col)
      const cellValue = cell.value

      if (cellValue && String(cellValue).trim()) {
        const parts = String(cellValue)
          .split("/")
          .map((p) => p.trim())
        const subject = parts[0] || ""
        const teacher = parts[1] || ""
        const room = parts[2] || ""

        const dayKey = dayMap[col - 1]
        if (dayKey && subject) {
          schedule[dayKey].push({
            time,
            subject,
            teacher,
            room,
          })
        }
      }
    }
  })

  return schedule
}

app.post("/api/admin/upload-schedule", uploadSchedule.single("schedule"), async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    if (!req.file) {
      return res.status(400).json({ error: "–§–∞–π–ª –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ" })
    }

    const { name } = req.body
    if (!name) {
      return res.status(400).json({ error: "–ù–∞–∑–≤–∞ —Ä–æ–∑–∫–ª–∞–¥—É –æ–±–æ–≤'—è–∑–∫–æ–≤–∞" })
    }

    const schedule = await parseExcelSchedule(req.file.path)

    const newSchedule = {
      id: Date.now().toString(),
      name: name,
      schedule: schedule,
      uploadedAt: new Date().toISOString(),
      filePath: req.file.path,
    }

    schedulesData.push(newSchedule)
    await saveData()

    res.json({ success: true, schedule: newSchedule })
  } catch (error) {
    console.error("Error uploading schedule:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É: " + error.message })
  }
})

app.get("/api/admin/schedules", (req, res) => {
  const { token } = req.query

  if (token === "admin-authenticated") {
    res.json(schedulesData)
  } else if (token === "public" || !token) {
    const schedulesToReturn = schedulesData.filter((s) => !s.userId)
    res.json(schedulesToReturn)
  } else {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }
})

app.delete("/api/admin/schedules/:id", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const scheduleIndex = schedulesData.findIndex((s) => s.id === req.params.id)
    if (scheduleIndex === -1) {
      return res.status(404).json({ error: "–†–æ–∑–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" })
    }

    schedulesData.splice(scheduleIndex, 1)
    await saveData()

    res.json({ success: true })
  } catch (error) {
    console.error("Error deleting schedule:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è" })
  }
})

app.get("/api/schedules/user/:userId", (req, res) => {
  const userId = req.params.userId
  const userSchedule = schedulesData.find((s) => s.userId === userId)

  if (userSchedule) {
    res.json(userSchedule)
  } else {
    res.json(null)
  }
})

app.post("/api/schedules/user/:userId/set", async (req, res) => {
  try {
    const userId = req.params.userId
    const { scheduleId } = req.body

    const schedule = schedulesData.find((s) => s.id === scheduleId)
    if (!schedule) {
      return res.status(404).json({ error: "–†–æ–∑–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" })
    }

    const userScheduleIndex = schedulesData.findIndex((s) => s.userId === userId)
    if (userScheduleIndex !== -1) {
      schedulesData[userScheduleIndex] = { ...schedule, userId }
    } else {
      schedulesData.push({ ...schedule, userId, id: Date.now().toString() })
    }

    await saveData()
    res.json({ success: true, schedule: schedulesData.find((s) => s.userId === userId) })
  } catch (error) {
    console.error("Error setting user schedule:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É" })
  }
})

app.delete("/api/schedules/user/:userId", async (req, res) => {
  try {
    const userId = req.params.userId
    const userScheduleIndex = schedulesData.findIndex((s) => s.userId === userId)

    if (userScheduleIndex !== -1) {
      schedulesData.splice(userScheduleIndex, 1)
      await saveData()
    }

    res.json({ success: true })
  } catch (error) {
    console.error("Error removing user schedule:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É" })
  }
})

// –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app.post("/api/admin/clean-database", async (req, res) => {
  const { password, type } = req.body

  if (password !== ADMIN_PASSWORD) {
    return res.status(403).json({ error: "Invalid password" })
  }

  try {
    if (type === "events") {
      eventsData = []
      eventMessages = {}
      eventParticipants = {}
    } else if (type === "videos") {
      videosData = []
    } else if (type === "photos") {
      photosData = []
    } else if (type === "schedules") {
      schedulesData = []
    } else if (type === "all") {
      eventsData = []
      videosData = []
      photosData = []
      schedulesData = []
      eventMessages = {}
      eventParticipants = {}
      navigationPhotos = [] // –î–æ–¥–∞–Ω–æ –æ—á–∏—â–µ–Ω–Ω—è —Ñ–æ—Ç–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    }

    await saveData()
    res.json({ success: true, message: "Database cleaned successfully" })
  } catch (error) {
    console.error("Error cleaning database:", error)
    res.status(500).json({ error: "Failed to clean database" })
  }
})

app.post("/api/admin/events", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const { title, date, time, location, description, duration, creatorUsername } = req.body

    const newEvent = {
      id: Date.now().toString(),
      title,
      date,
      time,
      location,
      description,
      participants: 0,
      createdAt: new Date().toISOString(),
      expiresAt: new Date(Date.now() + (duration || 24) * 60 * 60 * 1000).toISOString(),
      joined: false,
      status: "approved", // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
      creatorUsername: creatorUsername || "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
    }

    eventsData.push(newEvent)
    eventMessages[newEvent.id] = []
    eventParticipants[newEvent.id] = []
    await saveData()

    res.json({ success: true, message: "–Ü–≤–µ–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ö–≤–∞–ª–µ–Ω–æ", event: newEvent })
  } catch (error) {
    console.error("Error creating event:", error)
    res.status(500).json({ error: "Failed to create event" })
  }
})

app.post("/api/events/:id/messages/photos", uploadPhoto.array("photos", 10), async (req, res) => {
  console.log("[v0] üì∏ ========== –í–Ü–î–ü–†–ê–í–ö–ê –ú–ù–û–ñ–ò–ù–ù–ò–• –§–û–¢–û –í –ß–ê–¢ ==========")

  try {
    const { message, userId, firstName, photoUrl } = req.body // –í–∏–¥–∞–ª–µ–Ω–æ eventId, –≤–æ–Ω–æ –±–µ—Ä–µ—Ç—å—Å—è –∑ params
    const photos = req.files
    const eventId = req.params.id // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ id –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –º–∞—Ä—à—Ä—É—Ç—É

    if (!photos || photos.length === 0) {
      return res.status(400).json({ error: "–§–æ—Ç–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ" })
    }

    if (photos.length > 10) {
      return res.status(400).json({ error: "–ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ" })
    }

    console.log("[v0] üì∑ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ:", photos.length)

    const restrictionKey = `${eventId}_${userId}`
    if (userRestrictions[restrictionKey]) {
      const restriction = userRestrictions[restrictionKey]
      if (restriction.blocked) {
        return res.status(403).json({ error: "–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –≤ —Ü—å–æ–º—É —ñ–≤–µ–Ω—Ç—ñ" })
      }
      if (restriction.muted && (!restriction.muteUntil || new Date(restriction.muteUntil) > new Date())) {
        return res.status(403).json({ error: "–í–∏ –≤ –º—É—Ç—ñ. –ù–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" })
      }
    }

    if (!eventMessages[eventId]) {
      eventMessages[eventId] = []
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–Ω–æ–∂–∏–Ω–Ω–∏–º–∏ —Ñ–æ—Ç–æ
    const photoPaths = photos.map((photo) => `/uploads/photos/${photo.filename}`)

    const newMessage = {
      id: Date.now().toString(),
      text: message || "",
      timestamp: new Date().toISOString(),
      sender: "user",
      userId,
      firstName,
      photoUrl,
      photos: photoPaths, // –ú–∞—Å–∏–≤ —à–ª—è—Ö—ñ–≤ –¥–æ —Ñ–æ—Ç–æ
    }

    eventMessages[eventId].push(newMessage)
    console.log("[v0] ‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ –¥–æ–¥–∞–Ω–æ")

    if (typingUsers[eventId] && typingUsers[eventId][userId]) {
      delete typingUsers[eventId][userId]
    }

    await saveData()
    console.log("[v0] üíæ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ")

    res.json(newMessage)
  } catch (error) {
    console.error("[v0] ‚ùå –ü–æ–º–∏–ª–∫–∞:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ" })
  }
})

const uploadNavigation = multer({
  storage: multer.diskStorage({
    destination: (req, file, cb) => {
      cb(null, "uploads/navigation/")
    },
    filename: (req, file, cb) => {
      const uniqueName = "nav-" + Date.now() + path.extname(file.originalname)
      cb(null, uniqueName)
    },
  }),
  limits: { fileSize: 10 * 1024 * 1024 },
})

// –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è —Ñ–æ—Ç–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
const navigationDir = path.join(__dirname, "uploads/navigation")
fs.mkdir(navigationDir, { recursive: true }).catch(console.error)

app.post("/api/navigation/upload", uploadNavigation.single("photo"), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: "–§–æ—Ç–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ" })
    }

    const { userId } = req.body

    const newPhoto = {
      id: Date.now().toString(),
      filename: req.file.filename,
      url: `/uploads/navigation/${req.file.filename}`,
      userId,
      uploadedAt: new Date().toISOString(),
    }

    navigationPhotos.push(newPhoto)
    await saveData()

    res.json({ success: true, photo: newPhoto })
  } catch (error) {
    console.error("Error uploading navigation photo:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ" })
  }
})

app.get("/api/navigation/photos", (req, res) => {
  res.json(navigationPhotos)
})

app.delete("/api/navigation/photos/:id", async (req, res) => {
  try {
    const photoIndex = navigationPhotos.findIndex((p) => p.id === req.params.id)

    if (photoIndex === -1) {
      return res.status(404).json({ error: "–§–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" })
    }

    const photo = navigationPhotos[photoIndex]

    // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª
    try {
      await fs.unlink(path.join(__dirname, "uploads/navigation", photo.filename))
    } catch (err) {
      console.error("Error deleting file:", err)
    }

    navigationPhotos.splice(photoIndex, 1)
    await saveData()

    res.json({ success: true })
  } catch (error) {
    console.error("Error deleting navigation photo:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ" })
  }
})

// ========== API –¥–ª—è Telegram Stars ==========

// –û—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.get("/api/stars/balance/:userId", (req, res) => {
  const { userId } = req.params
  const balance = userStarsBalances[userId] || 0
  res.json({ balance })
})

// –î–æ–¥–∞—Ç–∏ —Ä–µ–∞–∫—Ü—ñ—é –Ω–∞ —Ñ–æ—Ç–æ
app.post("/api/photos/:photoId/react", async (req, res) => {
  try {
    const { photoId } = req.params
    const { userId, reaction } = req.body

    if (!photoId || !userId || !reaction) {
      return res.status(400).json({ error: "Missing required fields" })
    }

    if (!photoReactions[photoId]) {
      photoReactions[photoId] = {}
    }

    photoReactions[photoId][userId] = reaction

    await saveData()
    res.json({ success: true })
  } catch (error) {
    console.error("Error adding reaction:", error)
    res.status(500).json({ error: "Failed to add reaction" })
  }
})

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∞–∫—Ü—ñ—ó –Ω–∞ —Ñ–æ—Ç–æ
app.get("/api/photos/:photoId/reactions", (req, res) => {
  const { photoId } = req.params
  const reactions = photoReactions[photoId] || {}

  const counts = { "‚ù§Ô∏è": 0 }
  Object.values(reactions).forEach((reaction) => {
    if (counts[reaction] !== undefined) {
      counts[reaction]++
    }
  })

  res.json({ reactions: counts, userReaction: reactions[req.query.userId] || null })
})

// –°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–≤–æ–π—Å –¥–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ
app.post("/api/photos/:photoId/createInvoice", async (req, res) => {
  try {
    const { photoId } = req.params
    const { userId } = req.body

    const photo = photosData.find((p) => p.id === photoId)
    if (!photo) {
      return res.status(404).json({ error: "Photo not found" })
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ
    if (photoUnlocks[photoId] && photoUnlocks[photoId].includes(String(userId))) {
      return res.json({ alreadyUnlocked: true })
    }

    if (!bot) {
      return res.status(500).json({ error: "Telegram bot not configured" })
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —ñ–Ω–≤–æ–π—Å, —â–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ Mini App
    const prices = [{ label: "XTR", amount: 1 }]
    const payload = JSON.stringify({ type: "photo_unlock", photoId, userId })
    const invoiceLink = await bot.createInvoiceLink(
      "–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–æ—Ç–æ",
      `–†–æ–∑–±–ª–æ–∫—É–π—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É`,
      payload,
      "",
      "XTR",
      prices,
    )

    res.json({ success: true, invoiceLink })
  } catch (error) {
    console.error("Error creating invoice:", error)
    res.status(500).json({ error: "Failed to create invoice" })
  }
})

// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —Ñ–æ—Ç–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ
app.get("/api/photos/:photoId/unlocked", (req, res) => {
  const { photoId } = req.params
  const { userId } = req.query

  const unlocked = photoUnlocks[photoId] && photoUnlocks[photoId].includes(String(userId))
  res.json({ unlocked })
})

// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª—ñ–º—ñ—Ç –±–ª—é—Ä-—Ñ–æ—Ç–æ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å
app.get("/api/photos/blur-limit/:userId", (req, res) => {
  const { userId } = req.params
  const weekStart = getWeekStart()
  const userWeekKey = `${userId}_${weekStart}`
  
  const limitReached = !!weeklyBlurPhotos[userWeekKey]
  res.json({ limitReached })
})

// –ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤—ñ–¥ –∑—ñ—Ä–æ–∫
app.post("/api/stars/withdraw", async (req, res) => {
  try {
    const { userId, amount } = req.body

    if (!userId || !amount) {
      return res.status(400).json({ error: "Missing required fields" })
    }

    const balance = userStarsBalances[userId] || 0

    if (amount < 50) {
      return res.status(400).json({ error: "–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤–∏–≤–æ–¥—É - 50 –∑—ñ—Ä–æ–∫" })
    }

    if (balance < amount) {
      return res.status(400).json({ error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑—ñ—Ä–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ" })
    }

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –¥–ª—è —Ä—É—á–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
    if (bot && botUsers.length > 0) {
      const adminUsers = botUsers.slice(0, 1)
      for (const admin of adminUsers) {
        await bot.sendMessage(
          admin.chatId,
          `üí∞ –ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤—ñ–¥ –∑—ñ—Ä–æ–∫:\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ID: ${userId}\n–°—É–º–∞: ${amount} ‚≠êÔ∏è\n–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${balance} ‚≠êÔ∏è`,
        )
      }
    }

    res.json({ success: true, message: "–ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤—ñ–¥ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É" })
  } catch (error) {
    console.error("Error processing withdrawal:", error)
    res.status(500).json({ error: "Failed to process withdrawal" })
  }
})

app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"))
})

app.get("/admin", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "admin.html"))
})

initializeData().then(() => {
  app.listen(PORT, "0.0.0.0", () => {
    console.log(`U-hub server running on port ${PORT}`)
    console.log(`Access the app at: http://0.0.0.0:${PORT}`)

    updateNewsCache()
    setInterval(updateNewsCache, 30 * 60 * 1000)
  })
})

module.exports = app
