require("dotenv").config()

const express = require("express")
const cors = require("cors")
const bodyParser = require("body-parser")
const multer = require("multer")
const path = require("path")
const fs = require("fs").promises
const ExcelJS = require("exceljs")
const newsParser = require("./parsers/newsParser")

// Helper to build compact callback_data (<=64 bytes)
function buildCallbackData(kind, id, action) {
  // kind: 'e' (event), 'v' (video), 'p' (photo)
  // action: 'ap' (approve), 'rj' (reject)
  try {
    return JSON.stringify({ t: kind, i: String(id), a: action })
  } catch (e) {
    // Fallback minimal string if JSON fails
    return `${kind}|${String(id)}|${action}`.slice(0, 64)
  }
}
const scheduleParser = require("./parsers/scheduleParser")
const TelegramBot = require("node-telegram-bot-api")
const { exec } = require("child_process")
const util = require("util")
const execPromise = util.promisify(exec)
const {
  saveUser,
  getAllUsers,
  getUserCount,
  migrateFromJSON,
  getAllEvents,
  getAllEventsWithStatus,
  getAllPendingEvents,
  getEventById,
  insertEvent,
  updateEventStatus,
  deleteEvent,
  incrementEventParticipants,
  decrementEventParticipants,
  getEventParticipants,
  checkUserJoinedEvent,
  insertEventParticipant,
  deleteEventParticipant,
  getEventMessages,
  insertEventMessage,
  getAllApprovedPhotos,
  getPhotoById,
  getPhotosByEvent,
  insertPhoto,
  updatePhoto,
  updatePhotoStatus,
  incrementPhotoUnlockCount,
  incrementPhotoPaidUnlocks,
  deletePhoto,
  getPhotoReactions,
  insertPhotoReaction,
  deletePhotoReaction,
  getPhotoUnlocks,
  checkPhotoUnlocked,
  insertPhotoUnlock,
  deletePhotoUnlock,
  getDailyPhotoUpload,
  updateDailyPhotoUpload,
  incrementDailyPhotoUpload,
  getWeeklyBlurPhoto,
  insertWeeklyBlurPhoto,
  deleteWeeklyBlurPhoto,
  getPhotoEarning,
  updatePhotoEarning,
  incrementPhotoEarning,
  getUserStarsBalance,
  updateUserStarsBalance,
  incrementUserStarsBalance,
  decrementUserStarsBalance,
  getAllBalances,
  getAllWithdrawalRequests,
  getPendingWithdrawalRequests,
  getWithdrawalRequestById,
  getUserWithdrawalRequests,
  insertWithdrawalRequest,
  updateWithdrawalRequestStatus,
  deleteWithdrawalRequest,
  getAllApprovedVideos,
  getAllPendingVideos,
  getVideoById,
  insertVideo,
  updateVideoStatus,
  deleteVideo,
  getAllSchedules,
  getScheduleById,
  insertSchedule,
  deleteSchedule,
  getAllNavigationPhotos,
  insertNavigationPhoto,
  deleteNavigationPhoto,
  getAllAdminSettings,
  updateAdminSetting,
  getEventUserRestriction,
  insertEventUserRestriction,
  deleteEventUserRestriction,
  getUserSchedule,
  insertUserSchedule,
  deleteUserSchedule,
} = require("./db")

const app = express()
const PORT = process.env.PORT || 5000

app.use(cors())
app.use(bodyParser.json({ limit: "200mb" }))
app.use(bodyParser.urlencoded({ extended: true, limit: "200mb" }))

// Disable caching for HTML, JS, and CSS files
app.use((req, res, next) => {
  if (req.url.match(/\.(html|js|css)$/)) {
    res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate")
    res.setHeader("Pragma", "no-cache")
    res.setHeader("Expires", "0")
  }
  next()
})

app.use(express.static("public"))
app.use("/uploads", express.static("uploads"))

const videoStorage = multer.diskStorage({
  destination: "./uploads/videos",
  filename: (req, file, cb) => {
    cb(null, Date.now() + "-" + file.originalname)
  },
})

const photoStorage = multer.diskStorage({
  destination: "./uploads/photos",
  filename: (req, file, cb) => {
    cb(null, Date.now() + "-" + file.originalname)
  },
})

const heroImageStorage = multer.diskStorage({
  destination: "./uploads/hero-images",
  filename: (req, file, cb) => {
    cb(null, "hero-" + Date.now() + "-" + file.originalname)
  },
})

const scheduleStorage = multer.diskStorage({
  destination: "./uploads/schedules",
  filename: (req, file, cb) => {
    cb(null, "schedule-" + Date.now() + "-" + file.originalname)
  },
})

const uploadVideo = multer({ storage: videoStorage, limits: { fileSize: 1024 * 1024 * 1024 } })
const uploadPhoto = multer({ storage: photoStorage, limits: { fileSize: 10 * 1024 * 1024 } })
const uploadHeroImage = multer({ storage: heroImageStorage, limits: { fileSize: 10 * 1024 * 1024 } })
const uploadSchedule = multer({ storage: scheduleStorage, limits: { fileSize: 5 * 1024 * 1024 } })

const uploadVideoWithThumbnail = multer({
  storage: videoStorage,
  limits: { fileSize: 1024 * 1024 * 1024 }, // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 200MB –¥–æ 1GB (1024 MB)
}).fields([
  { name: "video", maxCount: 1 },
  { name: "thumbnail", maxCount: 1 },
])

let newsCache = []

const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || "1234"

function getWeekStart() {
  const now = new Date()
  const dayOfWeek = now.getDay()
  const diff = dayOfWeek === 0 ? 6 : dayOfWeek - 1
  const monday = new Date(now)
  monday.setDate(now.getDate() - diff)
  monday.setHours(0, 0, 0, 0)
  return monday.toISOString().split('T')[0]
}

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || ""
const ADMIN_TELEGRAM_ID = process.env.ADMIN_TELEGRAM_ID || "5336123108"
function getAdminChatIds() {
  return [ADMIN_TELEGRAM_ID].filter(Boolean)
}
let bot = null

if (BOT_TOKEN) {
  try {
    bot = new TelegramBot(BOT_TOKEN, { polling: true })
    console.log("Telegram bot initialized")

    bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id
      const user = msg.from

      try {
        await saveUser(chatId, user.first_name, user.last_name, user.username)
        bot.sendMessage(chatId, "–í—ñ—Ç–∞—î–º–æ –≤ U-hub Bot! –¢—É—Ç –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–µ–æ —Ç–∞ –ø–æ–¥—ñ—ó.")
      } catch (error) {
        console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error.message)
        bot.sendMessage(chatId, "–í—ñ—Ç–∞—î–º–æ –≤ U-hub Bot! –¢—É—Ç –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–µ–æ —Ç–∞ –ø–æ–¥—ñ—ó.")
      }
    })

    bot.on("message", async (msg) => {
      if (msg.text && msg.text.startsWith("/")) return // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ

      const chatId = msg.chat.id
      const user = msg.from

      try {
        await saveUser(chatId, user.first_name, user.last_name, user.username)
      } catch (error) {
        console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏:", error.message)
      }
    })

    bot.on("pre_checkout_query", async (query) => {
      try {
        console.log("[v0] üí≥ –û—Ç—Ä–∏–º–∞–Ω–æ pre_checkout_query:", query)
        await bot.answerPreCheckoutQuery(query.id, true)
      } catch (error) {
        console.error("[v0] ‚ùå –ü–æ–º–∏–ª–∫–∞ pre_checkout_query:", error)
      }
    })

    bot.on("successful_payment", async (msg) => {
      try {
        console.log("[v0] ‚úÖ –£—Å–ø—ñ—à–Ω–∞ –æ–ø–ª–∞—Ç–∞:", msg.successful_payment)
        const payload = JSON.parse(msg.successful_payment.invoice_payload)
        const { type, photoId, userId } = payload

        if (type === "photo_unlock") {
          const photo = await getPhotoById(photoId)
          if (!photo) {
            console.error("[v0] ‚ùå –§–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:", photoId)
            return
          }

          // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ —Ñ–æ—Ç–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
          const alreadyUnlocked = await checkPhotoUnlocked(photoId, userId)
          if (!alreadyUnlocked) {
            await insertPhotoUnlock(photoId, userId)
          }

          const authorId = String(photo.user_id)
          
          // –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –∑—ñ—Ä–∫—É –∞–≤—Ç–æ—Ä—É
          await incrementUserStarsBalance(authorId, 1)

          // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ–≤ —Ñ–æ—Ç–æ
          await incrementPhotoUnlockCount(photoId)
          
          // Get updated photo to check unlock count
          const updatedPhoto = await getPhotoById(photoId)
          const unlockCount = updatedPhoto.unlock_count || 1

          // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É —Ñ–æ—Ç–æ –æ –∫–∞–∂–¥–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
          if (String(authorId) !== String(userId) && bot) {
            try {
              const balance = await getUserStarsBalance(authorId)
              await bot.sendMessage(
                authorId,
                `üì∏ –í–∞—à–µ —Ñ–æ—Ç–æ –≤—ñ–¥–∫—Ä–∏–ª–∏ –∑–∞ 1 ‚≠ê\n\n` +
                  `üí∞ –í–∞–º –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ 1 –∑—ñ—Ä–∫—É\n` +
                  `‚≠ê –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${balance || 1} –∑—ñ—Ä–æ–∫\n\n` +
                  `–í—Å—å–æ–≥–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ–≤ —Ü—å–æ–≥–æ —Ñ–æ—Ç–æ: ${unlockCount}`
              )
              console.log(`[v0] üì¨ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É ${authorId} –ø—Ä–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–æ—Ç–æ`)
            } catch (error) {
              console.error(`[v0] ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—É:`, error)
            }
          }

          if (unlockCount % 50 === 0) {
            const starsToTransfer = 50
            
            // –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–æ–Ω—É—Å 50 –∑—ñ—Ä–æ–∫
            await incrementUserStarsBalance(authorId, starsToTransfer)
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å
            const updatedBalance = await getUserStarsBalance(authorId)

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É –ø—Ä–æ –Ω–∞–≥–æ—Ä–æ–¥—É
            try {
              await bot.sendMessage(
                authorId,
                `üéâ –í—ñ—Ç–∞—î–º–æ! –í–∞—à–µ —Ñ–æ—Ç–æ –Ω–∞–±—Ä–∞–ª–æ ${unlockCount} –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ–≤!\n\n` +
                  `‚≠ê –í–∞–º –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ ${starsToTransfer} –∑—ñ—Ä–æ–∫ Telegram!\n` +
                  `üí∞ –í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${updatedBalance || 0} –∑—ñ—Ä–æ–∫\n\n` +
                  `–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —è–∫—ñ—Å–Ω—ñ —Ñ–æ—Ç–æ! üì∏`,
              )
              console.log(`[v0] üéÅ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É ${authorId} –ø—Ä–æ ${starsToTransfer} –∑—ñ—Ä–æ–∫`)
            } catch (error) {
              console.error(`[v0] ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É:`, error)
            }
          }

          await bot.sendMessage(userId, "‚úÖ –§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ!")
          console.log(`[v0] üîì –§–æ—Ç–æ ${photoId} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}`)
        }
      } catch (error) {
        console.error("[v0] ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ successful_payment:", error)
      }
    })

    bot.on("callback_query", async (query) => {
      const chatId = query.message.chat.id
      const user = query.from

      try {
        await saveUser(chatId, user.first_name, user.last_name, user.username)
      } catch (error) {
        console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ callback:", error.message)
      }

      let data
      try {
        data = JSON.parse(query.data)
      } catch (e) {
        // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ {t:'p',i:'id',a:'ap'}
        const parts = String(query.data).split("|")
        if (parts.length === 3) {
          data = { t: parts[0], i: parts[1], a: parts[2] }
        } else {
          data = {}
        }
      }

      const type = data.type || data.t
      const action = data.action || data.a
      const videoId = data.videoId || data.i
      const eventId = data.eventId || data.i
      const photoId = data.photoId || data.i

      if (type === "video_mod" || type === 'v') {
        try {
          const video = await getVideoById(videoId)
          if (video) {
            const timestamp = new Date().toISOString()
            if (action === "approve" || action === 'ap') {
              await updateVideoStatus(videoId, "approved", timestamp)
              bot.editMessageCaption(`‚úÖ –í—ñ–¥–µ–æ —Å—Ö–≤–∞–ª–µ–Ω–æ`, {
                chat_id: query.message.chat.id,
                message_id: query.message.message_id,
              })
            } else if (action === "reject" || action === 'rj') {
              await updateVideoStatus(videoId, "rejected", timestamp)
              bot.editMessageCaption(`‚ùå –í—ñ–¥–µ–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ`, {
                chat_id: query.message.chat.id,
                message_id: query.message.message_id,
              })
            }
          }
        } catch (error) {
          console.error("[v0] ‚ùå Error updating video status:", error.message)
        }
        bot.answerCallbackQuery(query.id)
      } else if (type === "event_mod" || type === 'e') {
        try {
          const event = await getEventById(eventId)
          if (event) {
            const timestamp = new Date().toISOString()
            if (action === "approve" || action === 'ap') {
              await updateEventStatus(eventId, "approved", timestamp)
              bot.editMessageText(`‚úÖ –Ü–≤–µ–Ω—Ç —Å—Ö–≤–∞–ª–µ–Ω–æ`, {
                chat_id: query.message.chat.id,
                message_id: query.message.message_id,
              })
            } else if (action === "reject" || action === 'rj') {
              await updateEventStatus(eventId, "rejected", timestamp)
              bot.editMessageText(`‚ùå –Ü–≤–µ–Ω—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ`, {
                chat_id: query.message.chat.id,
                message_id: query.message.message_id,
              })
            }
          }
        } catch (error) {
          console.error("[v0] ‚ùå Error updating event status:", error.message)
        }
        bot.answerCallbackQuery(query.id)
      } else if (type === "photo_mod" || type === 'p') {
        try {
          const photo = await getPhotoById(photoId)
          if (photo) {
            const timestamp = new Date().toISOString()
            if (action === "approve" || action === 'ap') {
              await updatePhotoStatus(photoId, "approved", timestamp)
              bot.editMessageCaption(`‚úÖ –§–æ—Ç–æ —Å—Ö–≤–∞–ª–µ–Ω–æ`, {
                chat_id: query.message.chat.id,
                message_id: query.message.message_id,
              })
            } else if (action === "reject" || action === 'rj') {
              await updatePhotoStatus(photoId, "rejected", timestamp)
              bot.editMessageCaption(`‚ùå –§–æ—Ç–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ`, {
                chat_id: query.message.chat.id,
                message_id: query.message.message_id,
              })
            }
          }
        } catch (error) {
          console.error("[v0] ‚ùå Error updating photo status:", error.message)
        }
        bot.answerCallbackQuery(query.id)
      }
    })
  } catch (error) {
    console.error("Error initializing Telegram bot:", error.message)
  }
}

// –°–∏—Å—Ç–µ–º–∞ Push —Å–ø–æ–≤—ñ—â–µ–Ω—å –∑–∞ 1 –≥–æ–¥–∏–Ω—É –¥–æ –ø–æ–¥—ñ—ó
const notifiedEvents = new Set()

function parseEventDateTime(eventDate, eventTime) {
  try {
    const [day, month, year] = eventDate.split(".")
    const [hours, minutes] = eventTime.split(":")
    return new Date(year, month - 1, day, hours, minutes)
  } catch (error) {
    console.error("Error parsing event date/time:", error)
    return null
  }
}

async function checkUpcomingEvents() {
  try {
    console.log("[v0] üîî –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è...")

    const now = new Date()
    const oneHourFromNow = new Date(now.getTime() + 60 * 60 * 1000)
    const fiveMinutesFromOneHour = new Date(now.getTime() + 55 * 60 * 1000)

    const allEvents = await getAllEvents()

    for (const event of allEvents) {
      if (notifiedEvents.has(event.id)) continue

      const eventDateTime = parseEventDateTime(event.date, event.time)

      if (eventDateTime >= fiveMinutesFromOneHour && eventDateTime <= oneHourFromNow) {
        console.log(`[v0] üîî –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è: ${event.title}`)

        const participants = await getEventParticipants(event.id)

        for (const participant of participants) {
          if (bot && participant.user_id) {
            try {
              await bot.sendMessage(
                participant.user_id,
                `üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!\n\n–ü–æ–¥—ñ—è "${event.title}" –ø–æ—á–Ω–µ—Ç—å—Å—è —á–µ—Ä–µ–∑ 1 –≥–æ–¥–∏–Ω—É!\n\nüìÖ ${event.date} –æ ${event.time}\nüìç ${event.location}`,
              )
              console.log(`[v0] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${participant.user_id}`)
            } catch (error) {
              console.error(`[v0] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${participant.user_id}:`, error.message)
            }
          }
        }

        notifiedEvents.add(event.id)
      }
    }
  } catch (error) {
    console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π:", error)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(checkUpcomingEvents, 5 * 60 * 1000)

async function updateNewsCache() {
  try {
    newsCache = await newsParser.getAllNews()
    console.log(`News cache updated: ${newsCache.length} articles`)
  } catch (error) {
    console.error("Error updating news cache:", error)
  }
}

app.get("/api/news", async (req, res) => {
  try {
    if (newsCache.length === 0) {
      await updateNewsCache()
    }
    res.json(newsCache)
  } catch (error) {
    console.error("Error fetching news:", error)
    res.status(500).json({ error: "Failed to fetch news" })
  }
})

app.get("/api/schedules/search", async (req, res) => {
  try {
    const { course, query } = req.query

    const results = await scheduleParser.searchSchedules(query, course)
    res.json(results)
  } catch (error) {
    console.error("Error searching schedules:", error)
    res.status(500).json({ error: "Failed to search schedules" })
  }
})

app.get("/api/events", async (req, res) => {
  try {
    const allEvents = await getAllEvents()
    const now = new Date()
    const cutoffTime = new Date(now.getTime() - 72 * 60 * 60 * 1000)

    const filteredEvents = allEvents
      .filter((e) => {
        if (e.expiresAt) {
          const expiresAt = new Date(e.expiresAt)
          if (expiresAt < cutoffTime) {
            return false
          }
        }
        return true
      })
      .sort((a, b) => new Date(b.created_at || b.createdAt) - new Date(a.created_at || a.createdAt))

    res.json(filteredEvents)
  } catch (error) {
    console.error("Error fetching events:", error)
    res.status(500).json({ error: "Failed to fetch events" })
  }
})

app.get("/api/events/:id", async (req, res) => {
  try {
    const event = await getEventById(req.params.id)
    if (event) {
      res.json(event)
    } else {
      res.status(404).json({ error: "Event not found" })
    }
  } catch (error) {
    console.error("Error fetching event:", error)
    res.status(500).json({ error: "Failed to fetch event" })
  }
})

app.post("/api/events", async (req, res) => {
  try {
    const { title, date, time, location, description, duration, creatorUsername } = req.body

    const newEvent = {
      id: Date.now().toString(),
      title,
      date,
      time,
      location,
      description,
      participantsCount: 0,
      createdAt: new Date().toISOString(),
      expiresAt: new Date(Date.now() + (duration || 24) * 60 * 60 * 1000).toISOString(),
      status: "pending",
      organizer: creatorUsername || "–ê–Ω–æ–Ω—ñ–º",
    }

    await insertEvent(newEvent)

    if (bot) {
      const adminUsers = getAdminChatIds()
      for (const adminChatId of adminUsers) {
        try {
          await bot.sendMessage(
            adminChatId,
            `üéâ –ù–æ–≤–∏–π —ñ–≤–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é:\n\nüìù –ù–∞–∑–≤–∞: ${newEvent.title}\nüìÖ –î–∞—Ç–∞: ${newEvent.date}\n‚è∞ –ß–∞—Å: ${newEvent.time}\nüìç –ú—ñ—Å—Ü–µ: ${newEvent.location}\nüë§ –ê–≤—Ç–æ—Ä: ${newEvent.organizer}\n\n–û–ø–∏—Å: ${newEvent.description}`,
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏",
                      callback_data: buildCallbackData('e', newEvent.id, 'ap'),
                    },
                    {
                      text: "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏",
                      callback_data: buildCallbackData('e', newEvent.id, 'rj'),
                    },
                  ],
                ],
              },
            },
          )
        } catch (error) {
          console.error("Error sending event notification to bot:", error.message)
        }
      }
    }

    res.json({ success: true, message: "–í–∞—à —ñ–≤–µ–Ω—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥.", event: newEvent })
  } catch (error) {
    console.error("Error creating event:", error)
    res.status(500).json({ error: "Failed to create event" })
  }
})

app.post("/api/events/:id/join", async (req, res) => {
  console.log("[v0] üéâ ========== –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–ï –ö –°–û–ë–´–¢–ò–Æ ==========")
  console.log("[v0] üìã Event ID:", req.params.id)
  console.log("[v0] üë§ User data:", req.body)

  try {
    const { userId, firstName, photoUrl } = req.body
    const eventId = req.params.id

    const event = await getEventById(eventId)

    if (event) {
      const alreadyJoined = await checkUserJoinedEvent(eventId, userId)

      if (!alreadyJoined) {
        const participant = {
          userId,
          firstName,
          photoUrl,
          joinedAt: new Date().toISOString(),
        }
        await insertEventParticipant(eventId, participant)
        console.log("[v0] ‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω")

        await incrementEventParticipants(eventId)

        const welcomeMessage = {
          userId: userId,
          firstName: firstName,
          message: "–ü—Ä–∏–≤—ñ—Çüëã",
          photoUrl: photoUrl,
          timestamp: new Date().toISOString(),
        }
        await insertEventMessage(eventId, welcomeMessage)
        console.log("[v0] üëã –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏")
      } else {
        console.log("[v0] ‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ")
      }

      const participants = await getEventParticipants(eventId)
      const participantCount = participants.length
      console.log("[v0] üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", participantCount)

      res.json({ success: true, participants: participantCount, joined: true })
      console.log("[v0] üéâ ========== –ö–û–ù–ï–¶ –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–Ø ==========")
    } else {
      console.error("[v0] ‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
      res.status(404).json({ error: "Event not found" })
    }
  } catch (error) {
    console.error("[v0] üí• –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", error)
    res.status(500).json({ error: "Failed to join event" })
  }
})

app.post("/api/events/:id/leave", async (req, res) => {
  try {
    const { userId } = req.body
    const eventId = req.params.id

    const event = await getEventById(eventId)

    if (event) {
      await deleteEventParticipant(eventId, userId)
      await decrementEventParticipants(eventId)

      const participants = await getEventParticipants(eventId)
      const participantCount = participants.length

      res.json({ success: true, participants: participantCount, joined: false })
    } else {
      res.status(404).json({ error: "Event not found" })
    }
  } catch (error) {
    console.error("Error leaving event:", error)
    res.status(500).json({ error: "Failed to leave event" })
  }
})

app.get("/api/events/:id/joined", async (req, res) => {
  console.log("[v0] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–±—ã—Ç–∏–∏:", req.params.id, "User:", req.query.userId)

  try {
    const { userId } = req.query
    const eventId = req.params.id

    const event = await getEventById(eventId)

    if (event) {
      const isJoined = await checkUserJoinedEvent(eventId, userId)
      const participants = await getEventParticipants(eventId)
      const participantCount = participants.length

      console.log("[v0] üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
      console.log("[v0]   - Joined:", isJoined)
      console.log("[v0]   - Participants:", participantCount)

      res.json({ joined: isJoined, participants: participantCount })
    } else {
      console.log("[v0] ‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
      res.json({ joined: false, participants: 0 })
    }
  } catch (error) {
    console.error("Error checking joined status:", error)
    res.status(500).json({ error: "Failed to check joined status" })
  }
})

const typingUsers = {} // { eventId: { userId: { firstName, timestamp } } }

app.post("/api/events/:id/messages", async (req, res) => {
  console.log("[v0] üí¨ ========== –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø ==========")
  console.log("[v0] üìã Event ID:", req.params.id)
  console.log("[v0] üìù Message:", req.body.message)
  console.log("[v0] üë§ User:", req.body.firstName)

  try {
    const { message, userId, firstName, photoUrl } = req.body
    const eventId = req.params.id

    const restrictionData = await getEventUserRestriction(eventId, userId)
    if (restrictionData) {
      const restriction = restrictionData.restriction
      if (restriction.blocked) {
        console.log("[v0] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        return res.status(403).json({ error: "–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –≤ —Ü—å–æ–º—É —ñ–≤–µ–Ω—Ç—ñ" })
      }
      if (restriction.muted && (!restriction.muteUntil || new Date(restriction.muteUntil) > new Date())) {
        console.log("[v0] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º—É—Ç–µ")
        return res.status(403).json({ error: "–í–∏ –≤ –º—É—Ç—ñ. –ù–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" })
      }
    }

    const newMessage = {
      userId,
      firstName,
      message,
      photoUrl,
      timestamp: new Date().toISOString(),
    }

    await insertEventMessage(eventId, newMessage)
    console.log("[v0] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

    if (typingUsers[eventId] && typingUsers[eventId][userId]) {
      delete typingUsers[eventId][userId]
    }

    console.log("[v0] üí¨ ========== –ö–û–ù–ï–¶ –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø ==========")
    res.json({
      id: Date.now().toString(),
      text: message,
      timestamp: newMessage.timestamp,
      sender: "user",
      userId,
      firstName,
      photoUrl,
    })
  } catch (error) {
    console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error)
    res.status(500).json({ error: "Failed to send message" })
  }
})

app.get("/api/events/:id/messages", async (req, res) => {
  try {
    const eventId = req.params.id
    console.log("[v0] üì® –ó–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–±—ã—Ç–∏—è:", eventId)

    const messages = await getEventMessages(eventId)
    console.log("[v0] üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π:", messages.length)

    const formattedMessages = messages.map(msg => ({
      id: msg.id?.toString(),
      text: msg.message,
      timestamp: msg.timestamp,
      sender: msg.user_id ? "user" : "system",
      userId: msg.user_id,
      firstName: msg.first_name,
      photoUrl: msg.photo_url,
    }))

    res.json(formattedMessages)
  } catch (error) {
    console.error("Error fetching messages:", error)
    res.status(500).json({ error: "Failed to fetch messages" })
  }
})

app.post("/api/events/:id/typing", (req, res) => {
  const eventId = req.params.id
  const { userId, firstName, isTyping } = req.body

  console.log("[v0] ‚å®Ô∏è Typing event:", { eventId, userId, firstName, isTyping })

  if (!typingUsers[eventId]) {
    typingUsers[eventId] = {}
    console.log("[v0] üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–±—ã—Ç–∏—è")
  }

  if (isTyping) {
    typingUsers[eventId][userId] = {
      firstName,
      timestamp: Date.now(),
    }
    console.log("[v0] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–µ—á–∞—Ç–∞—é—â–∏–µ:", firstName)
    console.log("[v0] üìä –í—Å–µ–≥–æ –ø–µ—á–∞—Ç–∞—é—â–∏—Ö:", Object.keys(typingUsers[eventId]).length)
  } else {
    delete typingUsers[eventId][userId]
    console.log("[v0] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –ø–µ—á–∞—Ç–∞—é—â–∏—Ö:", firstName)
  }

  res.json({ success: true })
})

app.get("/api/events/:id/typing", (req, res) => {
  const eventId = req.params.id
  const { userId } = req.query

  console.log("[v0] üëÄ –ó–∞–ø—Ä–æ—Å –ø–µ—á–∞—Ç–∞—é—â–∏—Ö –¥–ª—è —Å–æ–±—ã—Ç–∏—è:", eventId, "–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId)

  if (!typingUsers[eventId]) {
    console.log("[v0] ‚ö†Ô∏è –ù–µ—Ç –ø–µ—á–∞—Ç–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è")
    return res.json([])
  }

  // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (—Å—Ç–∞—Ä—à–µ 5 —Å–µ–∫—É–Ω–¥)
  const now = Date.now()
  let cleaned = 0
  Object.keys(typingUsers[eventId]).forEach((uid) => {
    if (now - typingUsers[eventId][uid].timestamp > 5000) {
      delete typingUsers[eventId][uid]
      cleaned++
    }
  })

  if (cleaned > 0) {
    console.log("[v0] üßπ –û—á–∏—â–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:", cleaned)
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—á–∞—Ç–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
  const typing = Object.entries(typingUsers[eventId])
    .filter(([uid]) => uid !== userId)
    .map(([uid, data]) => data.firstName)

  console.log("[v0] üìä –ü–µ—á–∞—Ç–∞—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ):", typing)

  res.json(typing)
})

app.get("/api/events/:eventId/participants/:userId", async (req, res) => {
  try {
    const { eventId, userId } = req.params

    const participants = await getEventParticipants(eventId)
    
    if (participants.length === 0) {
      return res.status(404).json({ error: "Event not found" })
    }

    const participant = participants.find((p) => String(p.user_id) === String(userId))

    if (!participant) {
      return res.status(404).json({ error: "Participant not found" })
    }

    res.json({
      userId: participant.user_id,
      firstName: participant.first_name,
      joinedAt: participant.joined_at,
    })
  } catch (error) {
    console.error("Error fetching participant:", error)
    res.status(500).json({ error: "Failed to fetch participant" })
  }
})

const thumbnailStorage = multer.diskStorage({
  destination: "./uploads/thumbnails",
  filename: (req, file, cb) => {
    cb(null, "thumb-" + Date.now() + ".jpg")
  },
})

app.post("/api/videos/upload", uploadVideoWithThumbnail, async (req, res) => {
  console.log("[v0] üé¨ ========== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ì–†–£–ó–ö–ò –í–ò–î–ï–û ==========")
  console.log("[v0] ‚è∞ –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:", new Date().toISOString())
  console.log("[v0] üåê IP –∫–ª–∏–µ–Ω—Ç–∞:", req.ip || req.connection.remoteAddress)
  console.log("[v0] üìã Headers:", JSON.stringify(req.headers, null, 2))

  try {
    console.log("[v0] üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ req.files...")
    console.log("[v0] üìä req.files:", req.files ? Object.keys(req.files) : "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    if (!req.files) {
      console.error("[v0] ‚ùå –û–®–ò–ë–ö–ê: req.files –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
      console.error("[v0] üìã req.body:", req.body)
      return res.status(400).json({ error: "–§–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (req.files –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)" })
    }

    console.log("[v0] üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ req.files:", JSON.stringify(Object.keys(req.files)))

    if (!req.files.video) {
      console.error("[v0] ‚ùå –û–®–ò–ë–ö–ê: –í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ req.files!")
      console.error("[v0] üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:", Object.keys(req.files))
      return res.status(400).json({ error: "–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω" })
    }

    const videoFile = req.files.video[0]
    console.log("[v0] ‚úÖ –í–∏–¥–µ–æ —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω:")
    console.log("[v0]   - –ò–º—è:", videoFile.originalname)
    console.log("[v0]   - –†–∞–∑–º–µ—Ä:", (videoFile.size / 1024 / 1024).toFixed(2), "MB")
    console.log("[v0]   - MIME —Ç–∏–ø:", videoFile.mimetype)
    console.log("[v0]   - –ü—É—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", videoFile.path)
    console.log("[v0]   - –ò–º—è —Ñ–∞–π–ª–∞:", videoFile.filename)

    const thumbnailFile = req.files.thumbnail ? req.files.thumbnail[0] : null

    let thumbnailPath = null

    if (thumbnailFile) {
      console.log("[v0] üñºÔ∏è –ü—Ä–µ–≤—å—é –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:")
      console.log("[v0]   - –†–∞–∑–º–µ—Ä:", (thumbnailFile.size / 1024).toFixed(2), "KB")
      console.log("[v0]   - MIME —Ç–∏–ø:", thumbnailFile.mimetype)
      console.log("[v0]   - –ü—É—Ç—å:", thumbnailFile.path)

      console.log("[v0] üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–≤—å—é...")
      const thumbnailFilename = "thumb-" + Date.now() + ".jpg"
      const thumbnailDestPath = path.join(__dirname, "uploads/thumbnails", thumbnailFilename)

      console.log("[v0] üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–µ–≤—å—é:", path.join(__dirname, "uploads/thumbnails"))
      await fs.mkdir(path.join(__dirname, "uploads/thumbnails"), { recursive: true })

      console.log("[v0] üîÑ –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –ø—Ä–µ–≤—å—é:")
      console.log("[v0]   - –ò–∑:", thumbnailFile.path)
      console.log("[v0]   - –í:", thumbnailDestPath)

      await fs.rename(thumbnailFile.path, thumbnailDestPath)
      thumbnailPath = `/uploads/thumbnails/${thumbnailFilename}`

      console.log("[v0] ‚úÖ –ü—Ä–µ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:", thumbnailPath)
    } else {
      console.log("[v0] ‚ö†Ô∏è –ü—Ä–µ–≤—å—é –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º")
      console.log("[v0] üé¨ –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–≤—å—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å –ø–æ–º–æ—â—å—é ffmpeg...")

      try {
        const thumbnailFilename = "thumb-" + Date.now() + ".jpg"
        const thumbnailDestPath = path.join(__dirname, "uploads/thumbnails", thumbnailFilename)

        console.log("[v0] üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–µ–≤—å—é:", path.join(__dirname, "uploads/thumbnails"))
        await fs.mkdir(path.join(__dirname, "uploads/thumbnails"), { recursive: true })

        const videoPath = path.join(__dirname, videoFile.path)
        console.log("[v0] üé• –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ:", videoPath)
        console.log("[v0] üñºÔ∏è –ü—É—Ç—å –¥–ª—è –ø—Ä–µ–≤—å—é:", thumbnailDestPath)

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞ –≤–∏–¥–µ–æ
        const ffmpegCommand = `ffmpeg -i "${videoPath}" -ss 00:00:00.500 -vframes 1 -vf "scale=640:-1" "${thumbnailDestPath}"`
        console.log("[v0] üîß –ö–æ–º–∞–Ω–¥–∞ ffmpeg:", ffmpegCommand)

        const { stdout, stderr } = await execPromise(ffmpegCommand)
        console.log("[v0] üì§ ffmpeg stdout:", stdout)
        if (stderr) console.log("[v0] üì§ ffmpeg stderr:", stderr)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
        try {
          await fs.access(thumbnailDestPath)
          thumbnailPath = `/uploads/thumbnails/${thumbnailFilename}`
          console.log("[v0] ‚úÖ –ü—Ä–µ–≤—å—é —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", thumbnailPath)
        } catch (accessError) {
          console.error("[v0] ‚ùå –§–∞–π–ª –ø—Ä–µ–≤—å—é –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
          thumbnailPath = null
        }
      } catch (ffmpegError) {
        console.error("[v0] ‚ùå –û–®–ò–ë–ö–ê –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é —Å ffmpeg:")
        console.error("[v0] üìõ –°–æ–æ–±—â–µ–Ω–∏–µ:", ffmpegError.message)
        console.error("[v0] üìö Stack:", ffmpegError.stack)
        console.log("[v0] ‚ö†Ô∏è –í–∏–¥–µ–æ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ë–ï–ó –ø—Ä–µ–≤—å—é")
        thumbnailPath = null
      }
    }

    console.log("[v0] üìù –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ...")
    
    const { userId, firstName, description } = req.body

    const videoData = {
      id: Date.now().toString(),
      filename: videoFile.filename,
      thumbnailFilename: thumbnailFile ? thumbnailFile.filename : null,
      url: `/uploads/videos/${videoFile.filename}`,
      thumbnailUrl: thumbnailPath,
      description: description || videoFile.originalname,
      userId: userId || null,
      firstName: firstName || null,
      uploadedAt: new Date().toISOString(),
      status: "pending",
    }

    console.log("[v0] üìä –î–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ:", JSON.stringify(videoData, null, 2))

    console.log("[v0] üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    try {
      await insertVideo(videoData)
      console.log("[v0] ‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    } catch (dbError) {
      console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ –≤ –ë–î:", dbError.message)
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    }

    if (bot) {
      console.log("[v0] ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –±–æ—Ç...")
      const adminUsers = getAdminChatIds()
      console.log("[v0] üë§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º:", adminUsers)

      for (const adminChatId of adminUsers) {
        try {
          console.log("[v0] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É:", adminChatId)
          await bot.sendMessage(
            adminChatId,
            `üé• –ù–æ–≤–µ –≤—ñ–¥–µ–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é:\n\nüìù –ù–∞–∑–≤–∞: ${videoData.description}\nüìÖ –î–∞—Ç–∞: ${new Date(videoData.uploadedAt).toLocaleString("uk-UA")}\nüíæ –†–æ–∑–º—ñ—Ä: ${(videoFile.size / 1024 / 1024).toFixed(2)} MB`,
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data: buildCallbackData('v', videoData.id, 'ap') },
                    { text: "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data: buildCallbackData('v', videoData.id, 'rj') },
                  ],
                ],
              },
            },
          )
          console.log("[v0] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        } catch (error) {
          console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error.message)
          console.error("[v0] üìö Stack:", error.stack)
        }
      }
    }

    console.log("[v0] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É...")
    const response = {
      success: true,
      message: "–í–∞—à–µ –≤—ñ–¥–µ–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥.",
      video: videoData,
    }
    console.log("[v0] üìã –û—Ç–≤–µ—Ç:", JSON.stringify(response, null, 2))

    res.json(response)
    console.log("[v0] ‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    console.log("[v0] üé¨ ========== –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ì–†–£–ó–ö–ò –í–ò–î–ï–û ==========")
  } catch (error) {
    console.error("[v0] üí• ========== –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ==========")
    console.error("[v0] üìõ –¢–∏–ø –æ—à–∏–±–∫–∏:", error.name)
    console.error("[v0] üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ:", error.message)
    console.error("[v0] üìö Stack trace:", error.stack)
    console.error("[v0] üìã req.files:", req.files)
    console.error("[v0] üìã req.body:", req.body)
    console.error("[v0] üí• ========================================")

    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ: " + error.message })
  }
})

app.get("/api/videos/pending", async (req, res) => {
  try {
    const pendingVideos = await getAllPendingVideos()
    res.json(pendingVideos)
  } catch (error) {
    console.error("Error fetching pending videos:", error)
    res.status(500).json({ error: "Failed to fetch pending videos" })
  }
})

app.get("/api/videos/approved", async (req, res) => {
  try {
    const approvedVideos = await getAllApprovedVideos()
    const sortedVideos = approvedVideos
      .sort((a, b) => new Date(b.approved_at) - new Date(a.approved_at))
      .slice(0, 3)
    res.json(sortedVideos)
  } catch (error) {
    console.error("Error fetching approved videos:", error)
    res.status(500).json({ error: "Failed to fetch approved videos" })
  }
})

app.post("/api/videos/:id/moderate", async (req, res) => {
  try {
    const { action } = req.body
    const video = await getVideoById(req.params.id)

    if (!video) {
      return res.status(404).json({ error: "Video not found" })
    }

    const timestamp = new Date().toISOString()
    if (action === "approve") {
      await updateVideoStatus(req.params.id, "approved", timestamp)
      res.json({ success: true, message: "–í—ñ–¥–µ–æ —Å—Ö–≤–∞–ª–µ–Ω–æ" })
    } else if (action === "reject") {
      await updateVideoStatus(req.params.id, "rejected", timestamp)
      res.json({ success: true, message: "–í—ñ–¥–µ–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ" })
    }
  } catch (error) {
    console.error("Error moderating video:", error)
    res.status(500).json({ error: "Failed to moderate video" })
  }
})

app.post("/api/photos/upload", uploadPhoto.single("photo"), async (req, res) => {
  console.log("[v0] üì∏ ========== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ì–†–£–ó–ö–ò –§–û–¢–û ==========")
  console.log("[v0] ‚è∞ –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:", new Date().toISOString())
  console.log("[v0] üìã req.body:", req.body)
  console.log("[v0] üìÅ req.file:", req.file)

  try {
    if (!req.file) {
      console.error("[v0] ‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
      return res.status(400).json({ error: "No photo uploaded" })
    }

    console.log("[v0] ‚úÖ –§–∞–π–ª —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω:")
    console.log("[v0]   - –ò–º—è:", req.file.originalname)
    console.log("[v0]   - –†–∞–∑–º–µ—Ä:", (req.file.size / 1024).toFixed(2), "KB")
    console.log("[v0]   - MIME —Ç–∏–ø:", req.file.mimetype)
    console.log("[v0]   - –ü—É—Ç—å:", req.file.path)

    const { eventId, description, userId, firstName, albumId, albumIndex, albumTotal, hasBlur } = req.body

    if (!eventId) {
      console.error("[v0] ‚ùå –û–®–ò–ë–ö–ê: Event ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!")
      return res.status(400).json({ error: "Event ID is required" })
    }

    const blurEnabled = hasBlur === "true" || hasBlur === true

    // Check weekly blur photo limit
    if (blurEnabled) {
      const weekStart = getWeekStart()
      const existingBlurPhoto = await getWeeklyBlurPhoto(userId, weekStart)

      if (existingBlurPhoto) {
        // Allow if it's the same album with blur from the same user
        if (albumId && existingBlurPhoto.album_id === albumId) {
          console.log("[v0] ‚úÖ –¶–µ —Ç–æ–π —Å–∞–º–∏–π –∞–ª—å–±–æ–º —ñ–∑ –±–ª—é—Ä–æ–º, –¥–æ–∑–≤–æ–ª—è—î–º–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏")
        } else {
          console.log("[v0] ‚ö†Ô∏è –õ—ñ–º—ñ—Ç –±–ª—é—Ä-—Ñ–æ—Ç–æ: –≤–∂–µ –±—É–ª–æ —Ñ–æ—Ç–æ –∑ –±–ª—é—Ä–æ–º —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è")
          return res.status(400).json({
            error: "–í–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –ª—ñ–º—ñ—Ç –±–ª—é—Ä-—Ñ–æ—Ç–æ –Ω–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å (1 —Ñ–æ—Ç–æ/–∞–ª—å–±–æ–º –∑ –±–ª—é—Ä–æ–º –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å)",
          })
        }
      } else {
        // Mark blur photo usage for this week
        await insertWeeklyBlurPhoto(userId, weekStart, albumId || null)
        console.log(`[v0] ‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –±–ª—é—Ä –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}, —Ç–∏–∂–¥–µ–Ω—å: ${weekStart}, –∞–ª—å–±–æ–º: ${albumId || 'single'}`)
      }
    }

    console.log("[v0] üìù –î–∞–Ω—ñ —Ñ–æ—Ç–æ:")
    console.log("[v0]   - Event ID:", eventId)
    console.log("[v0]   - Description:", description)
    console.log("[v0]   - User ID:", userId)
    console.log("[v0]   - First Name:", firstName)
    console.log("[v0]   - Album ID:", albumId)
    console.log("[v0]   - Album Index:", albumIndex)
    console.log("[v0]   - Album Total:", albumTotal)
    console.log("[v0]   - Has Blur:", blurEnabled)

    const photoId = Date.now().toString() + "-" + (albumIndex || "0")
    const newPhoto = {
      id: photoId,
      filename: req.file.filename,
      url: `/uploads/photos/${req.file.filename}`,
      event_id: eventId,
      description: description || "",
      user_id: userId,
      first_name: firstName || "–ê–Ω–æ–Ω—ñ–º",
      uploaded_at: new Date().toISOString(),
      status: "pending",
      album_id: albumId || null,
      album_index: albumIndex ? Number.parseInt(albumIndex) : null,
      album_total: albumTotal ? Number.parseInt(albumTotal) : null,
      unlock_count: 0,
      has_blur: blurEnabled ? 1 : 0,
      paid_unlocks: 0,
    }

    console.log("[v0] üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    await insertPhoto(newPhoto)
    console.log("[v0] ‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")

    // Increment daily photo upload count
    const today = new Date().toISOString().split('T')[0]
    await incrementDailyPhotoUpload(userId, today)
    console.log("[v0] ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫")

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ —Ñ–æ—Ç–æ –∞–ª—å–±–æ–º—É –∞–±–æ –æ–∫—Ä–µ–º–æ–≥–æ —Ñ–æ—Ç–æ
    if (bot && (!albumIndex || albumIndex === "0")) {
      console.log("[v0] ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram...")
      const adminUsers = getAdminChatIds()
      for (const adminChatId of adminUsers) {
        try {
          const event = await getEventById(eventId)
          const eventName = event ? event.title : "–ü–æ–¥—ñ—è"
          const photoCount = albumTotal ? ` (${albumTotal} —Ñ–æ—Ç–æ)` : ""
          console.log("[v0] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∞–¥–º—ñ–Ω—É:", adminChatId)

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –±–∞–∑–æ–≤—ã–π URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ Telegram (–ª–æ–∫–∞–ª—å–Ω—ã–π URL –Ω–µ –ø–æ–¥–æ–π–¥–µ—Ç)
          const baseUrlFromEnv = process.env.PUBLIC_BASE_URL || process.env.APP_BASE_URL || process.env.BASE_URL || null
          const requestBaseUrl = `${req.protocol}://${req.get("host")}`
          const publicBaseUrl = baseUrlFromEnv || (requestBaseUrl.startsWith("http://localhost") ? null : requestBaseUrl)

          if (!publicBaseUrl) {
            console.warn(
              "[v0] ‚ö†Ô∏è PUBLIC_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω –∏ —Ö–æ—Å—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å 'wrong HTTP URL specified'",
            )
          } else {
            await bot.sendPhoto(
              adminChatId,
              `${publicBaseUrl}${newPhoto.url}`,
              {
              caption: `üì∏ –ù–æ–≤–µ —Ñ–æ—Ç–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é${photoCount}:\n\nüéâ –Ü–≤–µ–Ω—Ç: ${eventName}\nüë§ –ê–≤—Ç–æ—Ä: ${newPhoto.first_name}\nüìù –û–ø–∏—Å: ${newPhoto.description || "–±–µ–∑ –æ–ø–∏—Å—É"}`,
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data: buildCallbackData('p', photoId, 'ap') },
                    { text: "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data: buildCallbackData('p', photoId, 'rj') },
                  ],
                ],
              },
              },
            )
            console.log("[v0] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (baseUrl=", publicBaseUrl, ")")
          }
        } catch (error) {
          console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error.message)
        }
      }
    }

    console.log("[v0] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É")
    
    // Convert response to camelCase for compatibility
    const photoResponse = {
      id: newPhoto.id,
      filename: newPhoto.filename,
      url: newPhoto.url,
      eventId: newPhoto.event_id,
      description: newPhoto.description,
      userId: newPhoto.user_id,
      firstName: newPhoto.first_name,
      uploadedAt: newPhoto.uploaded_at,
      status: newPhoto.status,
      albumId: newPhoto.album_id,
      albumIndex: newPhoto.album_index,
      albumTotal: newPhoto.album_total,
      unlockCount: newPhoto.unlock_count,
      hasBlur: newPhoto.has_blur === 1,
      paidUnlocks: newPhoto.paid_unlocks,
    }
    
    res.json({
      success: true,
      message: "–§–æ—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é",
      photo: photoResponse,
    })
    console.log("[v0] üì∏ ========== –ö–Ü–ù–ï–¶–¨ –û–ë–†–û–ë–ö–ò –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –§–û–¢–û ==========")
  } catch (error) {
    console.error("[v0] üí• ========== –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ==========")
    console.error("[v0] üìõ –¢–∏–ø –æ—à–∏–±–∫–∏:", error.name)
    console.error("[v0] üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ:", error.message)
    console.error("[v0] üìö Stack trace:", error.stack)
    console.error("[v0] üí• ========================================")
    res.status(500).json({ error: "Failed to upload photo" })
  }
})

app.get("/api/photos", async (req, res) => {
  try {
    const { eventId } = req.query

    let photos
    if (eventId) {
      photos = await getPhotosByEvent(eventId)
    } else {
      photos = await getAllApprovedPhotos()
    }

    // Convert snake_case to camelCase and sort by date (newest first)
    const photosWithCamelCase = photos
      .map((photo) => ({
        id: photo.id,
        filename: photo.filename,
        url: photo.url,
        eventId: photo.event_id,
        description: photo.description,
        userId: photo.user_id,
        firstName: photo.first_name,
        uploadedAt: photo.uploaded_at,
        status: photo.status,
        approvedAt: photo.approved_at,
        rejectedAt: photo.rejected_at,
        albumId: photo.album_id,
        albumIndex: photo.album_index,
        albumTotal: photo.album_total,
        unlockCount: photo.unlock_count || 0,
        hasBlur: photo.has_blur === 1,
        paidUnlocks: photo.paid_unlocks || 0,
      }))
      .sort((a, b) => new Date(b.uploadedAt || 0) - new Date(a.uploadedAt || 0))

    res.json(photosWithCamelCase)
  } catch (error) {
    console.error("[v0] ‚ùå Error fetching photos:", error)
    res.status(500).json({ error: "Failed to fetch photos" })
  }
})

app.get("/api/photos/pending", async (req, res) => {
  try {
    const allPhotos = await getAllApprovedPhotos()
    // getAllApprovedPhotos returns approved photos, we need to query for pending separately
    // For now, filter from all photos (we may need a dedicated function in db.js)
    const db = require("./db").db
    db.all(
      `SELECT * FROM photos WHERE status = 'pending' ORDER BY uploaded_at DESC`,
      [],
      (err, rows) => {
        if (err) {
          console.error("[v0] ‚ùå Error fetching pending photos:", err)
          return res.status(500).json({ error: "Failed to fetch pending photos" })
        }
        
        const photosWithCamelCase = rows.map((photo) => ({
          id: photo.id,
          filename: photo.filename,
          url: photo.url,
          eventId: photo.event_id,
          description: photo.description,
          userId: photo.user_id,
          firstName: photo.first_name,
          uploadedAt: photo.uploaded_at,
          status: photo.status,
          approvedAt: photo.approved_at,
          rejectedAt: photo.rejected_at,
          albumId: photo.album_id,
          albumIndex: photo.album_index,
          albumTotal: photo.album_total,
          unlockCount: photo.unlock_count || 0,
          hasBlur: photo.has_blur === 1,
          paidUnlocks: photo.paid_unlocks || 0,
        }))
        
        res.json(photosWithCamelCase)
      }
    )
  } catch (error) {
    console.error("[v0] ‚ùå Error fetching pending photos:", error)
    res.status(500).json({ error: "Failed to fetch pending photos" })
  }
})

app.post("/api/photos/:id/moderate", async (req, res) => {
  try {
    const { action, description, eventId, albumId } = req.body
    const photo = await getPhotoById(req.params.id)

    if (!photo) {
      return res.status(404).json({ error: "Photo not found" })
    }

    const timestamp = new Date().toISOString()

    if (action === "approve") {
      await updatePhotoStatus(req.params.id, "approved", timestamp)
      
      // Update additional fields if provided
      const updates = {}
      if (description !== undefined) updates.description = description
      if (eventId !== undefined) updates.event_id = eventId
      if (albumId !== undefined) updates.album_id = albumId
      
      if (Object.keys(updates).length > 0) {
        await updatePhoto(req.params.id, updates)
      }
      
      console.log(`[v0] ‚úÖ –§–æ—Ç–æ ${req.params.id} –æ–¥–æ–±—Ä–µ–Ω–æ, hasBlur: ${photo.has_blur}`)
      
      res.json({ success: true, message: "–§–æ—Ç–æ —Å—Ö–≤–∞–ª–µ–Ω–æ", hasBlur: photo.has_blur === 1 })
    } else if (action === "reject") {
      await updatePhotoStatus(req.params.id, "rejected", timestamp)
      res.json({ success: true, message: "–§–æ—Ç–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ" })
    }
  } catch (error) {
    console.error("Error moderating photo:", error)
    res.status(500).json({ error: "Failed to moderate photo" })
  }
})

app.delete("/api/photos/:id", async (req, res) => {
  try {
    const photo = await getPhotoById(req.params.id)
    if (!photo) {
      return res.status(404).json({ error: "Photo not found" })
    }

    // Delete the physical file
    try {
      await fs.unlink(path.join(__dirname, "uploads/photos", photo.filename))
    } catch (error) {
      console.error("Error deleting photo file:", error)
    }

    // Delete from database
    await deletePhoto(req.params.id)

    res.json({ success: true, message: "–§–æ—Ç–æ –≤–∏–¥–∞–ª–µ–Ω–æ" })
  } catch (error) {
    console.error("Error deleting photo:", error)
    res.status(500).json({ error: "Failed to delete photo" })
  }
})

app.post("/api/admin/login", (req, res) => {
  const { password } = req.body
  if (password === ADMIN_PASSWORD) {
    res.json({ success: true, token: "admin-authenticated" })
  } else {
    res.status(401).json({ error: "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å" })
  }
})

app.get("/api/admin/settings", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const dbSettings = await getAllAdminSettings()
    
    const settingsObj = dbSettings.reduce((acc, s) => {
      acc[s.key] = s.value
      return acc
    }, {})

    if (Object.keys(settingsObj).length === 0) {
      settingsObj.heroImages = {
        news: "https://placehold.co/600x300/a3e635/444?text=News",
        schedule: "https://placehold.co/600x300/60a5fa/FFF?text=Schedule",
        video: "https://placehold.co/600x300/f87171/FFF?text=Video",
        events: "https://placehold.co/600x300/c084fc/FFF?text=Events",
      }
      settingsObj.imagePositions = {
        news: { x: 50, y: 50 },
        schedule: { x: 50, y: 50 },
        video: { x: 50, y: 50 },
        events: { x: 50, y: 50 },
      }
    }

    res.json(settingsObj)
  } catch (error) {
    console.error("Error fetching admin settings:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å" })
  }
})

app.get("/api/admin/bot-users-count", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const count = await getUserCount()
    res.json({ count })
  } catch (error) {
    console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error.message)
    res.json({ count: botUsers.length }) // Fallback –Ω–∞ JSON
  }
})

app.post("/api/admin/settings", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    for (const [key, value] of Object.entries(req.body)) {
      await updateAdminSetting(key, value)
    }

    const dbSettings = await getAllAdminSettings()
    const settingsObj = dbSettings.reduce((acc, s) => {
      acc[s.key] = s.value
      return acc
    }, {})

    res.json({ success: true, settings: settingsObj })
  } catch (error) {
    console.error("Error updating admin settings:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å" })
  }
})

app.post("/api/admin/broadcast", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  const uploadBroadcastPhotos = multer({
    storage: multer.memoryStorage(),
    limits: { fileSize: 10 * 1024 * 1024 },
  }).array("photos", 10)

  uploadBroadcastPhotos(req, res, async (err) => {
    if (err) {
      console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", err)
      return res.status(400).json({ error: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ" })
    }

    try {
      const message = req.body.message
      const photos = req.files || []

      console.log("[v0] üì¢ –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏")
      console.log("[v0] üìù –°–æ–æ–±—â–µ–Ω–∏–µ:", message)
      console.log("[v0] üñºÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ:", photos.length)

      if (!bot) {
        console.error("[v0] ‚ùå Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        console.error("[v0] üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        return res.status(400).json({
          error: "Telegram –±–æ—Ç –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è TELEGRAM_BOT_TOKEN",
        })
      }

      let users = []
      try {
        users = await getAllUsers()
        console.log("[v0] üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ SQLite:", users.length)
      } catch (error) {
        console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ SQLite:", error.message)
        users = []
        console.log("[v0] ‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
      }

      if (users.length === 0) {
        console.error("[v0] ‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        console.error("[v0] üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å /start –±–æ—Ç—É")
        return res.status(400).json({
          error: "–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –ø–æ–≤–∏–Ω–Ω—ñ –Ω–∞–ø–∏—Å–∞—Ç–∏ /start –±–æ—Ç—É",
        })
      }

      if (!message && photos.length === 0) {
        console.error("[v0] ‚ùå –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return res.status(400).json({ error: "–î–æ–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –∞–±–æ —Ñ–æ—Ç–æ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏" })
      }

      let successCount = 0
      let errorCount = 0
      const errors = []

      for (const user of users) {
        try {
          console.log("[v0] üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", user.chatId, user.firstName)

          if (photos.length > 0) {
            if (photos.length === 1) {
              // –û–¥–Ω–æ —Ñ–æ—Ç–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
              console.log("[v0] üì∏ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é")
              await bot.sendPhoto(user.chatId, photos[0].buffer, {
                caption: message || "",
              })
            } else {
              // –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
              console.log("[v0] üñºÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –∏–∑", photos.length, "—Ñ–æ—Ç–æ")
              const mediaGroup = photos.map((photo, index) => ({
                type: "photo",
                media: photo.buffer,
                caption: index === 0 && message ? message : undefined,
              }))
              await bot.sendMediaGroup(user.chatId, mediaGroup)
            }
          } else if (message) {
            // –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            console.log("[v0] üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            await bot.sendMessage(user.chatId, message)
          }

          successCount++
          console.log("[v0] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram API
          await new Promise((resolve) => setTimeout(resolve, 100))
        } catch (error) {
          console.error(`[v0] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.chatId} (${user.firstName}):`, error.message)
          errorCount++
          errors.push({
            chatId: user.chatId,
            firstName: user.firstName,
            error: error.message,
          })
        }
      }

      console.log("[v0] üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏:")
      console.log("[v0]   - –£—Å–ø–µ—à–Ω–æ:", successCount)
      console.log("[v0]   - –û—à–∏–±–æ–∫:", errorCount)
      console.log("[v0]   - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", users.length)

      if (errors.length > 0) {
        console.log("[v0] üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:")
        errors.forEach((err) => {
          console.log(`[v0]   - ${err.firstName} (${err.chatId}): ${err.error}`)
        })
      }

      res.json({
        success: true,
        sent: successCount,
        failed: errorCount,
        total: users.length,
        message: `–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø—ñ—à–Ω–æ: ${successCount}, –ü–æ–º–∏–ª–æ–∫: ${errorCount}`,
      })
    } catch (error) {
      console.error("[v0] üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:", error)
      console.error("[v0] üìö Stack:", error.stack)
      res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏: " + error.message })
    }
  })
})

app.get("/api/admin/videos/pending", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const pendingVideos = await getAllPendingVideos()
    res.json(pendingVideos)
  } catch (error) {
    console.error("Error fetching admin pending videos:", error)
    res.status(500).json({ error: "Failed to fetch pending videos" })
  }
})

app.get("/api/admin/events/pending", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const pendingEvents = await getAllPendingEvents()
    res.json(pendingEvents)
  } catch (error) {
    console.error("Error fetching pending events:", error)
    res.status(500).json({ error: "Failed to fetch pending events" })
  }
})

app.delete("/api/admin/events/:id", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const eventId = req.params.id

    const event = await getEventById(eventId)
    if (!event) {
      return res.status(404).json({ error: "Event not found" })
    }

    await deleteEvent(eventId)

    res.json({ success: true, message: "–Ü–≤–µ–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ. –§–æ—Ç–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—å –≤ –≥–∞–ª–µ—Ä–µ—ó." })
  } catch (error) {
    console.error("Error deleting event:", error)
    res.status(500).json({ error: "Failed to delete event" })
  }
})

app.post("/api/admin/events/:id/moderate", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const { action } = req.body
    const eventId = req.params.id

    const event = await getEventById(eventId)

    if (!event) {
      return res.status(404).json({ error: "Event not found" })
    }

    const timestamp = new Date().toISOString()
    if (action === "approve") {
      await updateEventStatus(eventId, "approved", timestamp)
      res.json({ success: true, message: "–Ü–≤–µ–Ω—Ç —Å—Ö–≤–∞–ª–µ–Ω–æ" })
    } else if (action === "reject") {
      await updateEventStatus(eventId, "rejected", timestamp)
      res.json({ success: true, message: "–Ü–≤–µ–Ω—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ" })
    }
  } catch (error) {
    console.error("Error moderating event:", error)
    res.status(500).json({ error: "Failed to moderate event" })
  }
})

app.get("/api/admin/events/all", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const allEvents = await getAllEventsWithStatus()
    res.json(allEvents)
  } catch (error) {
    console.error("Error fetching all events:", error)
    res.status(500).json({ error: "Failed to fetch events" })
  }
})

app.get("/api/admin/events/:id/participants", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const eventId = req.params.id
    const participants = await getEventParticipants(eventId)

    const participantsWithRestrictions = await Promise.all(participants.map(async (p) => {
      const restrictionData = await getEventUserRestriction(eventId, p.user_id)
      return {
        userId: p.user_id,
        firstName: p.first_name,
        joinedAt: p.joined_at,
        restrictions: restrictionData ? restrictionData.restriction : null,
      }
    }))

    res.json(participantsWithRestrictions)
  } catch (error) {
    console.error("Error fetching participants:", error)
    res.status(500).json({ error: "Failed to fetch participants" })
  }
})

app.post("/api/admin/events/:id/restrict-user", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const eventId = req.params.id
    const { userId, action, duration } = req.body

    const existingRestrictionData = await getEventUserRestriction(eventId, userId)
    const existingRestriction = existingRestrictionData ? existingRestrictionData.restriction : {}

    if (action === "block") {
      await insertEventUserRestriction(eventId, userId, {
        ...existingRestriction,
        blocked: true,
        blockedAt: new Date().toISOString(),
      })
    } else if (action === "mute") {
      const muteUntil = duration ? new Date(Date.now() + duration * 60 * 1000).toISOString() : null
      await insertEventUserRestriction(eventId, userId, {
        ...existingRestriction,
        muted: true,
        mutedAt: new Date().toISOString(),
        muteUntil,
      })
    } else if (action === "unblock") {
      if (existingRestrictionData) {
        const { blocked, blockedAt, ...rest } = existingRestriction
        if (Object.keys(rest).length === 0) {
          await deleteEventUserRestriction(eventId, userId)
        } else {
          await insertEventUserRestriction(eventId, userId, rest)
        }
      }
    } else if (action === "unmute") {
      if (existingRestrictionData) {
        const { muted, mutedAt, muteUntil, ...rest } = existingRestriction
        if (Object.keys(rest).length === 0) {
          await deleteEventUserRestriction(eventId, userId)
        } else {
          await insertEventUserRestriction(eventId, userId, rest)
        }
      }
    }

    res.json({ success: true })
  } catch (error) {
    console.error("Error restricting user:", error)
    res.status(500).json({ error: "Failed to restrict user" })
  }
})

app.get("/api/admin/users", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const users = await getAllUsers()
    res.json(users)
  } catch (error) {
    console.error("Error fetching users:", error)
    res.status(500).json({ error: "Failed to fetch users" })
  }
})

app.get("/api/admin/balances", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const balances = await getAllBalances()
    res.json(balances)
  } catch (error) {
    console.error("Error fetching balances:", error)
    res.status(500).json({ error: "Failed to fetch balances" })
  }
})

app.get("/api/admin/photos/pending", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const db = require("./db").db
    db.all(
      `SELECT * FROM photos WHERE status = 'pending' ORDER BY uploaded_at DESC`,
      [],
      (err, rows) => {
        if (err) {
          console.error("[v0] ‚ùå Error fetching pending photos:", err)
          return res.status(500).json({ error: "Failed to fetch pending photos" })
        }
        
        const photosWithCamelCase = rows.map((photo) => ({
          id: photo.id,
          filename: photo.filename,
          url: photo.url,
          eventId: photo.event_id,
          description: photo.description,
          userId: photo.user_id,
          user_id: photo.user_id,
          firstName: photo.first_name,
          uploadedAt: photo.uploaded_at,
          createdAt: photo.uploaded_at,
          created_at: photo.uploaded_at,
          status: photo.status,
          approvedAt: photo.approved_at,
          rejectedAt: photo.rejected_at,
          albumId: photo.album_id,
          albumIndex: photo.album_index,
          albumTotal: photo.album_total,
          unlockCount: photo.unlock_count || 0,
          hasBlur: photo.has_blur === 1,
          paidUnlocks: photo.paid_unlocks || 0,
        }))
        
        res.json(photosWithCamelCase)
      }
    )
  } catch (error) {
    console.error("[v0] ‚ùå Error fetching pending photos:", error)
    res.status(500).json({ error: "Failed to fetch pending photos" })
  }
})

app.post("/api/admin/videos/:id/moderate", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const { action } = req.body
    const video = await getVideoById(req.params.id)

    if (!video) {
      return res.status(404).json({ error: "Video not found" })
    }

    const timestamp = new Date().toISOString()

    if (action === "approve") {
      await updateVideoStatus(req.params.id, "approved", timestamp)
      res.json({ success: true, message: "–í—ñ–¥–µ–æ —Å—Ö–≤–∞–ª–µ–Ω–æ" })
    } else if (action === "reject") {
      await updateVideoStatus(req.params.id, "rejected", timestamp)
      res.json({ success: true, message: "–í—ñ–¥–µ–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ" })
    }
  } catch (error) {
    console.error("Error moderating video:", error)
    res.status(500).json({ error: "Failed to moderate video" })
  }
})

app.post("/api/admin/photos/:id/moderate", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const { action } = req.body
    const photo = await getPhotoById(req.params.id)

    if (!photo) {
      return res.status(404).json({ error: "Photo not found" })
    }

    const timestamp = new Date().toISOString()

    if (action === "approve") {
      await updatePhotoStatus(req.params.id, "approved", timestamp)
      res.json({ success: true, message: "–§–æ—Ç–æ —Å—Ö–≤–∞–ª–µ–Ω–æ" })
    } else if (action === "reject") {
      await updatePhotoStatus(req.params.id, "rejected", timestamp)
      res.json({ success: true, message: "–§–æ—Ç–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ" })
    }
  } catch (error) {
    console.error("Error moderating photo:", error)
    res.status(500).json({ error: "Failed to moderate photo" })
  }
})

app.post("/api/admin/hero-image", uploadHeroImage.single("image"), async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const { block } = req.body
    
    if (!block || !["news", "schedule", "video", "events"].includes(block)) {
      return res.status(400).json({ error: "Invalid block name" })
    }

    const dbSettings = await getAllAdminSettings()
    const settingsObj = dbSettings.reduce((acc, s) => {
      acc[s.key] = s.value
      return acc
    }, {})

    let heroImages = settingsObj.heroImages || {
      news: "https://placehold.co/600x300/a3e635/444?text=News",
      schedule: "https://placehold.co/600x300/60a5fa/FFF?text=Schedule",
      video: "https://placehold.co/600x300/f87171/FFF?text=Video",
      events: "https://placehold.co/600x300/c084fc/FFF?text=Events",
    }

    if (req.file) {
      heroImages[block] = `/uploads/hero-images/${req.file.filename}`
    }

    await updateAdminSetting("heroImages", heroImages)

    res.json({ success: true, heroImages })
  } catch (error) {
    console.error("Error uploading hero image:", error)
    res.status(500).json({ error: "Failed to upload hero image" })
  }
})

app.post(
  "/api/admin/upload-hero-images",
  uploadHeroImage.fields([
    { name: "news", maxCount: 1 },
    { name: "schedule", maxCount: 1 },
    { name: "video", maxCount: 1 },
    { name: "events", maxCount: 1 },
  ]),
  async (req, res) => {
    const { token } = req.query
    if (token !== "admin-authenticated") {
      return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
    }

    try {
      const blocks = ["news", "schedule", "video", "events"]

      const dbSettings = await getAllAdminSettings()
      const settingsObj = dbSettings.reduce((acc, s) => {
        acc[s.key] = s.value
        return acc
      }, {})

      let heroImages = settingsObj.heroImages || {
        news: "https://placehold.co/600x300/a3e635/444?text=News",
        schedule: "https://placehold.co/600x300/60a5fa/FFF?text=Schedule",
        video: "https://placehold.co/600x300/f87171/FFF?text=Video",
        events: "https://placehold.co/600x300/c084fc/FFF?text=Events",
      }

      let imagePositions = settingsObj.imagePositions || {}

      for (const block of blocks) {
        if (req.files && req.files[block]) {
          const file = req.files[block][0]
          heroImages[block] = `/uploads/hero-images/${file.filename}`
        } else if (req.body[`${block}_url`]) {
          heroImages[block] = req.body[`${block}_url`]
        }

        if (req.body[`${block}_position_x`] !== undefined && req.body[`${block}_position_y`] !== undefined) {
          const posX = Number.parseInt(req.body[`${block}_position_x`])
          const posY = Number.parseInt(req.body[`${block}_position_y`])
          imagePositions[block] = {
            x: Number.isNaN(posX) ? 50 : posX,
            y: Number.isNaN(posY) ? 50 : posY,
          }
        }
      }

      await updateAdminSetting('heroImages', heroImages)
      await updateAdminSetting('imagePositions', imagePositions)

      res.json({ success: true, images: heroImages, positions: imagePositions })
    } catch (error) {
      console.error("Error uploading hero images:", error)
      res.status(500).json({ error: "Failed to upload images" })
    }
  },
)

app.get("/api/settings/images", async (req, res) => {
  try {
    const dbSettings = await getAllAdminSettings()
    const settingsObj = dbSettings.reduce((acc, s) => {
      acc[s.key] = s.value
      return acc
    }, {})

    res.json({
      images: settingsObj.heroImages || {
        news: "https://placehold.co/600x300/a3e635/444?text=News",
        schedule: "https://placehold.co/600x300/60a5fa/FFF?text=Schedule",
        video: "https://placehold.co/600x300/f87171/FFF?text=Video",
        events: "https://placehold.co/600x300/c084fc/FFF?text=Events",
      },
      positions: settingsObj.imagePositions || {},
    })
  } catch (error) {
    console.error("Error fetching settings images:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑–æ–±—Ä–∞–∂–µ–Ω—å" })
  }
})

async function parseExcelSchedule(filePath) {
  const workbook = new ExcelJS.Workbook()
  await workbook.xlsx.readFile(filePath)

  const worksheet = workbook.worksheets[0]
  const schedule = {
    monday: [],
    tuesday: [],
    wednesday: [],
    thursday: [],
    friday: [],
  }

  const dayMap = {
    1: "monday",
    2: "tuesday",
    3: "wednesday",
    4: "thursday",
    5: "friday",
  }

  worksheet.eachRow((row, rowNumber) => {
    if (rowNumber === 1) return

    const timeCell = row.getCell(1).value
    if (!timeCell) return

    const time = String(timeCell).trim()

    for (let col = 2; col <= 6; col++) {
      const cell = row.getCell(col)
      const cellValue = cell.value

      if (cellValue && String(cellValue).trim()) {
        const parts = String(cellValue)
          .split("/")
          .map((p) => p.trim())
        const subject = parts[0] || ""
        const teacher = parts[1] || ""
        const room = parts[2] || ""

        const dayKey = dayMap[col - 1]
        if (dayKey && subject) {
          schedule[dayKey].push({
            time,
            subject,
            teacher,
            room,
          })
        }
      }
    }
  })

  return schedule
}

app.post("/api/admin/upload-schedule", uploadSchedule.single("schedule"), async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    if (!req.file) {
      return res.status(400).json({ error: "–§–∞–π–ª –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ" })
    }

    const { name } = req.body
    if (!name) {
      return res.status(400).json({ error: "–ù–∞–∑–≤–∞ —Ä–æ–∑–∫–ª–∞–¥—É –æ–±–æ–≤'—è–∑–∫–æ–≤–∞" })
    }

    const schedule = await parseExcelSchedule(req.file.path)

    const newSchedule = {
      id: Date.now().toString(),
      name: name,
      scheduleData: schedule,
      createdAt: new Date().toISOString(),
    }

    await insertSchedule(newSchedule)

    res.json({ 
      success: true, 
      schedule: {
        id: newSchedule.id,
        name: newSchedule.name,
        schedule: schedule,
        uploadedAt: newSchedule.createdAt,
        filePath: req.file.path
      }
    })
  } catch (error) {
    console.error("Error uploading schedule:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É: " + error.message })
  }
})

app.get("/api/admin/schedules", async (req, res) => {
  const { token } = req.query

  try {
    const dbSchedules = await getAllSchedules()
    
    const schedulesData = dbSchedules.map(s => ({
      id: s.id,
      name: s.name,
      schedule: typeof s.schedule_data === 'string' ? JSON.parse(s.schedule_data) : s.schedule_data,
      uploadedAt: s.created_at
    }))

    if (token === "admin-authenticated") {
      res.json(schedulesData)
    } else if (token === "public" || !token) {
      const schedulesToReturn = schedulesData.filter((s) => !s.userId)
      res.json(schedulesToReturn)
    } else {
      return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
    }
  } catch (error) {
    console.error("Error fetching schedules:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—ñ–≤" })
  }
})

app.delete("/api/admin/schedules/:id", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const schedule = await getScheduleById(req.params.id)
    if (!schedule) {
      return res.status(404).json({ error: "–†–æ–∑–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" })
    }

    await deleteSchedule(req.params.id)

    res.json({ success: true })
  } catch (error) {
    console.error("Error deleting schedule:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è" })
  }
})

app.get("/api/schedules/user/:userId", async (req, res) => {
  try {
    const userId = req.params.userId
    const userScheduleData = await getUserSchedule(userId)

    if (userScheduleData) {
      const schedule = await getScheduleById(userScheduleData.schedule_id)
      if (schedule) {
        res.json({
          id: schedule.id,
          name: schedule.name,
          schedule: typeof schedule.schedule_data === 'string' ? JSON.parse(schedule.schedule_data) : schedule.schedule_data,
          uploadedAt: schedule.created_at,
          userId: userId
        })
      } else {
        res.json(null)
      }
    } else {
      res.json(null)
    }
  } catch (error) {
    console.error("Error fetching user schedule:", error)
    res.status(500).json({ error: "Failed to fetch user schedule" })
  }
})

app.post("/api/schedules/user/:userId/set", async (req, res) => {
  try {
    const userId = req.params.userId
    const { scheduleId } = req.body

    const schedule = await getScheduleById(scheduleId)
    if (!schedule) {
      return res.status(404).json({ error: "–†–æ–∑–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" })
    }

    await insertUserSchedule(userId, scheduleId)
    
    res.json({ 
      success: true, 
      schedule: {
        id: schedule.id,
        name: schedule.name,
        schedule: typeof schedule.schedule_data === 'string' ? JSON.parse(schedule.schedule_data) : schedule.schedule_data,
        uploadedAt: schedule.created_at,
        userId: userId
      }
    })
  } catch (error) {
    console.error("Error setting user schedule:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É" })
  }
})

app.delete("/api/schedules/user/:userId", async (req, res) => {
  try {
    const userId = req.params.userId
    await deleteUserSchedule(userId)
    res.json({ success: true })
  } catch (error) {
    console.error("Error removing user schedule:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É" })
  }
})

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å–µ–π—á–∞—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite)
app.post("/api/admin/clean-database", async (req, res) => {
  const { password, type } = req.body

  if (password !== ADMIN_PASSWORD) {
    return res.status(403).json({ error: "Invalid password" })
  }

  // –≠—Ç–æ—Ç endpoint –±–æ–ª—å—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite
  // –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SQL –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
  res.json({ 
    success: false, 
    message: "Database cleanup is disabled. Please use migration tools or SQL commands directly for database management." 
  })
})

app.post("/api/admin/events", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const { title, date, time, location, description, duration, creatorUsername } = req.body

    const newEvent = {
      id: Date.now().toString(),
      title,
      date,
      time,
      location,
      description,
      participantsCount: 0,
      createdAt: new Date().toISOString(),
      expiresAt: new Date(Date.now() + (duration || 24) * 60 * 60 * 1000).toISOString(),
      status: "approved",
      organizer: creatorUsername || "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
    }

    await insertEvent(newEvent)

    res.json({ success: true, message: "–Ü–≤–µ–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ö–≤–∞–ª–µ–Ω–æ", event: newEvent })
  } catch (error) {
    console.error("Error creating event:", error)
    res.status(500).json({ error: "Failed to create event" })
  }
})

app.post("/api/events/:id/messages/photos", uploadPhoto.array("photos", 10), async (req, res) => {
  console.log("[v0] üì∏ ========== –í–Ü–î–ü–†–ê–í–ö–ê –ú–ù–û–ñ–ò–ù–ù–ò–• –§–û–¢–û –í –ß–ê–¢ ==========")

  try {
    const { message, userId, firstName, photoUrl } = req.body
    const photos = req.files
    const eventId = req.params.id

    if (!photos || photos.length === 0) {
      return res.status(400).json({ error: "–§–æ—Ç–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ" })
    }

    if (photos.length > 10) {
      return res.status(400).json({ error: "–ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ" })
    }

    console.log("[v0] üì∑ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ:", photos.length)

    const restrictionData = await getEventUserRestriction(eventId, userId)
    if (restrictionData) {
      const restriction = restrictionData.restriction
      if (restriction.blocked) {
        return res.status(403).json({ error: "–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –≤ —Ü—å–æ–º—É —ñ–≤–µ–Ω—Ç—ñ" })
      }
      if (restriction.muted && (!restriction.muteUntil || new Date(restriction.muteUntil) > new Date())) {
        return res.status(403).json({ error: "–í–∏ –≤ –º—É—Ç—ñ. –ù–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" })
      }
    }

    const photoPaths = photos.map((photo) => `/uploads/photos/${photo.filename}`)

    const newMessageData = {
      userId,
      firstName,
      message: message || "",
      photoUrl,
      timestamp: new Date().toISOString(),
    }

    await insertEventMessage(eventId, newMessageData)
    console.log("[v0] ‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ –¥–æ–¥–∞–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

    if (typingUsers[eventId] && typingUsers[eventId][userId]) {
      delete typingUsers[eventId][userId]
    }

    const responseMessage = {
      id: Date.now().toString(),
      text: message || "",
      timestamp: newMessageData.timestamp,
      sender: "user",
      userId,
      firstName,
      photoUrl,
      photos: photoPaths,
    }

    res.json(responseMessage)
  } catch (error) {
    console.error("[v0] ‚ùå –ü–æ–º–∏–ª–∫–∞:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ" })
  }
})

const uploadNavigation = multer({
  storage: multer.diskStorage({
    destination: (req, file, cb) => {
      cb(null, "uploads/navigation/")
    },
    filename: (req, file, cb) => {
      const uniqueName = "nav-" + Date.now() + path.extname(file.originalname)
      cb(null, uniqueName)
    },
  }),
  limits: { fileSize: 10 * 1024 * 1024 },
})

// –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è —Ñ–æ—Ç–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
const navigationDir = path.join(__dirname, "uploads/navigation")
fs.mkdir(navigationDir, { recursive: true }).catch(console.error)

app.post("/api/navigation/upload", uploadNavigation.single("photo"), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: "–§–æ—Ç–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ" })
    }

    const { userId } = req.body

    const newPhoto = {
      filename: req.file.filename,
      url: `/uploads/navigation/${req.file.filename}`,
      uploadedAt: new Date().toISOString(),
    }

    const uploadsDir = path.join(__dirname, "uploads")
    await insertNavigationPhoto(newPhoto, uploadsDir)

    res.json({ 
      success: true, 
      photo: {
        id: Date.now().toString(),
        filename: newPhoto.filename,
        url: newPhoto.url,
        userId,
        uploadedAt: newPhoto.uploadedAt
      }
    })
  } catch (error) {
    console.error("Error uploading navigation photo:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ" })
  }
})

app.get("/api/navigation/photos", async (req, res) => {
  try {
    const dbPhotos = await getAllNavigationPhotos()
    
    const photos = dbPhotos.map(p => ({
      id: p.id.toString(),
      filename: p.filename,
      url: p.url,
      uploadedAt: p.uploaded_at
    }))
    
    res.json(photos)
  } catch (error) {
    console.error("Error fetching navigation photos:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó" })
  }
})

app.delete("/api/navigation/photos/:id", async (req, res) => {
  try {
    const dbPhotos = await getAllNavigationPhotos()
    const photo = dbPhotos.find((p) => p.id.toString() === req.params.id)

    if (!photo) {
      return res.status(404).json({ error: "–§–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" })
    }

    try {
      await fs.unlink(path.join(__dirname, "uploads/navigation", photo.filename))
    } catch (err) {
      console.error("Error deleting file:", err)
    }

    await deleteNavigationPhoto(photo.filename)

    res.json({ success: true })
  } catch (error) {
    console.error("Error deleting navigation photo:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ" })
  }
})

// ========== API –¥–ª—è Telegram Stars ==========

// Helper function to convert withdrawal DB row to API format (snake_case to camelCase)
function convertWithdrawalToApi(dbRow) {
  if (!dbRow) return null
  return {
    id: dbRow.id,
    userId: dbRow.user_id,
    username: dbRow.username,
    amount: dbRow.amount,
    balance: dbRow.balance,
    status: dbRow.status,
    createdAt: dbRow.created_at,
    processedAt: dbRow.processed_at,
    rejectionReason: dbRow.rejection_reason
  }
}

// –û—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.get("/api/stars/balance/:userId", async (req, res) => {
  try {
    const { userId } = req.params
    const balance = await getUserStarsBalance(userId)
    res.json({ balance })
  } catch (error) {
    console.error("Error fetching balance:", error)
    res.status(500).json({ error: "Failed to fetch balance" })
  }
})

// –î–æ–¥–∞—Ç–∏ –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ä–µ–∞–∫—Ü—ñ—é –Ω–∞ —Ñ–æ—Ç–æ (toggle)
app.post("/api/photos/:photoId/react", async (req, res) => {
  try {
    const { photoId } = req.params
    const { userId, reaction } = req.body

    if (!photoId || !userId || !reaction) {
      return res.status(400).json({ error: "Missing required fields" })
    }

    // Get current reactions for this photo
    const reactions = await getPhotoReactions(photoId)
    const userReaction = reactions.find(r => r.user_id === String(userId))

    // Toggle logic: if user already has this reaction, remove it
    if (userReaction && userReaction.reaction === reaction) {
      await deletePhotoReaction(photoId, userId)
      console.log(`[v0] ‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} –ø—Ä–∏–±—Ä–∞–≤ —Ä–µ–∞–∫—Ü—ñ—é ${reaction} –∑ —Ñ–æ—Ç–æ ${photoId}`)
    } else {
      // Add/update reaction (toggle on or change)
      await insertPhotoReaction(photoId, userId, reaction)
      console.log(`[v0] ‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} –ø–æ—Å—Ç–∞–≤–∏–≤ —Ä–µ–∞–∫—Ü—ñ—é ${reaction} –Ω–∞ —Ñ–æ—Ç–æ ${photoId}`)
    }

    res.json({ success: true })
  } catch (error) {
    console.error("Error toggling reaction:", error)
    res.status(500).json({ error: "Failed to toggle reaction" })
  }
})

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∞–∫—Ü—ñ—ó –Ω–∞ —Ñ–æ—Ç–æ
app.get("/api/photos/:photoId/reactions", async (req, res) => {
  try {
    const { photoId } = req.params
    const { userId } = req.query

    const reactions = await getPhotoReactions(photoId)

    // Aggregate counts
    const counts = { "‚ù§Ô∏è": 0 }
    reactions.forEach((r) => {
      if (counts[r.reaction] !== undefined) {
        counts[r.reaction]++
      }
    })

    // Find user's reaction
    const userReaction = userId 
      ? reactions.find(r => r.user_id === String(userId))?.reaction || null
      : null

    res.json({ reactions: counts, userReaction })
  } catch (error) {
    console.error("Error fetching reactions:", error)
    res.status(500).json({ error: "Failed to fetch reactions" })
  }
})

// –°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–≤–æ–π—Å –¥–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ
app.post("/api/photos/:photoId/createInvoice", async (req, res) => {
  try {
    const { photoId } = req.params
    const { userId } = req.body

    const photo = await getPhotoById(photoId)
    if (!photo) {
      return res.status(404).json({ error: "Photo not found" })
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ
    const alreadyUnlocked = await checkPhotoUnlocked(photoId, userId)
    if (alreadyUnlocked) {
      return res.json({ alreadyUnlocked: true })
    }

    if (!bot) {
      return res.status(500).json({ error: "Telegram bot not configured" })
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —ñ–Ω–≤–æ–π—Å, —â–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ Mini App
    const prices = [{ label: "XTR", amount: 1 }]
    const payload = JSON.stringify({ type: "photo_unlock", photoId, userId })
    const invoiceLink = await bot.createInvoiceLink(
      "–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–æ—Ç–æ",
      `–†–æ–∑–±–ª–æ–∫—É–π—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É`,
      payload,
      "",
      "XTR",
      prices,
    )

    res.json({ success: true, invoiceLink })
  } catch (error) {
    console.error("Error creating invoice:", error)
    res.status(500).json({ error: "Failed to create invoice" })
  }
})

// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —Ñ–æ—Ç–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ
app.get("/api/photos/:photoId/unlocked", async (req, res) => {
  try {
    const { photoId } = req.params
    const { userId } = req.query

    const unlocked = await checkPhotoUnlocked(photoId, userId)
    res.json({ unlocked })
  } catch (error) {
    console.error("[v0] ‚ùå Error checking photo unlock status:", error)
    res.status(500).json({ error: "Failed to check unlock status" })
  }
})

// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª—ñ–º—ñ—Ç –±–ª—é—Ä-—Ñ–æ—Ç–æ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å
app.get("/api/photos/blur-limit/:userId", async (req, res) => {
  try {
    const { userId } = req.params
    const weekStart = getWeekStart()
    
    const blurPhoto = await getWeeklyBlurPhoto(userId, weekStart)
    const limitReached = !!blurPhoto
    res.json({ limitReached })
  } catch (error) {
    console.error("[v0] ‚ùå Error checking blur limit:", error)
    res.status(500).json({ error: "Failed to check blur limit" })
  }
})

// –ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤—ñ–¥ –∑—ñ—Ä–æ–∫
app.post("/api/stars/withdraw", async (req, res) => {
  try {
    const { userId, amount, username } = req.body

    if (!userId || !amount) {
      return res.status(400).json({ error: "Missing required fields" })
    }

    const balance = await getUserStarsBalance(userId)

    if (amount < 50) {
      return res.status(400).json({ error: "–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤–∏–≤–æ–¥—É - 50 –∑—ñ—Ä–æ–∫" })
    }

    if (balance < amount) {
      return res.status(400).json({ error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑—ñ—Ä–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ" })
    }

    // Deduct Stars from balance IMMEDIATELY to prevent double withdrawal
    await decrementUserStarsBalance(userId, amount)

    // Create withdrawal request
    const requestId = `WR-${Date.now()}`
    const withdrawalRequest = {
      id: requestId,
      user_id: String(userId),
      username: username || 'unknown',
      amount: amount,
      balance: balance,
      status: 'pending',
      created_at: new Date().toISOString(),
      processed_at: null,
      rejection_reason: null
    }

    await insertWithdrawalRequest(withdrawalRequest)

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –¥–ª—è —Ä—É—á–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
    if (bot) {
      try {
        await bot.sendMessage(
          ADMIN_TELEGRAM_ID,
          `üí∞ –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤—ñ–¥ –∑—ñ—Ä–æ–∫:\n\n` +
          `ID –∑–∞–ø–∏—Ç—É: ${requestId}\n` +
          `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @${username || userId}\n` +
          `User ID: ${userId}\n` +
          `–°—É–º–∞: ${amount} ‚≠ê\n` +
          `–ë–∞–ª–∞–Ω—Å –¥–æ –≤–∏–≤–æ–¥—É: ${balance} ‚≠ê\n` +
          `–ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: ${balance - amount} ‚≠ê\n\n` +
          `–ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É`
        )
      } catch (error) {
        console.error("[v0] ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É:", error)
      }
    }

    res.json({ success: true, message: "–ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤—ñ–¥ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É" })
  } catch (error) {
    console.error("Error processing withdrawal:", error)
    res.status(500).json({ error: "Failed to process withdrawal" })
  }
})

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥ (–∞–¥–º–∏–Ω)
app.get("/api/admin/withdrawal-requests", async (req, res) => {
  try {
    const { token } = req.query
    if (token !== "admin-authenticated") {
      return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
    }

    const dbRequests = await getAllWithdrawalRequests()
    // Convert from snake_case to camelCase
    const requests = dbRequests.map(convertWithdrawalToApi)

    res.json(requests)
  } catch (error) {
    console.error("Error fetching withdrawal requests:", error)
    res.status(500).json({ error: "Failed to fetch withdrawal requests" })
  }
})

// –û–¥–æ–±—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ (–∞–¥–º–∏–Ω)
app.post("/api/admin/withdrawal-requests/:id/approve", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const { id } = req.params
    const dbRequest = await getWithdrawalRequestById(id)

    if (!dbRequest) {
      return res.status(404).json({ error: "–ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" })
    }

    if (dbRequest.status !== 'pending') {
      return res.status(400).json({ error: "–ó–∞–ø–∏—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ" })
    }

    // Update status to approved (Stars already deducted when request was created)
    const processedAt = new Date().toISOString()
    await updateWithdrawalRequestStatus(id, 'approved', processedAt, null)

    // Get current balance for notification
    const currentBalance = await getUserStarsBalance(dbRequest.user_id)

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (bot) {
      try {
        await bot.sendMessage(
          dbRequest.user_id,
          `‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤—ñ–¥ —Å—Ö–≤–∞–ª–µ–Ω–æ!\n\n` +
          `–°—É–º–∞: ${dbRequest.amount} ‚≠ê\n` +
          `–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance} ‚≠ê\n\n` +
          `–ó—ñ—Ä–∫–∏ –±—É–¥—É—Ç—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ñ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.`
        )
      } catch (error) {
        console.error("[v0] ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:", error)
      }
    }

    // Convert to API format for response
    const updatedRequest = await getWithdrawalRequestById(id)
    res.json({ success: true, request: convertWithdrawalToApi(updatedRequest) })
  } catch (error) {
    console.error("Error approving withdrawal:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É" })
  }
})

// –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ (–∞–¥–º–∏–Ω)
app.post("/api/admin/withdrawal-requests/:id/reject", async (req, res) => {
  const { token } = req.query
  if (token !== "admin-authenticated") {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" })
  }

  try {
    const { id } = req.params
    const { reason } = req.body
    const dbRequest = await getWithdrawalRequestById(id)

    if (!dbRequest) {
      return res.status(404).json({ error: "–ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" })
    }

    if (dbRequest.status !== 'pending') {
      return res.status(400).json({ error: "–ó–∞–ø–∏—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ" })
    }

    // Refund Stars back to user balance (they were deducted when request was created)
    await incrementUserStarsBalance(dbRequest.user_id, dbRequest.amount)

    // Update status to rejected
    const processedAt = new Date().toISOString()
    const rejectionReason = reason || '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞'
    await updateWithdrawalRequestStatus(id, 'rejected', processedAt, rejectionReason)

    // Get updated balance for notification
    const currentBalance = await getUserStarsBalance(dbRequest.user_id)

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (bot) {
      try {
        await bot.sendMessage(
          dbRequest.user_id,
          `‚ùå –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤—ñ–¥ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ\n\n` +
          `–°—É–º–∞: ${dbRequest.amount} ‚≠ê\n` +
          `–ü—Ä–∏—á–∏–Ω–∞: ${rejectionReason}\n\n` +
          `–ó—ñ—Ä–∫–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å: ${currentBalance} ‚≠ê`
        )
      } catch (error) {
        console.error("[v0] ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:", error)
      }
    }

    // Convert to API format for response
    const updatedRequest = await getWithdrawalRequestById(id)
    res.json({ success: true, request: convertWithdrawalToApi(updatedRequest) })
  } catch (error) {
    console.error("Error rejecting withdrawal:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É" })
  }
})

app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"))
})

app.get("/admin", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "admin.html"))
})

app.listen(PORT, "0.0.0.0", () => {
  console.log(`U-hub server running on port ${PORT}`)
  console.log(`Access the app at: http://0.0.0.0:${PORT}`)

  updateNewsCache()
  setInterval(updateNewsCache, 30 * 60 * 1000)
})

module.exports = app
