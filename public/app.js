const API_URL = window.location.origin
let currentEvent = null
let currentSchedule = null
let currentNews = null
let userSchedule = null
let telegramUser = null
const lucide = window.lucide // Declare the lucide variable

let chatUpdateInterval = null
let typingTimeout = null
const lastMessageId = null

let uhubChatUpdateInterval = null
let uhubTypingTimeout = null
const UHUB_CHAT_ID = "uhub-general-chat"

let allNewsCache = []
let currentCategory = "all"

if (window.Telegram && window.Telegram.WebApp) {
  const tg = window.Telegram.WebApp
  telegramUser = tg.initDataUnsafe?.user || null
}

if (!telegramUser) {
  const savedUser = localStorage.getItem("guestUser")
  if (savedUser) {
    telegramUser = JSON.parse(savedUser)
  } else {
    telegramUser = {
      id: Date.now(),
      first_name: "–ì—ñ—Å—Ç—å",
      photo_url: null,
    }
    localStorage.setItem("guestUser", JSON.stringify(telegramUser))
  }
}

function updateTime() {
  const now = new Date()
  const time = now.toLocaleTimeString("uk-UA", { hour: "2-digit", minute: "2-digit", second: "2-digit" })
  const date = now.toLocaleDateString("uk-UA", { day: "numeric", month: "long", year: "numeric" })

  document.querySelectorAll(".time").forEach((el) => (el.textContent = time))
  document.querySelectorAll(".date").forEach((el) => (el.textContent = date))
}

function goToPage(pageId, event) {
  if (event && event.stopPropagation) {
    event.stopPropagation()
  }

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
  if (pageId !== "page-event-chat" && chatUpdateInterval) {
    clearInterval(chatUpdateInterval)
    chatUpdateInterval = null
  }

  if (pageId !== "page-uhub-chat" && uhubChatUpdateInterval) {
    clearInterval(uhubChatUpdateInterval)
    uhubChatUpdateInterval = null
  }

  const targetPage = document.getElementById(pageId)
  if (!targetPage) {
    console.error("Page not found:", pageId)
    return
  }

  const currentPage = document.querySelector(".page.active")
  if (currentPage) {
    currentPage.classList.remove("active")
    void currentPage.offsetWidth
  }

  requestAnimationFrame(() => {
    requestAnimationFrame(() => {
      targetPage.classList.add("active")
      if (lucide) {
        lucide.createIcons()
      }
    })
  })

  if (pageId === "page-news-feed") {
    loadNews()
  } else if (pageId === "page-events-list") {
    loadEvents()
  } else if (pageId === "page-event-photos") {
    loadEventPhotos()
  } else if (pageId === "page-upload-photo") {
    loadUploadPhotoEvents()
  } else if (pageId === "page-event-chat") {
    loadChatMessages()
  } else if (pageId === "page-schedule-search") {
    loadAvailableSchedules()
  } else if (pageId === "page-schedule-list") {
    loadUserSchedule()
    updateScheduleDayCounts()
  } else if (pageId === "page-uhub-chat") {
    loadUhubChatMessages()
  }
}

function clearLegacySchedule() {
  // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏ localStorage
  const legacyKeys = ["userSchedule", "selectedSchedule", "scheduleData", "currentSchedule"]

  legacyKeys.forEach((key) => {
    localStorage.removeItem(key)
  })

  // –¢–∞–∫–∂–µ —Å–±—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
  userSchedule = null
  currentSchedule = null

  // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  document.getElementById("main-schedule-subtitle").style.display = "none"

  console.log("Legacy schedule data cleared")
}

function updateScheduleDayCounts() {
  if (!currentSchedule || !currentSchedule.schedule) return

  const days = ["monday", "tuesday", "wednesday", "thursday", "friday"]
  days.forEach((day) => {
    const count = currentSchedule.schedule[day] ? currentSchedule.schedule[day].length : 0
    const countElement = document.getElementById(`${day}-count`)
    if (countElement) {
      countElement.textContent = count === 0 ? "–Ω–µ–º–∞—î –ø–∞—Ä" : `${count} ${getPairsText(count)}`
    }
  })
}

function getPairsText(count) {
  if (count === 1) return "–ø–∞—Ä–∞"
  if (count >= 2 && count <= 4) return "–ø–∞—Ä–∏"
  return "–ø–∞—Ä"
}

function showModerationNotification(message) {
  // –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const existingNotifications = document.querySelectorAll(".moderation-notification")
  existingNotifications.forEach((notification) => notification.remove())

  const notification = document.createElement("div")
  notification.className = "moderation-notification"
  notification.textContent = message

  document.body.appendChild(notification)

  setTimeout(() => {
    notification.remove()
  }, 3000)
}

async function loadNews() {
  try {
    const response = await fetch(`${API_URL}/api/news`)
    const news = await response.json()

    allNewsCache = news.slice(0, 100)

    const newsListEl = document.getElementById("news-list")
    if (allNewsCache.length === 0) {
      newsListEl.innerHTML = '<div class="p-4 text-center text-gray-500">–ù–æ–≤–∏–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</div>'
      return
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    displayFilteredNews()

    if (news[0]) {
      document.getElementById("main-news-title").textContent = news[0].title
      document.getElementById("main-news-source").textContent = `"${news[0].source}" - ${news[0].timeAgo}`
      if (news[0].date) {
        document.getElementById("main-news-date").textContent = news[0].date
      }
    }
  } catch (error) {
    console.error("Error loading news:", error)
    document.getElementById("news-list").innerHTML =
      '<div class="p-4 text-center text-red-500">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω</div>'
  }
}

function viewNewsDetail(newsItem) {
  currentNews = newsItem
  document.getElementById("news-detail-source").textContent = newsItem.source
  document.getElementById("news-detail-time").textContent = newsItem.timeAgo
  document.getElementById("news-detail-title").textContent = newsItem.title
  document.getElementById("news-detail-content").textContent =
    newsItem.content || newsItem.description || "–ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É"

  if (newsItem.link) {
    document.getElementById("news-detail-link").href = newsItem.link
    document.getElementById("news-detail-link").style.display = "block"
  } else {
    document.getElementById("news-detail-link").style.display = "none"
  }

  if (newsItem.image) {
    document.getElementById("news-detail-image").src = newsItem.image
    document.getElementById("news-detail-image").style.display = "block"
  } else {
    document.getElementById("news-detail-image").style.display = "none"
  }

  goToPage("page-news-detail")
}

function shareNews() {
  if (currentNews && currentNews.link) {
    if (window.Telegram && window.Telegram.WebApp) {
      window.Telegram.WebApp.openTelegramLink(
        `https://t.me/share/url?url=${encodeURIComponent(currentNews.link)}&text=${encodeURIComponent(currentNews.title)}`,
      )
    } else {
      window.open(
        `https://t.me/share/url?url=${encodeURIComponent(currentNews.link)}&text=${encodeURIComponent(currentNews.title)}`,
        "_blank",
      )
    }
  }
}

function filterNewsByCategory(category) {
  document.querySelectorAll(".category-btn").forEach((btn) => {
    btn.classList.remove("active")
  })

  const clickedButton = document.querySelector(`.category-btn[data-category="${category}"]`)
  if (clickedButton) {
    clickedButton.classList.add("active")
  }

  currentCategory = category
  displayFilteredNews()
}

function getCategoryEmoji(category) {
  const emojiMap = {
    all: "–í—Å—ñ",
    kyiv: "üì∞",
    events: "üé≠",
    music: "üé∂",
    scholarships: "üéì",
    tech: "üíª",
    energy: "‚ö°",
    beauty: "üíÑ",
    knu: "üéì", // –ó–∞–º–µ–Ω–∏–ª–∏ crypto –Ω–∞ knu
  }
  return emojiMap[category] || ""
}

function displayFilteredNews() {
  const newsListEl = document.getElementById("news-list")

  let filteredNews = allNewsCache

  if (currentCategory !== "all") {
    filteredNews = allNewsCache.filter((item) => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ category, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ
      return item.category === currentCategory
    })
  }

  if (filteredNews.length === 0) {
    newsListEl.innerHTML = '<div class="p-4 text-center text-gray-500">–ù–æ–≤–∏–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó</div>'
    return
  }

  newsListEl.innerHTML = filteredNews
    .map(
      (item) => `
          <div class="p-4 cursor-pointer" onclick='viewNewsDetail(${JSON.stringify(item).replace(/'/g, "&apos;")})'>
              <p class="font-bold leading-tight">${item.title}</p>
              <p class="text-sm text-gray-500 mt-1">"${item.source}" - ${item.timeAgo}</p>
          </div>
      `,
    )
    .join("")
}

async function loadAvailableSchedules() {
  try {
    const response = await fetch(`${API_URL}/api/admin/schedules?token=public`)
    const schedules = await response.json()

    const container = document.getElementById("available-schedules")

    if (schedules.length === 0) {
      container.innerHTML = '<p class="text-center text-gray-500">–†–æ–∑–∫–ª–∞–¥–∏ —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ</p>'
      return
    }

    container.innerHTML = schedules
      .map(
        (schedule) => `
            <div class="bg-white rounded-lg p-4 shadow-sm cursor-pointer hover:shadow-md transition" onclick="selectUserSchedule('${schedule.id}', '${schedule.name}')">
                <p class="font-bold text-lg">${schedule.name}</p>
                <p class="text-sm text-gray-500 mt-1">–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –æ–±—Ä–∞—Ç–∏</p>
            </div>
        `,
      )
      .join("")
  } catch (error) {
    console.error("Error loading schedules:", error)
    document.getElementById("available-schedules").innerHTML =
      '<p class="text-center text-red-500">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</p>'
  }
}

async function selectUserSchedule(scheduleId, scheduleName) {
  try {
    const response = await fetch(`${API_URL}/api/schedules/user/${telegramUser.id}/set`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ scheduleId }),
    })

    if (response.ok) {
      const data = await response.json()
      userSchedule = data.schedule
      currentSchedule = data.schedule
      localStorage.setItem("userSchedule", JSON.stringify(data.schedule))

      document.getElementById("main-schedule-subtitle").textContent = `‚Ä¢ ${scheduleName}`
      document.getElementById("main-schedule-subtitle").style.display = "block"
      document.getElementById("schedule-list-title").textContent = scheduleName

      goToPage("page-schedule-list")
    }
  } catch (error) {
    console.error("Error selecting schedule:", error)
    alert("–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ä–æ–∑–∫–ª–∞–¥—É")
  }
}

async function loadUserSchedule() {
  try {
    const response = await fetch(`${API_URL}/api/schedules/user/${telegramUser.id}`)
    const data = await response.json()

    if (data) {
      userSchedule = data
      currentSchedule = data
      document.getElementById("schedule-remove-btn").classList.remove("hidden")

      document.getElementById("main-schedule-subtitle").textContent = `‚Ä¢ ${data.name}`
      document.getElementById("main-schedule-subtitle").style.display = "block"
    } else {
      document.getElementById("schedule-remove-btn").classList.add("hidden")
      document.getElementById("main-schedule-subtitle").style.display = "none"
    }
  } catch (error) {
    console.error("Error loading user schedule:", error)
  }
}

async function removeUserSchedule() {
  if (!confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤—ñ–π —Ä–æ–∑–∫–ª–∞–¥?")) return

  try {
    const response = await fetch(`${API_URL}/api/schedules/user/${telegramUser.id}`, {
      method: "DELETE",
    })

    if (response.ok) {
      userSchedule = null
      currentSchedule = null

      // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ localStorage
      clearLegacySchedule()

      document.getElementById("schedule-remove-btn").classList.add("hidden")
      document.getElementById("main-schedule-subtitle").style.display = "none"

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
      setTimeout(() => {
        goToPage("page-schedule-search")
      }, 500)
    }
  } catch (error) {
    console.error("Error removing schedule:", error)
    alert("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É")
  }
}

function viewScheduleDay(day) {
  const dayNames = {
    monday: "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫",
    tuesday: "–í—ñ–≤—Ç–æ—Ä–æ–∫",
    wednesday: "–°–µ—Ä–µ–¥–∞",
    thursday: "–ß–µ—Ç–≤–µ—Ä",
    friday: "–ü'—è—Ç–Ω–∏—Ü—è",
  }

  document.getElementById("schedule-detail-day").textContent = dayNames[day]

  if (currentSchedule && currentSchedule.schedule && currentSchedule.schedule[day]) {
    const classes = currentSchedule.schedule[day]
    document.getElementById("schedule-classes").innerHTML = classes
      .map(
        (cls) => `
            <div class="border-l-4 border-blue-500 pl-3">
                <div class="font-bold">${cls.time}</div>
                <div class="text-gray-700">${cls.subject}</div>
                <div class="text-sm text-gray-500">${cls.teacher || ""} ${cls.room ? "‚Ä¢ " + cls.room : ""}</div>
            </div>
        `,
      )
      .join("")
  } else {
    document.getElementById("schedule-classes").innerHTML = '<div class="text-gray-500 text-center">–ó–∞–Ω—è—Ç—å –Ω–µ–º–∞—î</div>'
  }

  goToPage("page-schedule-detail")
}

function handleScheduleClick() {
  if (userSchedule) {
    currentSchedule = userSchedule
    document.getElementById("schedule-list-title").textContent = userSchedule.name
    goToPage("page-schedule-list")
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    goToPage("page-schedule-search")
  }
}

function handleScheduleBottomClick() {
  console.log("[v0] üìÖ –ö–ª–∏–∫ –ø–æ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –±–ª–æ–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
  console.log("[v0] üìä userSchedule:", userSchedule)

  if (userSchedule) {
    // –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞)
    console.log("[v0] ‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    currentSchedule = userSchedule
    document.getElementById("schedule-list-title").textContent = userSchedule.name
    goToPage("page-schedule-list")
  } else {
    // –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É –≤—Å–µ—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
    console.log("[v0] ‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É")
    goToPage("page-schedule-search")
  }
}

async function loadEvents() {
  console.log("[v0] üìã ========== –ó–ê–ì–†–£–ó–ö–ê –°–û–ë–´–¢–ò–ô ==========")

  try {
    const response = await fetch(`${API_URL}/api/events?_t=${Date.now()}`)
    const events = await response.json()

    console.log("[v0] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π:", events.length)

    events.sort((a, b) => new Date(b.createdAt || 0) - new Date(a.createdAt || 0))

    const eventsContainer = document.getElementById("events-container")
    if (events.length === 0) {
      console.log("[v0] ‚ö†Ô∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π")
      eventsContainer.innerHTML = '<div class="text-center text-gray-500">–ü–æ–¥—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</div>'

      const mainEventsList = document.getElementById("main-events-list")
      if (mainEventsList) {
        mainEventsList.innerHTML = '<p class="text-gray-400">–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —ñ–≤–µ–Ω—Ç—ñ–≤</p>'
      }
      return
    }

    const eventsHTML = []
    const mainEventsHTML = []

    for (const event of events) {
      console.log(`[v0] üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${event.title}`)

      const isExpired = new Date(event.expiresAt) < new Date()

      const joinedResponse = await fetch(
        `${API_URL}/api/events/${event.id}/joined?userId=${telegramUser.id}&_t=${Date.now()}`,
      )
      const joinedData = await joinedResponse.json()
      const isJoined = joinedData.joined
      const actualParticipants = joinedData.participants

      console.log(`[v0]   - –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${actualParticipants}`)
      console.log(`[v0]   - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: ${isJoined}`)
      console.log(`[v0]   - –ò—Å—Ç–µ–∫–ª–æ: ${isExpired}`)

      const shortTitle = event.title.length > 15 ? event.title.substring(0, 12) + "‚Ä¶" : event.title

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≤–µ–Ω—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      if (!isExpired && mainEventsHTML.length < 3) {
        mainEventsHTML.push(shortTitle)
      }

      eventsHTML.push(`
                <div class="event-card ${isExpired ? "opacity-50" : ""}" id="event-card-${event.id}">
                    <h3 class="font-bold text-lg mb-2">${event.title}</h3>
                    <div class="flex items-center text-sm text-gray-600 mb-2">
                        <i data-lucide="calendar" class="w-4 h-4 mr-1"></i>
                        <span>${event.date}</span>
                        <i data-lucide="clock" class="w-4 h-4 ml-3 mr-1"></i>
                        <span>${event.time}</span>
                    </div>
                    <div class="flex items-center text-sm text-gray-600 mb-3">
                        <i data-lucide="map-pin" class="w-4 h-4 mr-1"></i>
                        <span>${event.location}</span>
                    </div>
                    <p class="text-gray-700 mb-3">${event.description}</p>
                    <div class="flex items-center justify-between text-sm mb-2">
                        <div class="flex items-center text-gray-500">
                            <i data-lucide="users" class="w-4 h-4 mr-1"></i>
                            <span id="event-participants-${event.id}">${actualParticipants} —É—á–∞—Å–Ω–∏–∫—ñ–≤</span>
                        </div>
                        <div class="flex items-center text-gray-500">
                            <i data-lucide="user" class="w-4 h-4 mr-1"></i>
                            <span class="text-xs">@${event.creatorUsername || "–ê–Ω–æ–Ω—ñ–º"}</span>
                        </div>
                    </div>
                    <div id="event-buttons-${event.id}">
                        ${
                          !isExpired
                            ? isJoined
                              ? `
                            <div class="flex gap-2">
                                <button class="flex-1 bg-blue-500 text-white font-semibold py-2 rounded-lg" onclick="openEventChat('${event.id}')">–ß–∞—Ç</button>
                                <button class="bg-red-500 text-white px-4 py-2 rounded-lg" onclick="leaveEventFromList('${event.id}')">
                                    <i data-lucide="log-out" class="w-5 h-5"></i>
                                </button>
                            </div>
                        `
                              : `
                            <button class="w-full bg-blue-500 text-white font-semibold py-2 rounded-lg" onclick="joinEventFromList('${event.id}')">–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è</button>
                        `
                            : '<div class="text-center text-gray-400 py-2 bg-gray-100 rounded-lg">–ü–æ–¥—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</div>'
                        }
                    </div>
                </div>
            `)
    }

    eventsContainer.innerHTML = eventsHTML.join("")

    const mainEventsList = document.getElementById("main-events-list")
    if (mainEventsList) {
      if (mainEventsHTML.length > 0) {
        mainEventsList.innerHTML = mainEventsHTML.map((title) => `<strong>‚Ä¢ ${title}</strong>`).join(" ")
      } else {
        mainEventsList.innerHTML = '<p class="text-gray-400">–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —ñ–≤–µ–Ω—Ç—ñ–≤</p>'
      }
    }

    if (lucide) {
      lucide.createIcons()
    }

    console.log("[v0] ‚úÖ –°–æ–±—ã—Ç–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã")
    console.log("[v0] üìã ========== –ö–û–ù–ï–¶ –ó–ê–ì–†–£–ó–ö–ò –°–û–ë–´–¢–ò–ô ==========")
  } catch (error) {
    console.error("[v0] üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:", error)
    document.getElementById("events-container").innerHTML =
      '<div class="text-center text-red-500">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–¥—ñ–π</div>'
  }
}

async function viewEventDetail(eventId) {
  try {
    const response = await fetch(`${API_URL}/api/events/${eventId}`)
    currentEvent = await response.json()

    const joinedResponse = await fetch(`${API_URL}/api/events/${eventId}/joined?userId=${telegramUser.id}`)
    const joinedData = await joinedResponse.json()

    document.getElementById("event-detail-title").textContent = currentEvent.title
    document.getElementById("event-detail-date").textContent = currentEvent.date
    document.getElementById("event-detail-time").textContent = currentEvent.time
    document.getElementById("event-detail-location").textContent = currentEvent.location
    document.getElementById("event-detail-description").textContent = currentEvent.description
    document.getElementById("event-detail-participants").textContent = joinedData.participants + " —É—á–∞—Å–Ω–∏–∫—ñ–≤"

    updateEventButtons(joinedData.joined)

    goToPage("page-event-detail")
    if (lucide) {
      // Check if lucide is declared before using it
      lucide.createIcons()
    }
  } catch (error) {
    console.error("Error loading event:", error)
  }
}

function updateEventButtons(isJoined) {
  const btnContainer = document.getElementById("event-detail-buttons")
  if (isJoined) {
    btnContainer.innerHTML = `
            <div class="flex gap-2">
                <button class="flex-1 bg-blue-500 text-white font-semibold py-3 rounded-lg" onclick="goToPage('page-event-chat')">–ß–∞—Ç</button>
                <button class="bg-red-500 text-white px-4 py-3 rounded-lg" onclick="leaveEvent()">
                    <i data-lucide="log-out" class="w-5 h-5"></i>
                </button>
            </div>
        `
  } else {
    btnContainer.innerHTML = `
            <button class="w-full bg-blue-500 text-white font-semibold py-3 rounded-lg" onclick="joinEvent()">–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è</button>
        `
  }
  if (lucide) {
    // Check if lucide is declared before using it
    lucide.createIcons()
  }
}

async function joinEvent() {
  if (!currentEvent) return

  try {
    const response = await fetch(`${API_URL}/api/events/${currentEvent.id}/join`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        userId: telegramUser.id,
        firstName: telegramUser.first_name,
        photoUrl: telegramUser.photo_url,
      }),
    })

    const data = await response.json()

    if (response.ok) {
      document.getElementById("event-detail-participants").textContent = data.participants + " —É—á–∞—Å–Ω–∏–∫—ñ–≤"
      updateEventButtons(true)
      document.getElementById("event-chat-title").textContent = `–ß–∞—Ç: ${currentEvent.title}`
    }
  } catch (error) {
    console.error("Error joining event:", error)
    alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –ø–æ–¥—ñ—ó")
  }
}

async function joinEventFromList(eventId) {
  console.log("[v0] üéâ ========== –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–ï –ö –°–û–ë–´–¢–ò–Æ ==========")
  console.log("[v0] üìã Event ID:", eventId)
  console.log("[v0] üë§ User ID:", telegramUser.id)

  try {
    const response = await fetch(`${API_URL}/api/events/${eventId}/join`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        userId: telegramUser.id,
        firstName: telegramUser.first_name,
        photoUrl: telegramUser.photo_url,
      }),
    })

    const data = await response.json()
    console.log("[v0] üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data)

    if (response.ok) {
      console.log("[v0] ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!")
      console.log("[v0] üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", data.participants)

      // –û–±–Ω–æ–≤–ª—è–µ–º UI
      const participantsEl = document.getElementById(`event-participants-${eventId}`)
      const buttonsEl = document.getElementById(`event-buttons-${eventId}`)

      if (participantsEl) {
        participantsEl.textContent = data.participants + " —É—á–∞—Å–Ω–∏–∫—ñ–≤"
        console.log("[v0] ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
      }

      if (buttonsEl) {
        buttonsEl.innerHTML = `
                    <div class="flex gap-2">
                        <button class="flex-1 bg-blue-500 text-white font-semibold py-2 rounded-lg" onclick="openEventChat('${eventId}')">–ß–∞—Ç</button>
                        <button class="bg-red-500 text-white px-4 py-2 rounded-lg" onclick="leaveEventFromList('${eventId}')">
                            <i data-lucide="log-out" class="w-5 h-5"></i>
                        </button>
                    </div>
                `
        if (lucide) {
          lucide.createIcons()
        }
        console.log("[v0] ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏")
      }

      console.log("[v0] üéâ ========== –ö–û–ù–ï–¶ –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–Ø ==========")
    } else {
      console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", data.error)
      alert(data.error || "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è")
    }
  } catch (error) {
    console.error("[v0] üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error)
    alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –ø–æ–¥—ñ—ó")
  }
}

async function leaveEventFromList(eventId) {
  console.log("[v0] üö™ –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ–±—ã—Ç–∏—è:", eventId)

  if (!confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–π—Ç–∏ –∑ —Ü—å–æ–≥–æ —ñ–≤–µ–Ω—Ç—É?")) {
    console.log("[v0] ‚ùå –í—ã—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    return
  }

  try {
    const response = await fetch(`${API_URL}/api/events/${eventId}/leave`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        userId: telegramUser.id,
      }),
    })

    const data = await response.json()
    console.log("[v0] üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data)

    if (response.ok) {
      console.log("[v0] ‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–æ–±—ã—Ç–∏—è")

      const participantsEl = document.getElementById(`event-participants-${eventId}`)
      const buttonsEl = document.getElementById(`event-buttons-${eventId}`)

      if (participantsEl) {
        participantsEl.textContent = data.participants + " —É—á–∞—Å–Ω–∏–∫—ñ–≤"
      }

      if (buttonsEl) {
        buttonsEl.innerHTML = `
                    <button class="w-full bg-blue-500 text-white font-semibold py-2 rounded-lg" onclick="joinEventFromList('${eventId}')">–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è</button>
                `
      }
    }
  } catch (error) {
    console.error("[v0] üí• –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error)
    alert("–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É –∑ –ø–æ–¥—ñ—ó")
  }
}

async function openEventChat(eventId) {
  console.log("[v0] üí¨ ========== –û–¢–ö–†–´–¢–ò–ï –ß–ê–¢–ê ==========")
  console.log("[v0] üìã Event ID:", eventId)

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    const response = await fetch(`${API_URL}/api/events/${eventId}`)
    currentEvent = await response.json()

    console.log("[v0] ‚úÖ –°–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:", currentEvent.title)

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    document.getElementById("event-chat-title").textContent = `–ß–∞—Ç: ${currentEvent.title}`
    console.log("[v0] ‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–∞—Ç–∞
    goToPage("page-event-chat")

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await loadChatMessages()

    if (chatUpdateInterval) {
      clearInterval(chatUpdateInterval)
    }
    chatUpdateInterval = setInterval(async () => {
      await loadChatMessages(true) // true = —Ç–∏—Ö–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–∫—Ä–æ–ª–ª–∞
      await updateTypingIndicator()
    }, 1000) // –ò–∑–º–µ–Ω–µ–Ω–æ —Å 2000 –Ω–∞ 1000 –º—Å

    console.log("[v0] üí¨ ========== –ß–ê–¢ –û–¢–ö–†–´–¢ ==========")
  } catch (error) {
    console.error("[v0] üí• –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞:", error)
    alert("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —á–∞—Ç—É")
  }
}

async function leaveEvent() {
  if (!currentEvent) return

  if (!confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–π—Ç–∏ –∑ —Ü—å–æ–≥–æ —ñ–≤–µ–Ω—Ç—É?")) return

  try {
    const response = await fetch(`${API_URL}/api/events/${currentEvent.id}/leave`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        userId: telegramUser.id,
      }),
    })

    const data = await response.json()

    if (response.ok) {
      document.getElementById("event-detail-participants").textContent = data.participants + " —É—á–∞—Å–Ω–∏–∫—ñ–≤"
      updateEventButtons(false)
    }
  } catch (error) {
    console.error("Error leaving event:", error)
    alert("–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É –∑ –ø–æ–¥—ñ—ó")
  }
}

async function createNewEvent(event) {
  const button = event.target
  const eventData = {
    title: document.getElementById("event-name").value,
    date: document.getElementById("event-date").value,
    time: document.getElementById("event-time").value,
    location: document.getElementById("event-location").value,
    description: document.getElementById("event-description").value,
    duration: Number.parseInt(document.getElementById("event-duration").value) || 24,
    creatorUsername: telegramUser.username || telegramUser.first_name || "–ê–Ω–æ–Ω—ñ–º",
  }

  if (!eventData.title || !eventData.date || !eventData.time || !eventData.location) {
    alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è")
    return
  }

  button.classList.add("onclic")
  button.disabled = true

  try {
    const response = await fetch(`${API_URL}/api/events`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(eventData),
    })

    const data = await response.json()

    if (response.ok) {
      button.classList.remove("onclic")
      button.classList.add("validate")

      showModerationNotification("–Ü–≤–µ–Ω—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!")

      setTimeout(() => {
        button.classList.remove("validate")
        button.disabled = false
        goToPage("page-events-list")
      }, 2000)
    } else {
      button.classList.remove("onclic", "validate")
      button.disabled = false
      alert(data.error || data.message || "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    }
  } catch (error) {
    button.classList.remove("onclic", "validate")
    button.disabled = false
    console.error("Error creating event:", error)
    alert("–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
  }
}

async function loadChatMessages(silent = false) {
  if (!currentEvent) {
    console.error("[v0] ‚ùå currentEvent –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    return
  }

  if (!silent) {
    console.log("[v0] üí¨ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è:", currentEvent.title)
  }

  try {
    const response = await fetch(`${API_URL}/api/events/${currentEvent.id}/messages`)
    const messages = await response.json()

    if (!silent) {
      console.log("[v0] üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:", messages.length)
    }

    const chatMessages = document.getElementById("chat-messages")

    if (silent && messages.length > 0) {
      const existingMessages = chatMessages.querySelectorAll("[data-message-id]")
      const existingIds = Array.from(existingMessages).map((el) => el.getAttribute("data-message-id"))

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const newMessages = messages.filter((msg) => {
        const msgId = `${msg.userId}-${msg.timestamp}`
        return !existingIds.includes(msgId)
      })

      if (newMessages.length > 0) {
        const wasAtBottom = chatMessages.scrollHeight - chatMessages.scrollTop <= chatMessages.clientHeight + 50

        newMessages.forEach((msg) => {
          const isOwn = msg.userId === telegramUser.id
          const avatar =
            msg.photoUrl ||
            `https://ui-avatars.com/api/?name=${encodeURIComponent(msg.firstName || "U")}&background=random`
          const msgId = `${msg.userId}-${msg.timestamp}`

          const messageDiv = document.createElement("div")
          messageDiv.className = `flex ${isOwn ? "justify-end" : "justify-start"} mb-3 chat-message-new`
          messageDiv.setAttribute("data-message-id", msgId)
          messageDiv.innerHTML = `
            ${!isOwn ? `<img src="${avatar}" class="w-8 h-8 rounded-full mr-2 cursor-pointer" alt="${msg.firstName}" onclick="showUserProfile('${msg.userId}', '${currentEvent.id}')">` : ""}
            <div class="${isOwn ? "chat-message own" : "chat-message"}">
              ${!isOwn ? `<div class="text-xs font-semibold mb-1">${msg.firstName}</div>` : ""}
              <div>${msg.text}</div>
            </div>
            ${isOwn ? `<img src="${avatar}" class="w-8 h-8 rounded-full ml-2 cursor-pointer" alt="${msg.firstName}" onclick="showUserProfile('${msg.userId}', '${currentEvent.id}')">` : ""}
          `

          chatMessages.appendChild(messageDiv)
        })

        if (wasAtBottom) {
          chatMessages.scrollTop = chatMessages.scrollHeight
        }
      }
    } else {
      chatMessages.innerHTML = messages
        .map((msg) => {
          const isOwn = msg.userId === telegramUser.id
          const avatar =
            msg.photoUrl ||
            `https://ui-avatars.com/api/?name=${encodeURIComponent(msg.firstName || "U")}&background=random`
          const msgId = `${msg.userId}-${msg.timestamp}`

          return `
            <div class="flex ${isOwn ? "justify-end" : "justify-start"} mb-3" data-message-id="${msgId}">
              ${!isOwn ? `<img src="${avatar}" class="w-8 h-8 rounded-full mr-2 cursor-pointer" alt="${msg.firstName}" onclick="showUserProfile('${msg.userId}', '${currentEvent.id}')">` : ""}
              <div class="${isOwn ? "chat-message own" : "chat-message"}">
                ${!isOwn ? `<div class="text-xs font-semibold mb-1">${msg.firstName}</div>` : ""}
                <div>${msg.text}</div>
              </div>
              ${isOwn ? `<img src="${avatar}" class="w-8 h-8 rounded-full ml-2 cursor-pointer" alt="${msg.firstName}" onclick="showUserProfile('${msg.userId}', '${currentEvent.id}')">` : ""}
            </div>
          `
        })
        .join("")

      if (messages.length === 0) {
        chatMessages.innerHTML =
          '<div class="text-center text-gray-500">–ß–∞—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π. –ë—É–¥—å—Ç–µ –ø–µ—Ä—à–∏–º, —Ö—Ç–æ –Ω–∞–ø–∏—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!</div>'
      }

      chatMessages.scrollTop = chatMessages.scrollHeight
    }

    if (!silent) {
      console.log("[v0] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã")
    }
  } catch (error) {
    console.error("[v0] üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", error)
  }
}

async function updateTypingIndicator() {
  if (!currentEvent) return

  try {
    const response = await fetch(`${API_URL}/api/events/${currentEvent.id}/typing?userId=${telegramUser.id}`)
    const typingUsers = await response.json()

    console.log("[v0] üëÄ –ü–µ—á–∞—Ç–∞—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", typingUsers)

    const indicator = document.getElementById("typing-indicator")
    if (typingUsers.length > 0) {
      const names = typingUsers.slice(0, 2).join(", ")
      const text = typingUsers.length === 1 ? `${names} –¥—Ä—É–∫—É—î...` : `${names} –¥—Ä—É–∫—É—é—Ç—å...`
      indicator.textContent = text
      indicator.classList.remove("hidden")
      console.log("[v0] ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä:", text)
    } else {
      indicator.classList.add("hidden")
      console.log("[v0] ‚ö†Ô∏è –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä - –Ω–∏–∫—Ç–æ –Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç")
    }
  } catch (error) {
    console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏:", error)
  }
}

function handleTyping() {
  if (!currentEvent) {
    console.log("[v0] ‚ö†Ô∏è handleTyping: currentEvent –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    return
  }

  console.log("[v0] ‚å®Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—á–∞—Ç–∞–µ—Ç...")

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
  fetch(`${API_URL}/api/events/${currentEvent.id}/typing`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      userId: telegramUser.id,
      firstName: telegramUser.first_name,
      isTyping: true,
    }),
  })
    .then(() => console.log("[v0] ‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"))
    .catch((error) => console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏:", error))

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
  if (typingTimeout) {
    clearTimeout(typingTimeout)
  }

  // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã —É–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
  typingTimeout = setTimeout(() => {
    console.log("[v0] ‚è∞ –¢–∞–π–º–∞—É—Ç –ø–µ—á–∞—Ç–∏ - —É–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä")
    fetch(`${API_URL}/api/events/${currentEvent.id}/typing`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        userId: telegramUser.id,
        firstName: telegramUser.first_name,
        isTyping: false,
      }),
    })
      .then(() => console.log("[v0] ‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ —Å–±—Ä–æ—à–µ–Ω"))
      .catch((error) => console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏:", error))
  }, 3000)
}

async function showUserProfile(userId, eventId) {
  try {
    const response = await fetch(`${API_URL}/api/events/${eventId}/participants/${userId}`)
    const participant = await response.json()

    const modal = document.getElementById("user-profile-modal")
    const avatar =
      participant.photoUrl ||
      `https://ui-avatars.com/api/?name=${encodeURIComponent(participant.firstName || "U")}&background=random&size=128`

    document.getElementById("profile-avatar").src = avatar
    document.getElementById("profile-name").textContent = participant.firstName || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    document.getElementById("profile-joined").textContent =
      `–ü—Ä–∏—î–¥–Ω–∞–≤—Å—è: ${new Date(participant.joinedAt).toLocaleDateString("uk-UA")}`

    modal.classList.add("active")
    document.body.style.overflow = "hidden"
  } catch (error) {
    console.error("[v0] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error)
    alert("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é")
  }
}

function closeUserProfile(event) {
  if (event && event.target !== event.currentTarget && !event.target.classList.contains("user-profile-close")) {
    return
  }

  const modal = document.getElementById("user-profile-modal")
  modal.classList.remove("active")
  document.body.style.overflow = ""
}

async function sendMessage() {
  console.log("[v0] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...")

  const input = document.getElementById("chat-input")
  const message = input.value.trim()

  if (!message || !currentEvent) {
    console.log("[v0] ‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
    return
  }

  console.log("[v0] üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:", message)
  console.log("[v0] üéâ –°–æ–±—ã—Ç–∏–µ:", currentEvent.title)

  if (typingTimeout) {
    clearTimeout(typingTimeout)
  }
  fetch(`${API_URL}/api/events/${currentEvent.id}/typing`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      userId: telegramUser.id,
      firstName: telegramUser.first_name,
      isTyping: false,
    }),
  }).catch(() => {})

  try {
    const response = await fetch(`${API_URL}/api/events/${currentEvent.id}/messages`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        message,
        userId: telegramUser.id,
        firstName: telegramUser.first_name,
        photoUrl: telegramUser.photo_url,
      }),
    })

    console.log("[v0] üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", response.status)

    if (response.ok) {
      console.log("[v0] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
      input.value = ""

      // –°—Ä–∞–∑—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      await loadChatMessages()
      console.log("[v0] üîÑ –ß–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
    } else if (response.status === 403) {
      const error = await response.json()
      console.error("[v0] ‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω:", error.error)
      alert(error.error || "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    } else {
      console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", response.status)
      alert("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    }
  } catch (error) {
    console.error("[v0] üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error)
    alert("–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è")
  }
}

async function uploadVideo(event) {
  console.log("[v0] üé¨ –ù–ê–ß–ê–õ–û –ó–ê–ì–†–£–ó–ö–ò –í–ò–î–ï–û - –§—É–Ω–∫—Ü–∏—è uploadVideo –≤—ã–∑–≤–∞–Ω–∞")
  console.log("[v0] üìã Event –æ–±—ä–µ–∫—Ç:", event)

  const input = event.currentTarget
  console.log("[v0] üì• Input —ç–ª–µ–º–µ–Ω—Ç:", input)
  console.log("[v0] üìÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:", input.files.length)

  const file = input.files[0]
  const button = input.parentElement

  if (!file) {
    console.error("[v0] ‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω!")
    console.log("[v0] üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ input.files:", input.files)
    return
  }

  console.log("[v0] ‚úÖ –§–∞–π–ª –≤—ã–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ")
  console.log("[v0] üìÑ –ò–º—è —Ñ–∞–π–ª–∞:", file.name)
  console.log("[v0] üì¶ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:", (file.size / 1024 / 1024).toFixed(2), "MB")
  console.log("[v0] üéûÔ∏è –¢–∏–ø —Ñ–∞–π–ª–∞:", file.type)
  console.log("[v0] üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–Ω–æ–ø–∫–∏ (onclic)")

  button.classList.add("onclic")

  let thumbnail = null
  try {
    console.log("[v0] üñºÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ...")
    const thumbnailStart = Date.now()
    thumbnail = await generateVideoThumbnail(file)
    const thumbnailTime = Date.now() - thumbnailStart

    console.log("[v0] ‚úÖ –ü—Ä–µ–≤—å—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ –∑–∞", thumbnailTime, "–º—Å")
    console.log("[v0] üñºÔ∏è –†–∞–∑–º–µ—Ä –ø—Ä–µ–≤—å—é:", thumbnail ? (thumbnail.size / 1024).toFixed(2) + " KB" : "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
  } catch (thumbnailError) {
    console.warn("[v0] ‚ö†Ô∏è –ù–ï –£–î–ê–õ–û–°–¨ –°–û–ó–î–ê–¢–¨ –ü–†–ï–í–¨–Æ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ")
    console.warn("[v0] üìõ –û—à–∏–±–∫–∞ –ø—Ä–µ–≤—å—é:", thumbnailError.message)
    console.warn("[v0] üìã Stack:", thumbnailError.stack)
    console.log("[v0] ‚úÖ –í–∏–¥–µ–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ë–ï–ó –ø—Ä–µ–≤—å—é")
    thumbnail = null
  }

  try {
    console.log("[v0] üì¶ –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏...")
    const formData = new FormData()
    formData.append("video", file)

    if (thumbnail) {
      formData.append("thumbnail", thumbnail)
      console.log("[v0] üìã FormData —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–µ–≤—å—é:")
      console.log("[v0]   - video:", file.name, file.size, "bytes")
      console.log("[v0]   - thumbnail:", thumbnail.size, "bytes")
    } else {
      console.log("[v0] üìã FormData —Å–æ–∑–¥–∞–Ω –ë–ï–ó –ø—Ä–µ–≤—å—é:")
      console.log("[v0]   - video:", file.name, file.size, "bytes")
      console.log("[v0]   - thumbnail: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)")
    }

    console.log("[v0] üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
    console.log("[v0] üîó URL:", `${API_URL}/api/videos/upload`)
    console.log("[v0] ‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∞:", new Date().toLocaleTimeString())

    const uploadStart = Date.now()
    const response = await fetch(`${API_URL}/api/videos/upload`, {
      method: "POST",
      body: formData,
    })
    const uploadTime = Date.now() - uploadStart

    console.log("[v0] üì® –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞", uploadTime, "–º—Å")
    console.log("[v0] üìä HTTP —Å—Ç–∞—Ç—É—Å:", response.status, response.statusText)
    console.log("[v0] üìã Headers –æ—Ç–≤–µ—Ç–∞:", Object.fromEntries(response.headers.entries()))

    const result = await response.json()
    console.log("[v0] üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (JSON):", result)

    if (response.ok) {
      console.log("[v0] ‚úÖ –£–°–ü–ï–•! –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
      console.log("[v0] üéâ ID –≤–∏–¥–µ–æ:", result.video?.id)
      console.log("[v0] üìù –°—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏:", result.video?.status)

      button.classList.remove("onclic")
      button.classList.add("validate")
      console.log("[v0] ‚úîÔ∏è –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ validate")

      showModerationNotification("–í–∞—à–µ –≤—ñ–¥–µ–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!")
      console.log("[v0] üí¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–æ")

      setTimeout(() => {
        button.classList.remove("validate")
        console.log("[v0] üîÑ –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—à–µ–Ω–∞")
      }, 2000)

      input.value = ""
      console.log("[v0] üßπ Input –æ—á–∏—â–µ–Ω")
    } else {
      console.error("[v0] ‚ùå –û–®–ò–ë–ö–ê –°–ï–†–í–ï–†–ê!")
      console.error("[v0] üìõ –ö–æ–¥ –æ—à–∏–±–∫–∏:", response.status)
      console.error("[v0] üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:", result.error || result.message)
      console.error("[v0] üìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:", result)

      button.classList.remove("onclic", "validate")
      alert(result.error || result.message || "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ")
    }
  } catch (error) {
    console.error("[v0] üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä!")
    console.error("[v0] üìõ –¢–∏–ø –æ—à–∏–±–∫–∏:", error.name)
    console.error("[v0] üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ:", error.message)
    console.error("[v0] üìö Stack trace:", error.stack)

    button.classList.remove("onclic", "validate")
    alert("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ")
  }

  console.log("[v0] üèÅ –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ò uploadVideo")
}

function generateVideoThumbnail(videoFile) {
  console.log("[v0] üé¨ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–≤—å—é –¥–ª—è –≤–∏–¥–µ–æ:", videoFile.name)

  return new Promise((resolve, reject) => {
    const video = document.createElement("video")
    const canvas = document.createElement("canvas")
    const ctx = canvas.getContext("2d")

    console.log("[v0] üé• –°–æ–∑–¥–∞–ª–∏ video —ç–ª–µ–º–µ–Ω—Ç")
    console.log("[v0] üñºÔ∏è –°–æ–∑–¥–∞–ª–∏ canvas —ç–ª–µ–º–µ–Ω—Ç")

    let loadedDataFired = false
    let seekedFired = false

    video.addEventListener("loadeddata", () => {
      loadedDataFired = true
      console.log("[v0] ‚úÖ –°–æ–±—ã—Ç–∏–µ loadeddata —Å—Ä–∞–±–æ—Ç–∞–ª–æ")
      console.log("[v0] üìä –†–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ:", video.videoWidth, "x", video.videoHeight)
      console.log("[v0] ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ:", video.duration, "—Å–µ–∫—É–Ω–¥")
      console.log("[v0] ‚è© –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º currentTime –Ω–∞ 0.5 —Å–µ–∫—É–Ω–¥—ã")
      video.currentTime = 0.5
    })

    video.addEventListener("seeked", () => {
      seekedFired = true
      console.log("[v0] ‚úÖ –°–æ–±—ã—Ç–∏–µ seeked —Å—Ä–∞–±–æ—Ç–∞–ª–æ")
      console.log("[v0] ‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤–∏–¥–µ–æ:", video.currentTime)

      const size = Math.min(video.videoWidth, video.videoHeight)
      const x = (video.videoWidth - size) / 2
      const y = (video.videoHeight - size) / 2

      console.log("[v0] üìê –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:")
      console.log("[v0]   - –†–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞:", size)
      console.log("[v0]   - –°–º–µ—â–µ–Ω–∏–µ X:", x)
      console.log("[v0]   - –°–º–µ—â–µ–Ω–∏–µ Y:", y)

      canvas.width = size
      canvas.height = size
      console.log("[v0] üñºÔ∏è Canvas —Ä–∞–∑–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", size, "x", size)

      try {
        ctx.drawImage(video, x, y, size, size, 0, 0, size, size)
        console.log("[v0] ‚úÖ –ö–∞–¥—Ä –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω –Ω–∞ canvas")
      } catch (drawError) {
        console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ –Ω–∞ canvas:", drawError)
        reject(drawError)
        return
      }

      canvas.toBlob(
        (blob) => {
          if (blob) {
            console.log("[v0] ‚úÖ Blob —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            console.log("[v0] üì¶ –†–∞–∑–º–µ—Ä blob:", (blob.size / 1024).toFixed(2), "KB")
            console.log("[v0] üéûÔ∏è –¢–∏–ø blob:", blob.type)
            resolve(blob)
          } else {
            console.error("[v0] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å blob –∏–∑ canvas")
            reject(new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é"))
          }
        },
        "image/jpeg",
        0.8,
      )
    })

    video.addEventListener("error", (e) => {
      console.error("[v0] ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ –≤ —ç–ª–µ–º–µ–Ω—Ç video")
      console.error("[v0] üìõ –ö–æ–¥ –æ—à–∏–±–∫–∏:", video.error?.code)
      console.error("[v0] üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ:", video.error?.message)
      console.error("[v0] üìã Event:", e)
      reject(new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: " + (video.error?.message || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")))
    })

    // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—é—Ç
    setTimeout(() => {
      if (!loadedDataFired) {
        console.error("[v0] ‚è∞ –¢–ê–ô–ú–ê–£–¢: –°–æ–±—ã—Ç–∏–µ loadeddata –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –∑–∞ 10 —Å–µ–∫—É–Ω–¥")
        reject(new Error("–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"))
      } else if (!seekedFired) {
        console.error("[v0] ‚è∞ –¢–ê–ô–ú–ê–£–¢: –°–æ–±—ã—Ç–∏–µ seeked –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –∑–∞ 10 —Å–µ–∫—É–Ω–¥")
        reject(new Error("–¢–∞–π–º–∞—É—Ç –ø–µ—Ä–µ–º–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"))
      }
    }, 10000)

    console.log("[v0] üîó –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞...")
    try {
      video.src = URL.createObjectURL(videoFile)
      console.log("[v0] ‚úÖ URL —Å–æ–∑–¥–∞–Ω:", video.src)
    } catch (urlError) {
      console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è URL:", urlError)
      reject(urlError)
    }
  })
}

function openTikTok(event) {
  if (event && event.stopPropagation) {
    event.stopPropagation()
  }
  const tiktokUrl = "https://www.tiktok.com/@uhub_ua?_t=ZM-90ZcsYFEWWC&_r=1"
  if (window.Telegram && window.Telegram.WebApp) {
    window.Telegram.WebApp.openLink(tiktokUrl)
  } else {
    window.open(tiktokUrl, "_blank")
  }
}

let allPhotos = []
let allEventsForPhotos = []

function previewPhoto() {
  const input = document.getElementById("photo-file-input")
  const file = input.files[0]

  if (file) {
    const reader = new FileReader()
    reader.onload = (e) => {
      const preview = document.getElementById("photo-preview")
      const img = document.getElementById("photo-preview-img")
      img.src = e.target.result
      preview.classList.remove("hidden")
      document.getElementById("photo-file-label").textContent = file.name
    }
    reader.readAsDataURL(file)
  }
}

async function uploadEventPhoto(event) {
  console.log("[v0] üì∏ ========== –ù–ê–ß–ê–õ–û –ó–ê–ì–†–£–ó–ö–ò –§–û–¢–û –í –°–û–ë–´–¢–ò–ï ==========")

  const eventId = document.getElementById("upload-event-select").value
  const description = document.getElementById("upload-photo-description").value
  const fileInput = document.getElementById("photo-file-input")
  const file = fileInput.files[0]
  const button = event.currentTarget

  console.log("[v0] üìã –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:")
  console.log("[v0]   - Event ID:", eventId)
  console.log("[v0]   - Description:", description)
  console.log("[v0]   - File:", file ? file.name : "–Ω–µ –≤—ã–±—Ä–∞–Ω")

  if (!eventId) {
    console.error("[v0] ‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ!")
    alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–≤–µ–Ω—Ç")
    return
  }

  if (!file) {
    console.error("[v0] ‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω!")
    alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ç–æ")
    return
  }

  console.log("[v0] ‚úÖ –§–∞–π–ª –≤—ã–±—Ä–∞–Ω:")
  console.log("[v0]   - –ò–º—è:", file.name)
  console.log("[v0]   - –†–∞–∑–º–µ—Ä:", (file.size / 1024).toFixed(2), "KB")
  console.log("[v0]   - –¢–∏–ø:", file.type)

  button.classList.add("onclic")
  button.disabled = true

  const formData = new FormData()
  formData.append("photo", file)
  formData.append("eventId", eventId)
  formData.append("description", description)
  formData.append("userId", telegramUser.id)
  formData.append("firstName", telegramUser.first_name)

  console.log("[v0] üì¶ FormData —Å–æ–∑–¥–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")

  try {
    const uploadStart = Date.now()
    const response = await fetch(`${API_URL}/api/photos/upload`, {
      method: "POST",
      body: formData,
    })
    const uploadTime = Date.now() - uploadStart

    console.log("[v0] üì® –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞", uploadTime, "–º—Å")
    console.log("[v0] üìä HTTP —Å—Ç–∞—Ç—É—Å:", response.status)

    const result = await response.json()
    console.log("[v0] üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", result)

    if (response.ok) {
      console.log("[v0] ‚úÖ –£–°–ü–ï–•! –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")

      button.classList.remove("onclic")
      button.classList.add("validate")

      showModerationNotification("–§–æ—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!")

      setTimeout(() => {
        button.classList.remove("validate")
        button.disabled = false

        document.getElementById("upload-event-select").value = ""
        document.getElementById("upload-photo-description").value = ""
        fileInput.value = ""
        document.getElementById("photo-preview").classList.add("hidden")
        document.getElementById("photo-file-label").textContent = "üì∑ –û–±—Ä–∞—Ç–∏ —Ñ–æ—Ç–æ"

        goToPage("page-event-photos")
      }, 2000)
    } else {
      console.error("[v0] ‚ùå –û–®–ò–ë–ö–ê –°–ï–†–í–ï–†–ê:", result.error || result.message)
      button.classList.remove("onclic", "validate")
      button.disabled = false
      alert(result.message || result.error || "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ")
    }

    console.log("[v0] üì∏ ========== –ö–û–ù–ï–¶ –ó–ê–ì–†–£–ó–ö–ò –§–û–¢–û ==========")
  } catch (error) {
    console.error("[v0] üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:", error)
    console.error("[v0] üìö Stack:", error.stack)

    button.classList.remove("onclic", "validate")
    button.disabled = false
    alert("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ")
  }
}

async function loadEventPhotos() {
  try {
    const [photosRes, eventsRes] = await Promise.all([fetch(`${API_URL}/api/photos`), fetch(`${API_URL}/api/events`)])

    allPhotos = await photosRes.json()
    allEventsForPhotos = await eventsRes.json()

    const filter = document.getElementById("photo-event-filter")
    if (filter) {
      filter.innerHTML =
        '<option value="">–í—Å—ñ —ñ–≤–µ–Ω—Ç–∏</option>' +
        allEventsForPhotos.map((event) => `<option value="${event.id}">${event.title}</option>`).join("")
    }

    displayPhotos(allPhotos)
  } catch (error) {
    console.error("Error loading photos:", error)
    document.getElementById("photos-gallery").innerHTML =
      '<div class="col-span-2 text-center text-red-500">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ</div>'
  }
}

function filterPhotosByEvent() {
  const selectedEventId = document.getElementById("photo-event-filter").value

  if (selectedEventId) {
    const filtered = allPhotos.filter((p) => p.eventId === selectedEventId)
    displayPhotos(filtered)
  } else {
    displayPhotos(allPhotos)
  }
}

function displayPhotos(photos) {
  const gallery = document.getElementById("photos-gallery")

  if (photos.length === 0) {
    gallery.innerHTML = '<div class="col-span-2 text-center text-gray-500">–§–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</div>'
    return
  }

  gallery.innerHTML = photos
    .map((photo) => {
      const event = allEventsForPhotos.find((e) => e.id === photo.eventId)
      const eventName = event ? event.title : "–ü–æ–¥—ñ—è –≤–∏–¥–∞–ª–µ–Ω–∞"

      return `
      <div class="bg-white rounded-lg overflow-hidden shadow-sm cursor-pointer hover:shadow-md transition" onclick='openPhotoModal(${JSON.stringify(photo).replace(/'/g, "&apos;")})'>
        <img src="${API_URL}${photo.url}" class="w-full h-40 object-cover" alt="${photo.description || eventName}">
        <div class="p-2">
          <p class="text-xs font-semibold text-gray-700">${eventName}</p>
          ${photo.description ? `<p class="text-xs text-gray-500 mt-1">${photo.description}</p>` : ""}
        </div>
      </div>
    `
    })
    .join("")
}

function openPhotoModal(photo) {
  const modal = document.getElementById("photo-modal")
  const event = allEventsForPhotos.find((e) => e.id === photo.eventId)
  const eventName = event ? event.title : "–ü–æ–¥—ñ—è –≤–∏–¥–∞–ª–µ–Ω–∞"

  document.getElementById("modal-photo-img").src = `${API_URL}${photo.url}`
  document.getElementById("modal-photo-event").textContent = eventName
  document.getElementById("modal-photo-description").textContent = photo.description || ""
  document.getElementById("modal-photo-author").textContent = photo.firstName ? `–ê–≤—Ç–æ—Ä: ${photo.firstName}` : ""

  modal.classList.add("active")
  document.body.style.overflow = "hidden"
}

function closePhotoModal(event) {
  if (event && event.target !== event.currentTarget && !event.target.classList.contains("photo-modal-close")) {
    return
  }

  const modal = document.getElementById("photo-modal")
  modal.classList.remove("active")
  document.body.style.overflow = ""
}

async function loadUploadPhotoEvents() {
  try {
    const response = await fetch(`${API_URL}/api/events`)
    const events = await response.json()

    const select = document.getElementById("upload-event-select")
    if (select) {
      select.innerHTML =
        '<option value="">–û–±–µ—Ä—ñ—Ç—å —ñ–≤–µ–Ω—Ç</option>' +
        events.map((event) => `<option value="${event.id}">${event.title}</option>`).join("")
    }
  } catch (error) {
    console.error("Error loading events for upload:", error)
  }
}

async function loadUhubChatMessages(silent = false) {
  if (!silent) {
    console.log("[v0] üí¨ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—â–µ–≥–æ —á–∞—Ç–∞ U-hub")
  }

  try {
    const response = await fetch(`${API_URL}/api/uhub-chat/messages`)
    const messages = await response.json()

    if (!silent) {
      console.log("[v0] üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:", messages.length)
    }

    const chatMessages = document.getElementById("uhub-chat-messages")

    if (silent && messages.length > 0) {
      const existingMessages = chatMessages.querySelectorAll("[data-message-id]")
      const existingIds = Array.from(existingMessages).map((el) => el.getAttribute("data-message-id"))

      const newMessages = messages.filter((msg) => {
        const msgId = `${msg.userId}-${msg.timestamp}`
        return !existingIds.includes(msgId)
      })

      if (newMessages.length > 0) {
        const wasAtBottom = chatMessages.scrollHeight - chatMessages.scrollTop <= chatMessages.clientHeight + 50

        newMessages.forEach((msg) => {
          const isOwn = msg.userId === telegramUser.id
          const avatar =
            msg.photoUrl ||
            `https://ui-avatars.com/api/?name=${encodeURIComponent(msg.firstName || "U")}&background=random`
          const msgId = `${msg.userId}-${msg.timestamp}`

          const messageDiv = document.createElement("div")
          messageDiv.className = `flex ${isOwn ? "justify-end" : "justify-start"} mb-3 chat-message-new`
          messageDiv.setAttribute("data-message-id", msgId)
          messageDiv.innerHTML = `
            ${!isOwn ? `<img src="${avatar}" class="w-8 h-8 rounded-full mr-2 cursor-pointer" alt="${msg.firstName}">` : ""}
            <div class="${isOwn ? "chat-message own" : "chat-message"}">
              ${!isOwn ? `<div class="text-xs font-semibold mb-1">${msg.firstName}</div>` : ""}
              <div>${msg.text}</div>
            </div>
            ${isOwn ? `<img src="${avatar}" class="w-8 h-8 rounded-full ml-2 cursor-pointer" alt="${msg.firstName}">` : ""}
          `

          chatMessages.appendChild(messageDiv)
        })

        if (wasAtBottom) {
          chatMessages.scrollTop = chatMessages.scrollHeight
        }
      }
    } else {
      chatMessages.innerHTML = messages
        .map((msg) => {
          const isOwn = msg.userId === telegramUser.id
          const avatar =
            msg.photoUrl ||
            `https://ui-avatars.com/api/?name=${encodeURIComponent(msg.firstName || "U")}&background=random`
          const msgId = `${msg.userId}-${msg.timestamp}`

          return `
            <div class="flex ${isOwn ? "justify-end" : "justify-start"} mb-3" data-message-id="${msgId}">
              ${!isOwn ? `<img src="${avatar}" class="w-8 h-8 rounded-full mr-2 cursor-pointer" alt="${msg.firstName}">` : ""}
              <div class="${isOwn ? "chat-message own" : "chat-message"}">
                ${!isOwn ? `<div class="text-xs font-semibold mb-1">${msg.firstName}</div>` : ""}
                <div>${msg.text}</div>
              </div>
              ${isOwn ? `<img src="${avatar}" class="w-8 h-8 rounded-full ml-2 cursor-pointer" alt="${msg.firstName}">` : ""}
            </div>
          `
        })
        .join("")

      if (messages.length === 0) {
        chatMessages.innerHTML =
          '<div class="text-center text-gray-500">–ß–∞—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π. –ë—É–¥—å—Ç–µ –ø–µ—Ä—à–∏–º, —Ö—Ç–æ –Ω–∞–ø–∏—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!</div>'
      }

      chatMessages.scrollTop = chatMessages.scrollHeight
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞
    if (!uhubChatUpdateInterval) {
      uhubChatUpdateInterval = setInterval(async () => {
        await loadUhubChatMessages(true)
        await updateUhubTypingIndicator()
      }, 1000)
    }

    if (!silent) {
      console.log("[v0] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ–±—â–µ–≥–æ —á–∞—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã")
    }
  } catch (error) {
    console.error("[v0] üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—â–µ–≥–æ —á–∞—Ç–∞:", error)
  }
}

async function sendUhubMessage() {
  console.log("[v0] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç...")

  const input = document.getElementById("uhub-chat-input")
  const message = input.value.trim()

  if (!message) {
    console.log("[v0] ‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ")
    return
  }

  console.log("[v0] üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:", message)

  if (uhubTypingTimeout) {
    clearTimeout(uhubTypingTimeout)
  }
  fetch(`${API_URL}/api/uhub-chat/typing`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      userId: telegramUser.id,
      firstName: telegramUser.first_name,
      isTyping: false,
    }),
  }).catch(() => {})

  try {
    const response = await fetch(`${API_URL}/api/uhub-chat/messages`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        message,
        userId: telegramUser.id,
        firstName: telegramUser.first_name,
        photoUrl: telegramUser.photo_url,
      }),
    })

    console.log("[v0] üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", response.status)

    if (response.ok) {
      console.log("[v0] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
      input.value = ""

      await loadUhubChatMessages()
      console.log("[v0] üîÑ –ß–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
    } else {
      console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", response.status)
      alert("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    }
  } catch (error) {
    console.error("[v0] üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error)
    alert("–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è")
  }
}

function handleUhubTyping() {
  console.log("[v0] ‚å®Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—á–∞—Ç–∞–µ—Ç –≤ –æ–±—â–µ–º —á–∞—Ç–µ...")

  fetch(`${API_URL}/api/uhub-chat/typing`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      userId: telegramUser.id,
      firstName: telegramUser.first_name,
      isTyping: true,
    }),
  })
    .then(() => console.log("[v0] ‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"))
    .catch((error) => console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏:", error))

  if (uhubTypingTimeout) {
    clearTimeout(uhubTypingTimeout)
  }

  uhubTypingTimeout = setTimeout(() => {
    console.log("[v0] ‚è∞ –¢–∞–π–º–∞—É—Ç –ø–µ—á–∞—Ç–∏ - —É–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä")
    fetch(`${API_URL}/api/uhub-chat/typing`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        userId: telegramUser.id,
        firstName: telegramUser.first_name,
        isTyping: false,
      }),
    })
      .then(() => console.log("[v0] ‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ —Å–±—Ä–æ—à–µ–Ω"))
      .catch((error) => console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏:", error))
  }, 3000)
}

async function updateUhubTypingIndicator() {
  try {
    const response = await fetch(`${API_URL}/api/uhub-chat/typing?userId=${telegramUser.id}`)
    const typingUsers = await response.json()

    const indicator = document.getElementById("uhub-typing-indicator")
    if (typingUsers.length > 0) {
      const names = typingUsers.slice(0, 2).join(", ")
      const text = typingUsers.length === 1 ? `${names} –¥—Ä—É–∫—É—î...` : `${names} –¥—Ä—É–∫—É—é—Ç—å...`
      indicator.textContent = text
      indicator.classList.remove("hidden")
    } else {
      indicator.classList.add("hidden")
    }
  } catch (error) {
    console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏:", error)
  }
}

updateTime()
setInterval(updateTime, 1000)

const savedSchedule = localStorage.getItem("userSchedule")
if (savedSchedule) {
  userSchedule = JSON.parse(savedSchedule)
  document.getElementById("main-schedule-subtitle").textContent = `‚Ä¢ ${userSchedule.name}`
  document.getElementById("main-schedule-subtitle").style.display = "block"
}

// –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
clearLegacySchedule()

console.log("[v0] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
loadNews()
loadEvents() // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å—Ä–∞–∑—É
loadHeroImages()
loadApprovedVideos()
console.log("[v0] ‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

if (window.Telegram && window.Telegram.WebApp) {
  window.Telegram.WebApp.ready()
  window.Telegram.WebApp.expand()
}

if (lucide) {
  // Check if lucide is declared before using it
  lucide.createIcons()
}

function preloadImage(img, src, position) {
  const image = new Image()
  image.onload = () => {
    img.src = src
    if (position) {
      img.style.objectPosition = `${position.x}% ${position.y}%`
    }
    img.classList.add("loaded")
    if (img.parentElement && img.parentElement.classList.contains("image-container")) {
      img.parentElement.classList.add("loaded")
    }
  }
  image.src = src
}

async function loadHeroImages() {
  try {
    const response = await fetch(`${API_URL}/api/settings/images`)
    const data = await response.json()
    const images = data.images || data
    const positions = data.positions || {}

    if (images.news) {
      const newsImg = document.getElementById("main-news-img")
      preloadImage(newsImg, images.news, positions.news)
    }
    if (images.schedule) {
      const scheduleImgs = document.querySelectorAll("#main-schedule-card img")
      scheduleImgs.forEach((img) => {
        preloadImage(img, images.schedule, positions.schedule)
      })
    }
    if (images.video) {
      const videoImg = document.getElementById("main-video-img")
      preloadImage(videoImg, images.video, positions.video)
    }
    if (images.events) {
      const eventImg = document.getElementById("main-event-img")
      preloadImage(eventImg, images.events, positions.events)
    }
  } catch (error) {
    console.error("Error loading hero images:", error)
  }
}

async function loadApprovedVideos() {
  console.log("[v0] üìπ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–µ–≤—å—é...")

  try {
    const response = await fetch(`${API_URL}/api/videos/approved`)
    const videos = await response.json()

    console.log("[v0] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ:", videos.length)
    console.log("[v0] üìã –î–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ:", videos)

    const grid = document.getElementById("main-video-grid")
    if (!grid) {
      console.error("[v0] ‚ùå –≠–ª–µ–º–µ–Ω—Ç main-video-grid –Ω–µ –Ω–∞–π–¥–µ–Ω!")
      return
    }

    if (videos.length === 0) {
      console.log("[v0] ‚ö†Ô∏è –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã")
      grid.innerHTML = `
                <div class="aspect-square overflow-hidden rounded-md cursor-pointer" onclick="openTikTok(event)">
                    <img src="https://placehold.co/150x150/fecaca/900?text=V" class="w-full h-full object-cover">
                </div>
                <div class="aspect-square overflow-hidden rounded-md cursor-pointer" onclick="openTikTok(event)">
                    <img src="https://placehold.co/150x150/fecaca/900?text=V" class="w-full h-full object-cover">
                </div>
                <div class="aspect-square overflow-hidden rounded-md cursor-pointer" onclick="openTikTok(event)">
                    <img src="https://placehold.co/150x150/fecaca/900?text=V" class="w-full h-full object-cover">
                </div>
            `
      return
    }

    const thumbnails = []
    for (let i = 0; i < 3; i++) {
      if (videos[i] && videos[i].thumbnailPath) {
        const thumbnailUrl = `${API_URL}${videos[i].thumbnailPath}`
        console.log(`[v0] üñºÔ∏è –ü—Ä–µ–≤—å—é ${i + 1}:`, thumbnailUrl)

        thumbnails.push(`
                    <div class="aspect-square overflow-hidden rounded-md cursor-pointer transition-transform hover:scale-105" onclick="openTikTok(event)">
                        <img src="${thumbnailUrl}" class="w-full h-full object-cover" alt="Video ${i + 1}" onerror="console.error('[v0] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é:', this.src); this.src='https://placehold.co/150x150/fecaca/900?text=V'">
                    </div>
                `)
      } else {
        console.log(`[v0] ‚ö†Ô∏è –í–∏–¥–µ–æ ${i + 1}: –ø—Ä–µ–≤—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`)
        thumbnails.push(`
                    <div class="aspect-square overflow-hidden rounded-md cursor-pointer transition-transform hover:scale-105" onclick="openTikTok(event)">
                        <img src="https://placehold.co/150x150/fecaca/900?text=V" class="w-full h-full object-cover">
                    </div>
                `)
      }
    }

    grid.innerHTML = thumbnails.join("")
    console.log("[v0] ‚úÖ –ü—Ä–µ–≤—å—é –≤–∏–¥–µ–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –±–ª–æ–∫–∞—Ö")
  } catch (error) {
    console.error("[v0] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ:", error)
    console.error("[v0] üìã Stack:", error.stack)
  }
}
